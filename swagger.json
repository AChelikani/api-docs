{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "\u003cstyle type=\"text/css\"\u003e\nn {\n    padding: 1em;\n    width: 100%;\n    display: block;\n    margin: 28px 0;\n}\nn.info {\n    background-color: rgba(0, 51, 160, 0.1);\n}\nn.warning {\n    background-color: #fdf6e3;\n}\ni:before {\n    margin-right: 6px;\n}\nnh {\n    font-size: 1.5rem;\n    font-weight: 700;\n    line-height: 1.1;\n    display: block;\n}\nnb {\n    margin-top: 10px;\n    padding-left: 22px;\n    display: block;\n}\n\u003c/style\u003e\n\n# Overview\n\n\u003cn class=\"info\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-info-circle\"\u003e\u003c/i\u003e\nSomething new!\n\u003c/nh\u003e\n\u003cnb\u003e\nWelcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.\u003cbr\u003e\n\u003cbr\u003e\nWant to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).\u003cbr\u003e\n\u003cbr\u003e\n*Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*\u003cbr\u003e\n\u003cbr\u003e\nSubmit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)!\n\u003c/nb\u003e\n\u003c/n\u003e\n\nSamsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.\n\nThe Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.\n\nVisit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.\n\nIf you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).\n\n## Endpoints\n\nAll our APIs can be accessed through HTTP requests to URLs like:\n\n```\nhttps://api.samsara.com/\u003cendpoint\u003e\n```\n\nFor EU customers, this URL will be:\n\n```\nhttps://api.eu.samsara.com/\u003cendpoint\u003e\n```\n\n\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nNote\n\u003c/nh\u003e\n\u003cnb\u003e\nLegacy endpoints will have the URL: `https://api.samsara.com/v1/\u003cendpoint\u003e` or `https://api.eu.samsara.com/v1/\u003cendpoint\u003e`\n\u003c/nb\u003e\n\u003c/n\u003e\n\n## Authentication\n\nTo authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings-\u003eOrganization-\u003eAPI Tokens`.\n\nYour API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.\n\nAuthentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:\n\n```curl\nAuthorization: Bearer {access_token}\n```\n\nAll API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.\n\n## Common Patterns\n\nYou can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).\n",
    "title": "Samsara API",
    "version": "2019-12-12"
  },
  "host": "api.samsara.com",
  "paths": {
    "/addresses": {
      "get": {
        "description": "Returns a list of all addresses in an organization",
        "tags": [
          "Addresses"
        ],
        "summary": "List all addresses",
        "operationId": "listAddresses",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A filter on data to have a created at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "createdAfterTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all addresses in the organization",
            "schema": {
              "$ref": "#/definitions/ListAddressesResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new address in the organization",
        "tags": [
          "Addresses"
        ],
        "summary": "Create an address",
        "operationId": "createAddress",
        "parameters": [
          {
            "description": "The address to create.",
            "name": "address",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateAddressRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created address object with ID.",
            "schema": {
              "$ref": "#/definitions/AddressResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/addresses/{id}": {
      "get": {
        "description": "Returns a specific address.",
        "tags": [
          "Addresses"
        ],
        "summary": "Retrieve an address",
        "operationId": "getAddress",
        "responses": {
          "200": {
            "description": "An Address.",
            "schema": {
              "$ref": "#/definitions/AddressResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a specific address.",
        "tags": [
          "Addresses"
        ],
        "summary": "Delete an address",
        "operationId": "deleteAddress",
        "responses": {
          "204": {
            "description": "Empty success body"
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update a specific address.",
        "tags": [
          "Addresses"
        ],
        "summary": "Update an address",
        "operationId": "updateAddress",
        "parameters": [
          {
            "description": "The address fields to update.",
            "name": "address",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateAddressRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated address object with ID.",
            "schema": {
              "$ref": "#/definitions/AddressResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of the Address. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: `key:value`. For example, `crmId:abc123`",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/contacts": {
      "get": {
        "description": "Returns a list of all contacts in an organization.",
        "tags": [
          "Contacts"
        ],
        "summary": "List all contacts",
        "operationId": "listContacts",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all contacts",
            "schema": {
              "$ref": "#/definitions/ListContactsResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Add a contact to the organization",
        "tags": [
          "Contacts"
        ],
        "summary": "Create a contact",
        "operationId": "createContact",
        "parameters": [
          {
            "description": "The contact create parameters.",
            "name": "contact",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateContactRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contact was successfully added.",
            "schema": {
              "$ref": "#/definitions/ContactResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/contacts/{id}": {
      "get": {
        "description": "Get a specific contact's information.",
        "tags": [
          "Contacts"
        ],
        "summary": "Retrieve a contact",
        "operationId": "getContact",
        "responses": {
          "200": {
            "description": "Returns the specified contact.",
            "schema": {
              "$ref": "#/definitions/ContactResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete the given contact.",
        "tags": [
          "Contacts"
        ],
        "summary": "Delete a contact",
        "operationId": "deleteContact",
        "responses": {
          "204": {
            "description": "Returns an empty success response."
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update a specific contact's information.",
        "tags": [
          "Contacts"
        ],
        "summary": "Update a contact",
        "operationId": "updateContact",
        "parameters": [
          {
            "description": "Updates to the contact.",
            "name": "contact",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateContactRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated contact object with given ID.",
            "schema": {
              "$ref": "#/definitions/ContactResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique identifier for the contact.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/fleet/carrier-proposed-assignments": {
      "get": {
        "description": "Show the assignments that are active for drivers and that would currently be visible to them in the driver app.",
        "tags": [
          "Carrier Proposed Assignments"
        ],
        "summary": "Retrieve assignments",
        "operationId": "getCarrierProposedAssignment",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, limits the results to those for these drivers. e.g. driverIds=1,2,3",
            "name": "driverIds",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "If specified, shows assignments that will be active at this time. Defaults to now, which would show current active assignments. In RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "activeTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the assignments that drivers would see in the future, if any.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/CarrierProposedAssignment"
                  }
                },
                "pagination": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/definitions/paginationResponse"
                    }
                  ]
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a new assignment that a driver can later use. Each driver can only have one future assignment.",
        "tags": [
          "Carrier Proposed Assignments"
        ],
        "summary": "Create an assignment",
        "operationId": "createCarrierProposedAssignment",
        "parameters": [
          {
            "description": "The assignment to create.",
            "name": "carrierProposedAssignment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CarrierProposedAssignmentCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the created assignment",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/CarrierProposedAssignment"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/carrier-proposed-assignments/{id}": {
      "delete": {
        "description": "Permanently delete an assignment. You can only delete assignments that are not yet active. To override a currently active assignment, create a new empty one, instead.",
        "tags": [
          "Carrier Proposed Assignments"
        ],
        "summary": "Delete an assignment",
        "operationId": "deleteCarrierProposedAssignmentById",
        "responses": {
          "204": {
            "description": "Empty success body"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of the assignment.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/fleet/defects": {
      "get": {
        "description": "Returns a list of DVIR defects in an organization, filtered by creation time. The maximum time period you can query for is 30 days.",
        "tags": [
          "Maintenance"
        ],
        "summary": "Get all defects",
        "operationId": "getDvirDefects",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for is 30 days.*",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for is 30 days.*",
            "name": "endTime",
            "in": "query",
            "required": true
          },
          {
            "type": "boolean",
            "description": "A filter on the data based on resolution status. Example: `isResolved=true`",
            "name": "isResolved",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all DVIR defects in the organization",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Defect"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/defects/{id}": {
      "patch": {
        "description": "Resolves a given defect by marking its `isResolved` field to `true`.",
        "tags": [
          "Maintenance"
        ],
        "summary": "Resolve a defect",
        "operationId": "resolveDvirDefect",
        "parameters": [
          {
            "description": "The DVIR defect fields to update.",
            "name": "defect",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DefectPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the modified defect entity",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/Defect"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of the defect.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/fleet/document-types": {
      "get": {
        "description": "Get information about all document types.",
        "tags": [
          "Documents"
        ],
        "summary": "List all document types",
        "operationId": "getDocumentTypes",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all of the document types.",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/DocumentType"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/documents": {
      "get": {
        "description": "Get all documents",
        "tags": [
          "Documents"
        ],
        "summary": "List all documents",
        "operationId": "getDocuments",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Queries documents on createdAtTime. Is required if an endTime is specified. Defaults to current time - 1 day if startTime and endTime are not provided. (Example: 2019-06-13T19:08:25Z).",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Queries documents on createdAtTime. Defaults to startTime + 1 day if not specified. (Example: 2019-06-13T19:08:25Z). Time range cannot exceed 3 days (72 hours).",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "string",
            "description": "A document type ID.",
            "name": "documentTypeId",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all documents",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Document"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a document for a particular driver at a specific route stop.",
        "tags": [
          "Documents"
        ],
        "summary": "Create a document",
        "operationId": "createDocument",
        "parameters": [
          {
            "description": "The document to create.",
            "name": "document",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DocumentCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created document object, including the new document ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Document"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/documents/{id}": {
      "delete": {
        "description": "Delete a specific document.",
        "tags": [
          "Documents"
        ],
        "summary": "Delete a document",
        "operationId": "deleteDocument",
        "responses": {
          "204": {
            "description": "Empty success body"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of the document.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/fleet/drivers": {
      "get": {
        "description": "Get all drivers in organization.",
        "tags": [
          "Drivers"
        ],
        "summary": "List all drivers",
        "operationId": "listDrivers",
        "parameters": [
          {
            "enum": [
              "active",
              "deactivated"
            ],
            "type": "string",
            "description": "If value is `deactivated`, only drivers that are deactivated will appear in the response. This parameter will default to `active` if not provided (fetching only active drivers).",
            "name": "driverActivationStatus",
            "in": "query"
          },
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A filter on data to have an updated at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "updatedAfterTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A filter on data to have a created at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "createdAfterTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all driver objects.",
            "schema": {
              "$ref": "#/definitions/ListDriversResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Add a driver to the organization.",
        "tags": [
          "Drivers"
        ],
        "summary": "Create a driver",
        "operationId": "createDriver",
        "parameters": [
          {
            "description": "The driver to create.",
            "name": "driver",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateDriverRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created driver object, with Samsara-generated ID.",
            "schema": {
              "$ref": "#/definitions/DriverResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/drivers/efficiency": {
      "get": {
        "description": "Get all drivers' efficiencies.",
        "tags": [
          "Efficiency"
        ],
        "summary": "List all drivers' efficiencies.",
        "operationId": "getDriverEfficiency",
        "parameters": [
          {
            "enum": [
              "active",
              "deactivated"
            ],
            "type": "string",
            "description": "If value is `deactivated`, only drivers that are deactivated will appear in the response. This parameter will default to `active` if not provided (fetching only active drivers).",
            "name": "driverActivationStatus",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of driver IDs. Cannot be used with tag filtering or driver status. Example: `driverIds=1234,5678`",
            "name": "driverIds",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "Filters summary to drivers based on this comma-separated list of tag IDs. Data from all the drivers' respective vehicles will be included in the summary, regardless of which tag the vehicle is associated with. Should not be provided in addition to `driverIds`. Example: driverTagIds=1234,5678",
            "name": "driverTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "Filters like `driverTagIds` but includes descendants of all the given parent tags. Should not be provided in addition to `driverIds`. Example: `driverParentTagIds=1234,5678`",
            "name": "driverParentTagIds",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. The results will be truncated to the hour mark for the provided time. For example, if `startTime` is 2020-03-17T12:06:19Z then the results will include data starting from 2020-03-17T12:00:00Z. The provided start time cannot be in the future. Start time can be at most 1 month before end time. If the start time is within the last hour, the results will be empty. Default: 24 hours prior to endTime.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. The results will be truncated to the hour mark for the provided time. For example, if `endTime` is 2020-03-17T12:06:19Z then the results will include data up until 2020-03-17T12:00:00Z. The provided end time cannot be in the future. End time can be at most 1 month older than start time.   Default: The current time truncated to the hour mark.",
            "name": "endTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all drivers' efficiencies",
            "schema": {
              "$ref": "#/definitions/DriverEfficienciesResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/drivers/safety-scores": {
      "get": {
        "description": "Fetch safety scores for all drivers in the organization in a given time period.",
        "tags": [
          "Safety"
        ],
        "summary": "List all safety scores by driver",
        "operationId": "getOrgDriverSafetyScores",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "Beginning of the time range, specified in RFC 3339 time.",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "description": "End of the time range, specified in RFC 3339 time.",
            "name": "endTime",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Safety scores for all vehicles in the organization",
            "schema": {
              "$ref": "#/definitions/OrgSafetyScoresResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/drivers/tachograph-activity/history": {
      "get": {
        "description": "Returns all known tachograph activity for all specified drivers in the time range.",
        "tags": [
          "Drivers"
        ],
        "summary": "Get driver tachograph activity",
        "operationId": "getDriverTachographActivity",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. It can't be more than 30 days past startTime. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "endTime",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of driver IDs. Example: `driverIds=1234,5678`",
            "name": "driverIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all driver tachograph activities in a specified time range.",
            "schema": {
              "$ref": "#/definitions/DriverTachographActivityResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/drivers/{id}": {
      "get": {
        "description": "Get information about a driver.",
        "tags": [
          "Drivers"
        ],
        "summary": "Retrieve a driver",
        "operationId": "getDriver",
        "responses": {
          "200": {
            "description": "Returns the specified driver.",
            "schema": {
              "$ref": "#/definitions/DriverResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update a specific driver's information. This can also be used to activate or de-activate a given driver by setting the driverActivationStatus field.",
        "tags": [
          "Drivers"
        ],
        "summary": "Update a driver",
        "operationId": "updateDriver",
        "parameters": [
          {
            "description": "Updates to the driver properties.",
            "name": "driver",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateDriverRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated driver object, with ID.",
            "schema": {
              "$ref": "#/definitions/DriverResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of the driver. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: `key:value`. For example, `payrollId:ABFS18600`",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/fleet/dvirs": {
      "post": {
        "description": "Creates a new mechanic DVIR in the organization.",
        "tags": [
          "Maintenance"
        ],
        "summary": "Create a mechanic DVIR",
        "operationId": "createDvir",
        "parameters": [
          {
            "description": "The DVIR to create.",
            "name": "dvir",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DvirCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created DVIR.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Dvir"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/dvirs/history": {
      "get": {
        "description": "Returns a list of all DVIRs in an organization",
        "tags": [
          "Maintenance"
        ],
        "summary": "Get all DVIRs",
        "operationId": "getDvirsHistory",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "endTime",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of all DVIRs in the organization",
            "schema": {
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Dvir"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/dvirs/{id}": {
      "get": {
        "description": "Returns a specific dvir",
        "tags": [
          "Maintenance"
        ],
        "summary": "Retrieve a DVIR",
        "operationId": "getDvirById",
        "responses": {
          "200": {
            "description": "A dvir object with ID",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Dvir"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Resolves a given DVIR by marking its `isResolved` field to `true`.",
        "tags": [
          "Maintenance"
        ],
        "summary": "Resolve a DVIR",
        "operationId": "updateDvirById",
        "parameters": [
          {
            "description": "The dvir fields to update.",
            "name": "dvir",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/DvirPatch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated dvir object with ID.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Dvir"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of the DVIR.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/fleet/equipment": {
      "get": {
        "description": "Returns a list of all equipment in an organization. Equipment objects represent powered assets connected to a [Samsara AG24](https://www.samsara.com/products/models/ag24) via an APWR, CAT, or J1939 cable. They are automatically created with a unique Samsara Equipment ID whenever an AG24 is activated in your organization.",
        "tags": [
          "Equipment"
        ],
        "summary": "List all equipment",
        "operationId": "listEquipment",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all equipment objects, and pagination information",
            "schema": {
              "$ref": "#/definitions/EquipmentListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/equipment/locations": {
      "get": {
        "description": "Returns last known locations for all equipment. This can be optionally filtered by tags or specific equipment IDs.",
        "tags": [
          "Equipment"
        ],
        "summary": "Get most recent locations for all equipment",
        "operationId": "getEquipmentLocations",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of equipment IDs. Example: `equipmentIds=1234,5678`",
            "name": "equipmentIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The most recent equipment locations and pagination information",
            "schema": {
              "$ref": "#/definitions/EquipmentLocationsResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/equipment/locations/feed": {
      "get": {
        "description": "Follow a continuous feed of all equipment locations from Samsara AG24s.\n\nYour first call to this endpoint will provide you with the most recent location for each unit of equipment and a `pagination` object that contains an `endCursor`.\n\nYou can provide the `endCursor` to subsequent calls via the `after` parameter. The response will contain any equipment location updates since that `endCursor`.\n\nIf `hasNextPage` is `false`, no updates are readily available yet. We'd suggest waiting a minimum of 5 seconds before requesting updates.",
        "tags": [
          "Equipment"
        ],
        "summary": "Follow feed of equipment locations",
        "operationId": "getEquipmentLocationsFeed",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of equipment IDs. Example: `equipmentIds=1234,5678`",
            "name": "equipmentIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The feed of equipment locations and pagination information",
            "schema": {
              "$ref": "#/definitions/EquipmentLocationsListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/equipment/locations/history": {
      "get": {
        "description": "Returns historical equipment locations during the given time range. This can be optionally filtered by tags or specific equipment IDs.",
        "tags": [
          "Equipment"
        ],
        "summary": "Get historical equipment locations",
        "operationId": "getEquipmentLocationsHistory",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "endTime",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of equipment IDs. Example: `equipmentIds=1234,5678`",
            "name": "equipmentIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Historical equipment locations and pagination information",
            "schema": {
              "$ref": "#/definitions/EquipmentLocationsListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/equipment/stats": {
      "get": {
        "description": "Returns the last known stats for all equipment. This can be optionally filtered by tags or specific equipment IDs.",
        "tags": [
          "Equipment"
        ],
        "summary": "Get most recent stats for all equipment",
        "operationId": "getEquipmentStats",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of equipment IDs. Example: `equipmentIds=1234,5678`",
            "name": "equipmentIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "gatewayEngineStates",
                "obdEngineStates",
                "fuelPercents",
                "engineRpm",
                "gatewayEngineSeconds",
                "obdEngineSeconds",
                "gpsOdometerMeters"
              ],
              "type": "string",
              "format": "string"
            },
            "collectionFormat": "csv",
            "description": "The type of equipment stat you want to query. Currently, you may only submit one type.\n\n- `engineRpm`: The revolutions per minute of the engine.\n- `fuelPercents`: The percent of fuel in the unit of equipment.\n- `obdEngineSeconds`: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics.\n- `gatewayEngineSeconds`: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power and an offset provided manually through the Samsara cloud dashboard.\n- `obdEngineStates`: The state of the engine read from on-board diagnostics. Can be `Off`, `On`, or `Idle`.\n- `gatewayEngineStates`: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be `Off` or `On`.\n- `gpsOdometerMeters`: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.",
            "name": "types",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The most recent equipment stats and pagination information",
            "schema": {
              "$ref": "#/definitions/EquipmentStatsResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/equipment/stats/feed": {
      "get": {
        "description": "Follow a continuous feed of all equipment stats from Samsara AG24s.\n\nYour first call to this endpoint will provide you with the most recent stats for each unit of equipment and a `pagination` object that contains an `endCursor`.\n\nYou can provide the `endCursor` to subsequent calls via the `after` parameter. The response will contain any equipment stats updates since that `endCursor`.\n\nIf `hasNextPage` is `false`, no updates are readily available yet. Each stat type has a different refresh rate, but in general we'd suggest waiting a minimum of 5 seconds before requesting updates.",
        "tags": [
          "Equipment"
        ],
        "summary": "Follow a feed of equipment stats",
        "operationId": "getEquipmentStatsFeed",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of equipment IDs. Example: `equipmentIds=1234,5678`",
            "name": "equipmentIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "gatewayEngineStates",
                "obdEngineStates",
                "fuelPercents",
                "engineRpm",
                "gatewayEngineSeconds",
                "obdEngineSeconds",
                "gpsOdometerMeters"
              ],
              "type": "string",
              "format": "string"
            },
            "collectionFormat": "csv",
            "description": "The type of equipment stat you want to query. Currently, you may only submit one type.\n\n- `engineRpm`: The revolutions per minute of the engine.\n- `fuelPercents`: The percent of fuel in the unit of equipment.\n- `obdEngineSeconds`: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics.\n- `gatewayEngineSeconds`: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power and an offset provided manually through the Samsara cloud dashboard.\n- `obdEngineStates`: The state of the engine read from on-board diagnostics. Can be `Off`, `On`, or `Idle`.\n- `gatewayEngineStates`: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be `Off` or `On`.\n- `gpsOdometerMeters`: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.",
            "name": "types",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The feed of equipment stats and pagination information",
            "schema": {
              "$ref": "#/definitions/EquipmentStatsListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/equipment/stats/history": {
      "get": {
        "description": "Returns historical equipment status during the given time range. This can be optionally filtered by tags or specific equipment IDs.",
        "tags": [
          "Equipment"
        ],
        "summary": "Get historical equipment stats",
        "operationId": "getEquipmentStatsHistory",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "endTime",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of equipment IDs. Example: `equipmentIds=1234,5678`",
            "name": "equipmentIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "enum": [
                "gatewayEngineStates",
                "obdEngineStates",
                "fuelPercents",
                "engineRpm",
                "gatewayEngineSeconds",
                "obdEngineSeconds",
                "gpsOdometerMeters"
              ],
              "type": "string",
              "format": "string"
            },
            "collectionFormat": "csv",
            "description": "The type of equipment stat you want to query. Currently, you may only submit one type.\n\n- `engineRpm`: The revolutions per minute of the engine.\n- `fuelPercents`: The percent of fuel in the unit of equipment.\n- `obdEngineSeconds`: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics.\n- `gatewayEngineSeconds`: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power and an offset provided manually through the Samsara cloud dashboard.\n- `obdEngineStates`: The state of the engine read from on-board diagnostics. Can be `Off`, `On`, or `Idle`.\n- `gatewayEngineStates`: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be `Off` or `On`.\n- `gpsOdometerMeters`: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.",
            "name": "types",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Historical equipment stats and pagination information",
            "schema": {
              "$ref": "#/definitions/EquipmentStatsListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/equipment/{id}": {
      "get": {
        "description": "Retrieves the unit of equipment with the given Samsara ID.",
        "tags": [
          "Equipment"
        ],
        "summary": "Retrieve a unit of equipment",
        "operationId": "getEquipment",
        "responses": {
          "200": {
            "description": "The specified equipment object",
            "schema": {
              "$ref": "#/definitions/EquipmentResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Samsara ID of the Equipment.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/fleet/harsh-events/history": {
      "get": {
        "description": "Fetch harsh events for the organization in a given time period.",
        "tags": [
          "Safety"
        ],
        "summary": "List all harsh events.",
        "operationId": "getHarshEventsHistory",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "endTime",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of vehicle IDs. Example: `vehicleIds=1234,5678`",
            "name": "vehicleIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of harsh events from given time period.",
            "schema": {
              "$ref": "#/definitions/HarshEventsListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/routes": {
      "post": {
        "description": "Create a route. There is currently no support for creating a recurring route or optimizing a route.",
        "tags": [
          "Routes"
        ],
        "summary": "Create a route.",
        "operationId": "createRoute",
        "parameters": [
          {
            "description": "Add a route.",
            "name": "route",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRouteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created route",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/Route"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/routes/{id}": {
      "get": {
        "description": "Retrieve a route",
        "tags": [
          "Routes"
        ],
        "summary": "Get information about a single route",
        "operationId": "getRoute",
        "responses": {
          "200": {
            "description": "Returns the specified route.",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/Route"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a route. Deletes a single instance of a route. Does not delete a recurring route. Does not delete associated documents or trips.",
        "tags": [
          "Routes"
        ],
        "summary": "Delete a single route",
        "operationId": "deleteRouteById",
        "responses": {
          "204": {
            "description": "Returns an empty success response."
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique identifier for the route.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/fleet/unassigned-driving-segments": {
      "get": {
        "description": "Get the unassigned driving segments for a specified range.",
        "tags": [
          "Unassigned Driving Segments"
        ],
        "summary": "List all unassigned driving segments",
        "operationId": "getUnassignedDrivingSegments",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "collectionFormat": "csv",
            "description": "ID(s) of a specific unassigned driving segment(s). Takes precedent over filter time range params. Supports multiple comma-separated IDs using csv format (ex. ?id=1,2,3).",
            "name": "id",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Beginning of the filter time range, specified in RFC 3339 format. (Example: 2019-06-13T18:08:25Z) Filters based on the server timestamp, i.e. createAtTime.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "End of the filter time range, specified in RFC 3339 format. (Example: 2019-06-13T19:08:25Z) Filters based on the server timestamp, i.e. createAtTime.",
            "name": "endTime",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Unassigned driving segments for provided time range.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/UnassignedDrivingSegmentListResponse"
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/unassigned-driving-segments/{id}": {
      "patch": {
        "description": "Assign an unassigned driving segment to a driver.",
        "tags": [
          "Unassigned Driving Segments"
        ],
        "summary": "Assign an unassigned driving segment",
        "operationId": "patchUnassignedDrivingSegments",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "ID of a specific unassigned driving segment.",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Driver ID to assign this driving segment to, and/or an annotation reason.",
            "name": "updateUnassignedDrivingSegment",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "annotation",
                "driverId"
              ],
              "properties": {
                "annotation": {
                  "$ref": "#/definitions/annotation"
                },
                "driverId": {
                  "$ref": "#/definitions/driverId"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated unassigned driving segment.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/UnassignedDrivingSegmentResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles": {
      "get": {
        "description": "Returns a list of all vehicles.",
        "tags": [
          "Vehicles"
        ],
        "summary": "List all vehicles",
        "operationId": "listVehicles",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all vehicle objects, and pagination parameters.",
            "schema": {
              "$ref": "#/definitions/ListVehiclesResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/locations": {
      "get": {
        "description": "Returns last known locations for the given time for all vehicles (connected via Samsara Vehicle Gateways). If no time is specified the current time is used. This can be optionally filtered by tags or specific vehicle IDs. See [here](https://developers.samsara.com/docs/vehicle-locations) for more details.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Get most recent vehicle locations",
        "operationId": "getVehicleLocations",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A filter on the data that returns the last known data points with timestamps less than or equal to this value. Defaults to now if not provided. Must be a string in RFC 3339 format. Millisecond precision and timezones are supported. (Example: `2020-01-27T07:06:25Z`).",
            "name": "time",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of vehicle IDs. Example: `vehicleIds=1234,5678`",
            "name": "vehicleIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of the most recent locations for the specified vehicles.",
            "schema": {
              "$ref": "#/definitions/VehicleLocationsResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/locations/feed": {
      "get": {
        "description": "Follow a continuous feed of all vehicle locations from Samsara Vehicle Gateways.\n\nYour first call to this endpoint will provide you with the most recent location for each vehicle and a `pagination` object that contains an `endCursor`.\n\nYou can provide the `endCursor` to the `after` parameter of this endpoint to get location updates since that `endCursor`. \n\nIf `hasNextPage` is `false`, no updates are readily available yet. We'd suggest waiting a minimum of 5 seconds before requesting updates.\n\nSee [this guide](https://developers.samsara.com/docs/vehicle-locations#section-follow-a-real-time-feed-of-vehicle-locations) for more details.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Follow a feed of vehicle locations",
        "operationId": "getVehicleLocationsFeed",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of vehicle IDs. Example: `vehicleIds=1234,5678`",
            "name": "vehicleIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of locations events for the specified vehicles.",
            "schema": {
              "$ref": "#/definitions/VehicleLocationsListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/locations/history": {
      "get": {
        "description": "Returns all known vehicle locations during the given time range for all vehicles (connected via Samsara Vehicle Gateways). This can be optionally filtered by tags or specific vehicle IDs. See [here](https://developers.samsara.com/docs/vehicle-locations) for more details.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Get historical vehicle locations",
        "operationId": "getVehicleLocationsHistory",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "endTime",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of vehicle IDs. Example: `vehicleIds=1234,5678`",
            "name": "vehicleIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all locations for the specified vehicles and time range.",
            "schema": {
              "$ref": "#/definitions/VehicleLocationsListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/safety-scores": {
      "get": {
        "description": "Fetch safety scores for all vehicles in the organization in a given time period.",
        "tags": [
          "Safety"
        ],
        "summary": "List all safety scores by vehicle",
        "operationId": "getOrgVehicleSafetyScores",
        "parameters": [
          {
            "type": "string",
            "format": "string",
            "description": "Beginning of the time range, specified in RFC 3339 time.",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "string",
            "description": "End of the time range, specified in RFC 3339 time.",
            "name": "endTime",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Safety scores for all vehicles in the organization",
            "schema": {
              "$ref": "#/definitions/OrgSafetyScoresResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/stats": {
      "get": {
        "description": "Returns last known stats for the given time for all vehicles (connected via Samsara Vehicle Gateways). If no time is specified the current time is used. This can be optionally filtered by tags or specific vehicle IDs. See [here](https://developers.samsara.com/docs/vehicle-stats) for more details.",
        "tags": [
          "Vehicles"
        ],
        "summary": "List most recent vehicle stats",
        "operationId": "getVehicleStats",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A filter on the data that returns the last known data points with timestamps less than or equal to this value. Defaults to now if not provided. Must be a string in RFC 3339 format. Millisecond precision and timezones are supported. (Example: `2020-01-27T07:06:25Z`).",
            "name": "time",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of vehicle IDs. Example: `vehicleIds=1234,5678`",
            "name": "vehicleIds",
            "in": "query"
          },
          {
            "enum": [
              "engineStates",
              "fuelPercents",
              "obdOdometerMeters",
              "gpsOdometerMeters",
              "obdEngineSeconds",
              "gpsDistanceMeters",
              "auxInput1",
              "auxInput2"
            ],
            "type": "string",
            "description": "The stat type you want this endpoint to return information on. Currently only one stat type is accepted per request.\n\n- `engineStates`: The state of the engine (`Off`, `On`, `Idle`).\n- `fuelPercents`: The engine fuel level in percentage points (e.g. `99`, `50`, etc).\n- `obdOdometerMeters`: The odometer reading according to on-board diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. In these cases, we recommend using `gpsOdometerMeters`.\n- `gpsOdometerMeters`: The odometer reading according to GPS calculations. This calculation is based off GPS distance traveled and a manual odometer offset for a given vehicle, specified by the user in Samsara's dashboard UI or through the `odometerMeters` field in the [PATCH /fleet/vehicles/{id}](#operation/updateVehicleById) endpoint. `gpsOdometerMeters` is equal to the manual offset plus the GPS distance traveled since the offset was set. The value for this stat type will be omitted if a manual offset is not provided for a given vehicle. *A manual offset can only be provided when we do not have diagnostic coverage for a particular vehicle.*\n- `obdEngineSeconds`: The cumulative number of seconds the engine has run according to on-board diagnostics.\n- `gpsDistanceMeters`: The distance the vehicle has traveled since the gateway was installed based on GPS calculations.\n- `auxInput1`: Stat events from the [auxiliary input 1](https://kb.samsara.com/hc/en-us/articles/232232368-Auxiliary-Inputs) for the vehicle. For more details see the `data.auxInputType1` field in the response body for [Retrieving a Vehicle](#operation/getVehicle).\n- `auxInput2`: Stat events from the [auxiliary input 2](https://kb.samsara.com/hc/en-us/articles/232232368-Auxiliary-Inputs) for the vehicle. For more details see the `data.auxInputType2` field in the response body for [Retrieving a Vehicle](#operation/getVehicle).",
            "name": "types",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of the most recent stats for the specified vehicles and stat types.",
            "schema": {
              "$ref": "#/definitions/VehicleStatsResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/stats/feed": {
      "get": {
        "description": "Follow a continuous feed of vehicle stats from Samsara Vehicle Gateways.\n\nYour first call to this endpoint will provide you with the most recent stats for each vehicle and a `pagination` object that contains an `endCursor`.\n\nYou can provide the `endCursor` to the `after` parameter of this endpoint to get vehicle stat updates since that `endCursor`.\n\nIf `hasNextPage` is `false`, no updates are readily available yet. Each stat type has a different refresh rate, but in general we'd suggest waiting a minimum of 5 seconds before requesting updates. See [this guide](https://developers.samsara.com/docs/vehicle-stats#section-follow-a-real-time-feed-of-vehicle-stats) for more details.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Follow a feed of vehicle stats",
        "operationId": "getVehicleStatsFeed",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of vehicle IDs. Example: `vehicleIds=1234,5678`",
            "name": "vehicleIds",
            "in": "query"
          },
          {
            "enum": [
              "engineStates",
              "fuelPercents",
              "obdOdometerMeters",
              "gpsOdometerMeters",
              "obdEngineSeconds",
              "gpsDistanceMeters",
              "auxInput1",
              "auxInput2"
            ],
            "type": "string",
            "description": "The stat type you want this endpoint to return information on. Currently only one stat type is accepted per request.\n\n- `engineStates`: The state of the engine (`Off`, `On`, `Idle`).\n- `fuelPercents`: The engine fuel level in percentage points (e.g. `99`, `50`, etc).\n- `obdOdometerMeters`: The odometer reading according to on-board diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. In these cases, we recommend using `gpsOdometerMeters`.\n- `gpsOdometerMeters`: The odometer reading according to GPS calculations. This calculation is based off GPS distance traveled and a manual odometer offset for a given vehicle, specified by the user in Samsara's dashboard UI or through the `odometerMeters` field in the [PATCH /fleet/vehicles/{id}](#operation/updateVehicleById) endpoint. `gpsOdometerMeters` is equal to the manual offset plus the GPS distance traveled since the offset was set. The value for this stat type will be omitted if a manual offset is not provided for a given vehicle. *A manual offset can only be provided when we do not have diagnostic coverage for a particular vehicle.*\n- `obdEngineSeconds`: The cumulative number of seconds the engine has run according to on-board diagnostics.\n- `gpsDistanceMeters`: The distance the vehicle has traveled since the gateway was installed based on GPS calculations.\n- `auxInput1`: Stat events from the [auxiliary input 1](https://kb.samsara.com/hc/en-us/articles/232232368-Auxiliary-Inputs) for the vehicle. For more details see the `data.auxInputType1` field in the response body for [Retrieving a Vehicle](#operation/getVehicle).\n- `auxInput2`: Stat events from the [auxiliary input 2](https://kb.samsara.com/hc/en-us/articles/232232368-Auxiliary-Inputs) for the vehicle. For more details see the `data.auxInputType2` field in the response body for [Retrieving a Vehicle](#operation/getVehicle).",
            "name": "types",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of stat events for the specified vehicles and stat types.",
            "schema": {
              "$ref": "#/definitions/VehicleStatsListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/stats/history": {
      "get": {
        "description": "Returns vehicle stats events during the given time range for all vehicles (connected via Samsara Vehicle Gateways). This can be optionally filtered by tags or specific vehicle IDs. See [here](https://developers.samsara.com/docs/vehicle-stats) for more details.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Get historical vehicle stats",
        "operationId": "getVehicleStatsHistory",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "endTime",
            "in": "query",
            "required": true
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of vehicle IDs. Example: `vehicleIds=1234,5678`",
            "name": "vehicleIds",
            "in": "query"
          },
          {
            "enum": [
              "engineStates",
              "fuelPercents",
              "obdOdometerMeters",
              "gpsOdometerMeters",
              "obdEngineSeconds",
              "gpsDistanceMeters",
              "auxInput1",
              "auxInput2"
            ],
            "type": "string",
            "description": "The stat type you want this endpoint to return information on. Currently only one stat type is accepted per request.\n\n- `engineStates`: The state of the engine (`Off`, `On`, `Idle`).\n- `fuelPercents`: The engine fuel level in percentage points (e.g. `99`, `50`, etc).\n- `obdOdometerMeters`: The odometer reading according to on-board diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. In these cases, we recommend using `gpsOdometerMeters`.\n- `gpsOdometerMeters`: The odometer reading according to GPS calculations. This calculation is based off GPS distance traveled and a manual odometer offset for a given vehicle, specified by the user in Samsara's dashboard UI or through the `odometerMeters` field in the [PATCH /fleet/vehicles/{id}](#operation/updateVehicleById) endpoint. `gpsOdometerMeters` is equal to the manual offset plus the GPS distance traveled since the offset was set. The value for this stat type will be omitted if a manual offset is not provided for a given vehicle. *A manual offset can only be provided when we do not have diagnostic coverage for a particular vehicle.*\n- `obdEngineSeconds`: The cumulative number of seconds the engine has run according to on-board diagnostics.\n- `gpsDistanceMeters`: The distance the vehicle has traveled since the gateway was installed based on GPS calculations.\n- `auxInput1`: Stat events from the [auxiliary input 1](https://kb.samsara.com/hc/en-us/articles/232232368-Auxiliary-Inputs) for the vehicle. For more details see the `data.auxInputType1` field in the response body for [Retrieving a Vehicle](#operation/getVehicle).\n- `auxInput2`: Stat events from the [auxiliary input 2](https://kb.samsara.com/hc/en-us/articles/232232368-Auxiliary-Inputs) for the vehicle. For more details see the `data.auxInputType2` field in the response body for [Retrieving a Vehicle](#operation/getVehicle).",
            "name": "types",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of vehicle stats for the specified vehicles, stat type, and time range.",
            "schema": {
              "$ref": "#/definitions/VehicleStatsListResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/fleet/vehicles/{id}": {
      "get": {
        "description": "Get information about a specific vehicle.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Retrieve a vehicle",
        "operationId": "getVehicle",
        "responses": {
          "200": {
            "description": "Returns the specified vehicle object.",
            "schema": {
              "$ref": "#/definitions/VehicleResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Updates the given Vehicle object.\n\n**Note:** Vehicle objects are automatically created when Samsara Vehicle Gateways are installed. You cannot create a Vehicle object via API.\n\nYou are able to *update* many of the fields of a Vehicle.\n\n**Note**: There are no required fields in the request body, and you only need to provide the fields you wish to update.",
        "tags": [
          "Vehicles"
        ],
        "summary": "Update a vehicle",
        "operationId": "updateVehicle",
        "parameters": [
          {
            "description": "Fields that can be patched on a vehicle.",
            "name": "vehicle",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateVehicleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the specified vehicle object.",
            "schema": {
              "$ref": "#/definitions/VehicleResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "ID of the vehicle. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource, or automatically populated by fields on the vehicle. To specify an external ID as part of a path parameter, use the following format: `key:value`. For example, `maintenanceId:250020`. Automatically populated external IDs are prefixed with `samsara.`. For example, `samsara.vin:1HGBH41JXMN109186`.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/industrial/data-inputs": {
      "get": {
        "description": "Returns all data inputs, optionally filtered by tags.",
        "tags": [
          "Industrial"
        ],
        "summary": "List all data inputs",
        "operationId": "getDataInputs",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of data inputs with names, ids, and other metadata.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "description": "An array of data input objects. Each object contains the data input's name, ID, and other metadata.",
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/ListDataInputsResponse"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/paginationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/industrial/data-inputs/data-points": {
      "get": {
        "description": "Returns last known data points for all data inputs. This can be filtered by optional tags or specific data input IDs.",
        "tags": [
          "Industrial"
        ],
        "summary": "List most recent data input data points",
        "operationId": "getDataInputDataSnapshot",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of data input IDs. Example: `dataInputIds=1234,5678`",
            "name": "dataInputIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of last known data input data points and pagination parameters",
            "schema": {
              "$ref": "#/definitions/DataInputSnapshotResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/industrial/data-inputs/data-points/feed": {
      "get": {
        "description": "Follow a continuous feed of all data input data points.\n\nYour first call to this endpoint will provide you with the most recent data points for each data input and a `pagination` object that contains an `endCursor`.\n\nYou can provide the `endCursor` to the `after` parameter of this endpoint to get data point updates since that `endCursor`.\n\nIf `hasNextPage` is `false`, no updates are readily available yet. We suggest waiting a minimum of 5 seconds before requesting updates.",
        "tags": [
          "Industrial"
        ],
        "summary": "Follow a real-time feed of data input data points",
        "operationId": "getDataInputDataFeed",
        "parameters": [
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of data input IDs. Example: `dataInputIds=1234,5678`",
            "name": "dataInputIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all data points for specified data inputs",
            "schema": {
              "$ref": "#/definitions/DataInputListResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/industrial/data-inputs/data-points/history": {
      "get": {
        "description": "Returns all known data points during the given time range for all data inputs. This can be filtered by optional tags or specific data input IDs.",
        "tags": [
          "Industrial"
        ],
        "summary": "List historical data input data points",
        "operationId": "getDataInputDataHistory",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "startTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).",
            "name": "endTime",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: `parentTagIds=345,678`",
            "name": "parentTagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A filter on the data based on this comma-separated list of tag IDs. Example: `tagIds=1234,5678`",
            "name": "tagIds",
            "in": "query"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "description": "A comma-separated list of data input IDs. Example: `dataInputIds=1234,5678`",
            "name": "dataInputIds",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all data points for the specified data inputs and time range.",
            "schema": {
              "$ref": "#/definitions/DataInputListResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/me": {
      "get": {
        "description": "Get information about your organization",
        "tags": [
          "Organization"
        ],
        "summary": "Get information about your organization",
        "operationId": "getOrganizationInfo",
        "responses": {
          "200": {
            "description": "Returns information about your organization.",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/OrganizationInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/messages": {
      "post": {
        "description": "Send a message to a list of driver ids.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Messages"
        ],
        "summary": "Create a message",
        "operationId": "createMessagesKondo",
        "parameters": [
          {
            "description": "Text to send to a list of driverIds.",
            "name": "createMessages",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "driverIds",
                "text"
              ],
              "properties": {
                "driverIds": {
                  "description": "IDs of the drivers for whom the messages are sent to.",
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "int64",
                    "example": 555
                  },
                  "example": [
                    111,
                    222,
                    333
                  ]
                },
                "text": {
                  "description": "The text sent in the message.",
                  "type": "string",
                  "maxLength": 65533,
                  "minLength": 1,
                  "example": "This is a message."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created messages.",
            "schema": {
              "description": "A list of created messages.",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/Messages"
                }
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "description": "Return all of the tags for an organization.",
        "tags": [
          "Tags"
        ],
        "summary": "List all tags",
        "operationId": "listTags",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of tags.",
            "schema": {
              "$ref": "#/definitions/ListTagsResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a new tag for the organization.",
        "tags": [
          "Tags"
        ],
        "summary": "Create a tag",
        "operationId": "createTag",
        "parameters": [
          {
            "name": "Tag create body.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTagRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created tag object, including the new tag ID.",
            "schema": {
              "$ref": "#/definitions/TagResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/tags/{id}": {
      "get": {
        "description": "Fetch a tag by id.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Tags"
        ],
        "summary": "Retrieve a tag",
        "operationId": "getTag",
        "responses": {
          "200": {
            "description": "The tag corresponding to request id.",
            "schema": {
              "$ref": "#/definitions/TagResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update a tag with a new name and new members. This API call would replace all old members of a tag with new members specified in the request body.",
        "tags": [
          "Tags"
        ],
        "summary": "Update a tag",
        "operationId": "replaceTag",
        "parameters": [
          {
            "name": "Tag update body.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReplaceTagRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated tag data.",
            "schema": {
              "$ref": "#/definitions/TagResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Permanently deletes a tag.",
        "tags": [
          "Tags"
        ],
        "summary": "Delete a tag",
        "operationId": "deleteTag",
        "responses": {
          "204": {
            "description": "Successfully deleted the tag. No response body is returned."
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique identifier for the tag.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/user-roles": {
      "get": {
        "description": "Returns a list of all user roles in an organization.",
        "tags": [
          "Users"
        ],
        "summary": "List all user roles",
        "operationId": "listUserRoles",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List all user roles.",
            "schema": {
              "$ref": "#/definitions/ListUserTagRolesResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Returns a list of all users in an organization.",
        "tags": [
          "Users"
        ],
        "summary": "List all users",
        "operationId": "listUsers",
        "parameters": [
          {
            "maximum": 512,
            "minimum": 1,
            "type": "integer",
            "format": "int64",
            "default": 512,
            "description": "The limit for how many objects will be in the response. Default and max for this value is 512 objects.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.",
            "name": "after",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List all users.",
            "schema": {
              "$ref": "#/definitions/ListUsersResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Add a user to the organization.",
        "tags": [
          "Users"
        ],
        "summary": "Create a user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "The user to create.",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created user object with ID.",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Get a specific user's information.",
        "tags": [
          "Users"
        ],
        "summary": "Retrieve a user",
        "operationId": "getUser",
        "responses": {
          "200": {
            "description": "Returns the specified user.",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete the given user.",
        "tags": [
          "Users"
        ],
        "summary": "Delete a user",
        "operationId": "deleteUser",
        "responses": {
          "204": {
            "description": "Returns an empty success response."
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update a specific user's information.",
        "tags": [
          "Users"
        ],
        "summary": "Update a user",
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "Updates to the user.",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user object with ID.",
            "schema": {
              "$ref": "#/definitions/UserResponse"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique identifier for the user.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/fleet/assets": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch all of the assets.",
        "tags": [
          "Assets"
        ],
        "summary": "List all assets",
        "operationId": "V1getAllAssets",
        "responses": {
          "200": {
            "description": "List of assets.",
            "schema": {
              "type": "object",
              "properties": {
                "assets": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/V1Asset"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/assets/locations": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch current locations of all assets.",
        "tags": [
          "Assets"
        ],
        "summary": "List current location for all assets",
        "operationId": "V1getAllAssetCurrentLocations",
        "parameters": [
          {
            "type": "string",
            "description": "Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.",
            "name": "startingAfter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.",
            "name": "endingBefore",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "description": "Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of assets and their current locations.",
            "schema": {
              "type": "object",
              "properties": {
                "assets": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/V1AssetCurrentLocationsResponse"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/V1Pagination"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/assets/reefers": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetches all reefers and reefer-specific stats.",
        "tags": [
          "Assets"
        ],
        "summary": "List stats for all reefers",
        "operationId": "V1getAssetsReefers",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.",
            "name": "startMs",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.",
            "name": "endMs",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.",
            "name": "startingAfter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.",
            "name": "endingBefore",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "description": "Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "All org reefers and reefer-specific details.",
            "schema": {
              "type": "object",
              "properties": {
                "data": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/V1AssetsReefer"
                  }
                },
                "pagination": {
                  "$ref": "#/definitions/V1Pagination"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/assets/{asset_id}/locations": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nList historical locations for a given asset",
        "tags": [
          "Assets"
        ],
        "summary": "List historical locations for a given asset",
        "operationId": "V1getAssetLocation",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the asset. Must contain only digits 0-9.",
            "name": "asset_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.",
            "name": "startMs",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.",
            "name": "endMs",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Asset location details.",
            "schema": {
              "$ref": "#/definitions/V1AssetLocationResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/assets/{asset_id}/reefer": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch the reefer-specific stats of an asset.",
        "tags": [
          "Assets"
        ],
        "summary": "List stats for a given reefer",
        "operationId": "V1getAssetReefer",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the asset. Must contain only digits 0-9.",
            "name": "asset_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.",
            "name": "startMs",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.",
            "name": "endMs",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Reefer-specific asset details.",
            "schema": {
              "$ref": "#/definitions/V1AssetReeferResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/dispatch/routes": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch all dispatch routes for a given time period. The time period is defined as `end_time` and the `duration` before which to query.\n\nRoutes are returned if the route's `scheduled_start_ms` and `scheduled_end_ms` overlap with the requested time period.\n\nMore concretely, if the route's `scheduled_start_ms` is before `end_time` and the `scheduled_end_ms` is within or after the given duration, then the route is returned.",
        "tags": [
          "Routes"
        ],
        "summary": "Get all routes",
        "operationId": "V1fetchAllDispatchRoutes",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Time in unix milliseconds that represents the end time of the requested time interval. See above for a description of how routes are returned. Defaults to now.",
            "name": "end_time",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.",
            "name": "duration",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "All dispatch route objects.",
            "schema": {
              "$ref": "#/definitions/V1DispatchRoutes"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nCreate a new dispatch route.",
        "tags": [
          "Routes"
        ],
        "summary": "Create a new route",
        "operationId": "V1createDispatchRoute",
        "parameters": [
          {
            "name": "createDispatchRouteParams",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1DispatchRouteCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Created route object including the new route ID.",
            "schema": {
              "$ref": "#/definitions/V1DispatchRoute"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/dispatch/routes/job_updates": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch all updates to a job including route data in the last 24 hours or subsequent to an sequence ID. Returns a maximum of 500 job updates. If more than 500 job updates are available, another request made with the prior request's sequence_id will return the next set of available job updates.",
        "tags": [
          "Routes"
        ],
        "summary": "Get route updates",
        "operationId": "V1fetchAllRouteJobUpdates",
        "parameters": [
          {
            "type": "string",
            "description": "Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.",
            "name": "sequence_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Optionally set include=route to include route object in response payload.",
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "All job updates on routes.",
            "schema": {
              "$ref": "#/definitions/V1allRouteJobUpdates"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/dispatch/routes/{route_id}": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch a dispatch route by id.",
        "tags": [
          "Routes"
        ],
        "summary": "Get a route",
        "operationId": "V1getDispatchRouteById",
        "responses": {
          "200": {
            "description": "The dispatch route corresponding to route_id.",
            "schema": {
              "$ref": "#/definitions/V1DispatchRoute"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nUpdate the dispatch route. Allowable updates include adding or removing jobs, and changing job locations and times.",
        "tags": [
          "Routes"
        ],
        "summary": "Update a route",
        "operationId": "V1updateDispatchRouteById",
        "parameters": [
          {
            "name": "updateDispatchRouteParams",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1DispatchRouteUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The updated route corresponding to route_id.",
            "schema": {
              "$ref": "#/definitions/V1DispatchRoute"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nDelete a dispatch route and its associated jobs.",
        "tags": [
          "Routes"
        ],
        "summary": "Delete a route",
        "operationId": "V1deleteDispatchRouteById",
        "responses": {
          "200": {
            "description": "Successfully deleted the dispatch route. No response body is returned."
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "ID of the dispatch route. Must contain only digits 0-9.",
          "name": "route_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/fleet/dispatch/routes/{route_id}/history": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch the history of a dispatch route.",
        "tags": [
          "Routes"
        ],
        "summary": "Get route history",
        "operationId": "V1getDispatchRouteHistory",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.",
            "name": "start_time",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.",
            "name": "end_time",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the route with history. Must contain only digits 0-9.",
            "name": "route_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The historical route state changes between start_time and end_time.",
            "schema": {
              "$ref": "#/definitions/V1DispatchRouteHistory"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/drivers/document_types": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch all of the document types.",
        "tags": [
          "Documents"
        ],
        "summary": "Fetch document types",
        "operationId": "V1getDriverDocumentTypesByOrgId",
        "responses": {
          "200": {
            "description": "Returns all of the document types.",
            "schema": {
              "$ref": "#/definitions/V1DocumentTypes"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/drivers/documents": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch all of the documents.",
        "tags": [
          "Documents"
        ],
        "summary": "Fetch all documents",
        "operationId": "V1getDriverDocumentsByOrgId",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.",
            "name": "endMs",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.",
            "name": "durationMs",
            "in": "query"
          },
          {
            "enum": [
              "created",
              "updated"
            ],
            "type": "string",
            "format": "string",
            "description": "Retrieve most recent documents based on either driverCreatedAtMs or serverUpdatedAtMs. If no value is provided, the default is driverCreatedAtMs.",
            "name": "queryBy",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns all of the documents.",
            "schema": {
              "$ref": "#/definitions/V1Documents"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/drivers/{driverId}/safety/score": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch the safety score for the driver.",
        "tags": [
          "Safety"
        ],
        "summary": "Fetch driver safety score",
        "operationId": "V1getDriverSafetyScore",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.",
            "name": "startMs",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.",
            "name": "endMs",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Safety score details.",
            "schema": {
              "$ref": "#/definitions/V1DriverSafetyScoreResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "ID of the driver. Must contain only digits 0-9.",
          "name": "driverId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/fleet/drivers/{driver_id}/documents": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nCreate a document for the given driver.",
        "tags": [
          "Documents"
        ],
        "summary": "Create a document",
        "operationId": "V1createDriverDocument",
        "parameters": [
          {
            "description": "To create a document for a given document type, provide the `documentTypeUuid` of the type of document you'd like to create. Then, pass in the `fields` of the document in the same order that they show up in the given document type.",
            "name": "createDocumentParams",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/V1DocumentCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created document.",
            "schema": {
              "$ref": "#/definitions/V1Document"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "ID of the driver for whom the document is created. Must contain only digits 0-9.",
          "name": "driver_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/fleet/drivers/{driver_id}/documents/{document_id}": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetches a single document submission by a specific driver.",
        "tags": [
          "Documents"
        ],
        "summary": "Fetches a document",
        "operationId": "V1getDriverDocumentByIdAndDriverId",
        "responses": {
          "200": {
            "description": "Returns the specified document.",
            "schema": {
              "$ref": "#/definitions/V1Document"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "ID of the driver who submitted the document. Must contain only digits 0-9.",
          "name": "driver_id",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "ID of document.",
          "name": "document_id",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/fleet/drivers/{driver_id}/hos_daily_logs": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet summarized daily Hours of Service charts for a specified driver.\n\nThe response will contain a list of `days`, where each entry in the list is the driver's summarized hours of service for that entire day.\n\nThe time range for a \"day\" is defined by the `driver`'s `eldDayStartHour`. By default, this is `0`, which indicates the `driver`'s \"day\" is from midnight to midnight in the `driver`'s respective `timezone`. This value is configurable per driver.\n\nThe `startMs` and `endMs` parameters indicate start and end for the date range you'd like to query. These parameters are inclusive. This means that the response will include the \"day\" that contains `startMs` and the \"day\" that contains `endMs`. For example:\n\nLet's say a `driver`'s `eldDayStartHour` is `0` and their timezone is `America/Chicago`.\n\nIf `startMs` was `1576080000000` (December 11, 2019 10:00:00 AM America/Chicago) and an `endMs` was `1576166400000` (December 12, 2019 10:00:00 AM America/Los_Angeles), then the response will contain a two `day` entries: [December 11, 2019 12:00:00 AM America/Chicago to December 12, 2019 12:00:00 AM America/Chicago], and [December 12, 2019 12:00:00 AM America/Chicago to December 13, 2019 12:00:00 AM America/Chicago].",
        "tags": [
          "Hours of Service"
        ],
        "summary": "Get daily HOS logs for a specific driver",
        "operationId": "V1getFleetDriversHosDailyLogs",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the driver with HOS logs.",
            "name": "driver_id",
            "in": "path",
            "required": true
          },
          {
            "name": "hosLogsParam",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "startMs",
                "endMs"
              ],
              "properties": {
                "endMs": {
                  "description": "End of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "format": "int64",
                  "example": 1462881998034
                },
                "startMs": {
                  "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "format": "int64",
                  "example": 1462878398034
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Distance traveled and time active for each driver in the organization over the specified time period.",
            "schema": {
              "$ref": "#/definitions/V1DriverDailyLogResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/hos_authentication_logs": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet the HOS (hours of service) signin and signout logs for the specified driver. The response includes 4 fields that are now deprecated.",
        "tags": [
          "Hours of Service"
        ],
        "summary": "Get HOS signin and signout",
        "operationId": "V1getFleetHosAuthenticationLogs",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Driver ID to query.",
            "name": "driverId",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Beginning of the time range, specified in milliseconds UNIX time.",
            "name": "startMs",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "End of the time range, specified in milliseconds UNIX time.",
            "name": "endMs",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "HOS authentication logs for the specified driver.",
            "schema": {
              "$ref": "#/definitions/V1HosAuthenticationLogsResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/hos_logs": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet the HOS (hours of service) logs for the specified driver. This method returns all the HOS statuses that the driver was in during this time period.",
        "tags": [
          "Hours of Service"
        ],
        "summary": "Get HOS logs for a specific driver",
        "operationId": "V1getFleetHosLogs",
        "parameters": [
          {
            "name": "hosLogsParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "driverId",
                "startMs",
                "endMs"
              ],
              "properties": {
                "driverId": {
                  "description": "Driver ID to query.",
                  "type": "integer",
                  "format": "int64",
                  "example": 444
                },
                "endMs": {
                  "description": "End of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462881998034
                },
                "startMs": {
                  "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462878398034
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HOS logs for the specified driver.",
            "schema": {
              "$ref": "#/definitions/V1HosLogsResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/hos_logs_summary": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet the current HOS status for all drivers. Note that this includes inactive as well as active drivers. You may need to upgrade your API token to version 2019-07-31 or later to leverage response pagination. [See here](https://kb.samsara.com/hc/en-us/articles/360026132972-Upgrading-API-Tokens)",
        "tags": [
          "Hours of Service"
        ],
        "summary": "Get current HOS status for all drivers",
        "operationId": "V1getFleetHosLogsSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter.",
            "name": "after",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "description": "Pagination parameter indicating the number of results to return in this request. Used in conjunction with 'after'.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "HOS logs for the specified driver.",
            "schema": {
              "$ref": "#/definitions/V1HosLogsSummaryResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/maintenance/dvirs": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet DVIRs for the org within provided time constraints",
        "tags": [
          "Maintenance"
        ],
        "summary": "Get DVIRs",
        "operationId": "V1getDvirs",
        "parameters": [
          {
            "type": "integer",
            "description": "Time in millis until the last dvir log.",
            "name": "end_ms",
            "in": "query",
            "required": true
          },
          {
            "maximum": 7776000000,
            "type": "number",
            "description": "Time in millis which corresponds to the duration before the end_ms. Must be less than or equal to 90 days.",
            "name": "duration_ms",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "DVIRs for the specified duration.",
            "schema": {
              "$ref": "#/definitions/V1DvirListResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nCreate a new dvir, marking a vehicle or trailer safe or unsafe.",
        "tags": [
          "Maintenance"
        ],
        "summary": "Create a DVIR",
        "operationId": "V1createDvir",
        "parameters": [
          {
            "description": "DVIR creation body",
            "name": "createDvirParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "safe",
                "inspectionType",
                "userEmail"
              ],
              "properties": {
                "inspectionType": {
                  "description": "Only type 'mechanic' is currently accepted.",
                  "type": "string",
                  "enum": [
                    "mechanic"
                  ],
                  "example": "mechanic"
                },
                "mechanicNotes": {
                  "description": "Any notes from the mechanic.",
                  "type": "string",
                  "example": "Replaced headlight on passenger side."
                },
                "odometerMiles": {
                  "description": "The current odometer of the vehicle.",
                  "type": "integer",
                  "example": 38426
                },
                "previousDefectsCorrected": {
                  "description": "Whether any previous defects were corrected. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.",
                  "type": "boolean",
                  "example": true
                },
                "previousDefectsIgnored": {
                  "description": "Whether any previous defects were ignored. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.",
                  "type": "boolean",
                  "example": false
                },
                "resolvedDefectIds": {
                  "description": "List of defect IDs to resolve.  The defects must be associated with the provided vehicle or trailer.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "example": [
                    18,
                    19
                  ]
                },
                "safe": {
                  "description": "Whether or not this vehicle or trailer is safe to drive.",
                  "type": "string",
                  "enum": [
                    "safe",
                    "unsafe"
                  ],
                  "example": "safe"
                },
                "trailerId": {
                  "description": "Id of trailer being inspected. Either vehicleId or trailerId must be provided.",
                  "type": "integer",
                  "example": 11
                },
                "userEmail": {
                  "description": "The Samsara login email for the person creating the DVIR. The email must correspond to a Samsara user's email.",
                  "type": "string",
                  "example": "j.smith@yahoo.com"
                },
                "vehicleId": {
                  "description": "Id of vehicle being inspected. Either vehicleId or trailerId must be provided.",
                  "type": "integer",
                  "example": 10
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Newly created DVIR.",
            "schema": {
              "$ref": "#/definitions/V1DvirBase"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/maintenance/list": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet list of the vehicles with any engine faults or check light data.",
        "tags": [
          "Maintenance"
        ],
        "summary": "Get vehicles with engine faults or check lights",
        "operationId": "V1getFleetMaintenanceList",
        "responses": {
          "200": {
            "description": "List of vehicles and maintenance information about each.",
            "schema": {
              "type": "object",
              "properties": {
                "vehicles": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/V1VehicleMaintenance"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/messages": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet all messages.",
        "tags": [
          "Messages"
        ],
        "summary": "Get all messages.",
        "operationId": "V1getMessages",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Time in unix milliseconds that represents the end of time range of messages to return. Used in combination with durationMs. Defaults to now.",
            "name": "endMs",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.",
            "name": "durationMs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the fetched messages from most recently sent to least recently sent.",
            "schema": {
              "description": "A list of messages.",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/V1MessagesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nSend a message to a list of driver ids.",
        "tags": [
          "Messages"
        ],
        "summary": "Send a message to a list of driver ids.",
        "operationId": "V1createMessages",
        "parameters": [
          {
            "description": "Text to send to a list of driverIds.",
            "name": "createMessages",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "driverIds",
                "text"
              ],
              "properties": {
                "driverIds": {
                  "description": "IDs of the drivers for whom the messages are sent to.",
                  "type": "array",
                  "items": {
                    "type": "number",
                    "format": "int64",
                    "example": 555
                  },
                  "example": [
                    111,
                    222,
                    333
                  ]
                },
                "text": {
                  "description": "The text sent in the message.",
                  "type": "string",
                  "example": "This is a message."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the created messages.",
            "schema": {
              "description": "A list of created messages.",
              "type": "object",
              "properties": {
                "data": {
                  "$ref": "#/definitions/V1Messages"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/trailers/assignments": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch trailer assignment data for all trailers in your organization.",
        "tags": [
          "Trailer Assignments"
        ],
        "summary": "List trailer assignments for all trailers",
        "operationId": "V1getAllTrailerAssignments",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in Unix epoch miliseconds representing the start of the period to fetch. Omitting both startMs and endMs only returns current assignments.",
            "name": "startMs",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in Unix epoch miliseconds representing the end of the period to fetch. Omitting endMs sets endMs as the current time",
            "name": "endMs",
            "in": "query"
          },
          {
            "type": "number",
            "format": "int64",
            "description": "Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.",
            "name": "startingAfter",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.",
            "name": "endingBefore",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns trailer assignment data for all trailers in your organization",
            "schema": {
              "type": "object",
              "properties": {
                "pagination": {
                  "$ref": "#/definitions/V1Pagination"
                },
                "trailers": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/V1TrailerAssignmentsResponse"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/trailers/{trailerId}/assignments": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch trailer assignment data for a single trailer.",
        "tags": [
          "Trailer Assignments"
        ],
        "summary": "List trailer assignments for a given trailer",
        "operationId": "V1getFleetTrailerAssignments",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of trailer. Must contain only digits 0-9.",
            "name": "trailerId",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in Unix epoch milliseconds representing the start of the period to fetch. Omitting both startMs and endMs only returns current assignments.",
            "name": "startMs",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in Unix epoch milliseconds representing the end of the period to fetch. Omitting endMs sets endMs as the current time",
            "name": "endMs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns trailer assignment data for a single trailer",
            "schema": {
              "$ref": "#/definitions/V1TrailerAssignmentsResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/trips": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.",
        "tags": [
          "Trips"
        ],
        "summary": "Get vehicle trips",
        "operationId": "V1getFleetTrips",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Vehicle ID to query.",
            "name": "vehicleId",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Beginning of the time range, specified in milliseconds UNIX time. Limited to a 90 day window with respect to startMs and endMs",
            "name": "startMs",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "End of the time range, specified in milliseconds UNIX time.",
            "name": "endMs",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of trips taken by the requested vehicle within the specified timeframe. Ongoing trips will be returned with 9223372036854775807 as their endMs.",
            "schema": {
              "$ref": "#/definitions/V1TripResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/fleet/vehicles/{vehicleId}/safety/harsh_event": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch harsh event details for a vehicle.",
        "tags": [
          "Safety"
        ],
        "summary": "Fetch harsh events",
        "operationId": "V1getVehicleHarshEvent",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in milliseconds representing the timestamp of a harsh event.",
            "name": "timestamp",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Harsh event details.",
            "schema": {
              "$ref": "#/definitions/V1VehicleHarshEventResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "ID of the vehicle. Must contain only digits 0-9.",
          "name": "vehicleId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/fleet/vehicles/{vehicleId}/safety/score": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch the safety score for the vehicle.",
        "tags": [
          "Safety"
        ],
        "summary": "Fetch vehicle safety scores",
        "operationId": "V1getVehicleSafetyScore",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.",
            "name": "startMs",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.",
            "name": "endMs",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Safety score details.",
            "schema": {
              "$ref": "#/definitions/V1VehicleSafetyScoreResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "integer",
          "format": "int64",
          "description": "ID of the vehicle. Must contain only digits 0-9.",
          "name": "vehicleId",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1/industrial/data": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch all of the data inputs.",
        "tags": [
          "Industrial"
        ],
        "summary": "Get industrial data",
        "operationId": "V1getAllDataInputs",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.",
            "name": "startMs",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.",
            "name": "endMs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of data inputs.",
            "schema": {
              "type": "object",
              "properties": {
                "dataInputs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/V1DataInputHistoryResponse"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/industrial/data/{data_input_id}": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch datapoints from a given data input.",
        "tags": [
          "Industrial"
        ],
        "summary": "Get industrial data from a specific device",
        "operationId": "V1getDataInput",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of the data input. Must contain only digits 0-9.",
            "name": "data_input_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.",
            "name": "startMs",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.",
            "name": "endMs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns datapoints for the given data input",
            "schema": {
              "$ref": "#/definitions/V1DataInputHistoryResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/industrial/vision/cameras": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch all cameras.",
        "tags": [
          "Industrial"
        ],
        "summary": "Fetch industrial cameras",
        "operationId": "V1getCameras",
        "responses": {
          "200": {
            "description": "Returns details about a camera.",
            "schema": {
              "$ref": "#/definitions/V1VisionCamerasResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/industrial/vision/cameras/{camera_id}/programs": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch configured programs on the camera.",
        "tags": [
          "Industrial"
        ],
        "summary": "Fetch industrial camera programs",
        "operationId": "V1getVisionProgramsByCamera",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The camera_id should be valid for the given accessToken.",
            "name": "camera_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns programs configured on the camera.",
            "schema": {
              "$ref": "#/definitions/V1ProgramsForTheCameraResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/industrial/vision/run/camera/{camera_id}": {
      "get": {
        "description": "Fetch the latest run for a camera or program by default. If startedAtMs is supplied, fetch the specific run that corresponds to that start time.",
        "tags": [
          "Industrial"
        ],
        "summary": "Fetch the latest run for a camera or program",
        "operationId": "V1getVisionLatestRunCamera",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The camera_id should be valid for the given accessToken.",
            "name": "camera_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The configured program's ID on the camera.",
            "name": "program_id",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "EndMs is an optional param. It will default to the current time.",
            "name": "startedAtMs",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Include is a filter parameter. Accepts 'pass', 'reject' or 'no_read'.",
            "name": "include",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Limit is an integer value from 1 to 1,000.",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the details for this run.",
            "schema": {
              "$ref": "#/definitions/V1VisionRunByCameraResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/industrial/vision/runs": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch runs.",
        "tags": [
          "Industrial"
        ],
        "summary": "Fetch runs",
        "operationId": "V1getVisionRuns",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "DurationMs is a required param. This works with the EndMs parameter. Indicates the duration in which the visionRuns will be fetched",
            "name": "durationMs",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "EndMs is an optional param. It will default to the current time.",
            "name": "endMs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Return runs.",
            "schema": {
              "$ref": "#/definitions/V1VisionRunsResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/industrial/vision/runs/{camera_id}": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch runs by camera.",
        "tags": [
          "Industrial"
        ],
        "summary": "Fetch runs by camera",
        "operationId": "getVisionRunsByCamera",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The camera_id should be valid for the given accessToken.",
            "name": "camera_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "DurationMs is a required param. This works with the EndMs parameter. Indicates the duration in which the visionRuns will be fetched",
            "name": "durationMs",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "EndMs is an optional param. It will default to the current time.",
            "name": "endMs",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Return runs by cameraId.",
            "schema": {
              "$ref": "#/definitions/V1VisionRunsByCameraResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/industrial/vision/runs/{camera_id}/{program_id}/{started_at_ms}": {
      "get": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nFetch runs by camera and program.",
        "tags": [
          "Industrial"
        ],
        "summary": "Fetch runs by camera and program",
        "operationId": "V1getVisionRunsByCameraAndProgram",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "The camera_id should be valid for the given accessToken.",
            "name": "camera_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The configured program's ID on the camera.",
            "name": "program_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Started_at_ms is a required param. Indicates the start time of the run to be fetched.",
            "name": "started_at_ms",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Include is a filter parameter. Accepts 'pass', 'reject' or 'no_read'.",
            "name": "include",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Return runs by camera ID and program ID.",
            "schema": {
              "$ref": "#/definitions/V1VisionRunsByCameraAndProgramResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machines/history": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet historical data for machine objects. This method returns a set of historical data for all machines",
        "tags": [
          "Industrial"
        ],
        "summary": "Get machine history",
        "operationId": "V1getMachinesHistory",
        "parameters": [
          {
            "description": "Time range to query for events",
            "name": "historyParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "startMs",
                "endMs"
              ],
              "properties": {
                "endMs": {
                  "description": "End of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462881998034
                },
                "startMs": {
                  "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462878398034
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of machine results objects, each containing a time and a datapoint.",
            "schema": {
              "$ref": "#/definitions/V1MachineHistoryResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/machines/list": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet machine objects. This method returns a list of the machine objects in the Samsara Cloud and information about them.",
        "tags": [
          "Industrial"
        ],
        "summary": "Get machines",
        "operationId": "V1getMachines",
        "responses": {
          "200": {
            "description": "List of machine objects.",
            "schema": {
              "type": "object",
              "properties": {
                "machines": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/V1Machine"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/cargo": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet cargo monitor status (empty / full) for requested sensors.",
        "tags": [
          "Sensors"
        ],
        "summary": "Get cargo status",
        "operationId": "V1getSensorsCargo",
        "parameters": [
          {
            "description": "List of sensor IDs to query.",
            "name": "V1sensorParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "sensors"
              ],
              "properties": {
                "sensors": {
                  "description": "List of sensor IDs to query.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "example": [
                    122
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of sensor objects containing the current cargo status reported by each sensor.",
            "schema": {
              "$ref": "#/definitions/V1CargoResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/door": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet door monitor status (closed / open) for requested sensors.",
        "tags": [
          "Sensors"
        ],
        "summary": "Get door status",
        "operationId": "V1getSensorsDoor",
        "parameters": [
          {
            "description": "List of sensor IDs to query.",
            "name": "V1sensorParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "sensors"
              ],
              "properties": {
                "sensors": {
                  "description": "List of sensor IDs to query.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "example": [
                    122
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of sensor objects containing the current door status reported by each sensor.",
            "schema": {
              "$ref": "#/definitions/V1DoorResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/history": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.",
        "tags": [
          "Sensors"
        ],
        "summary": "Get sensor history",
        "operationId": "V1getSensorsHistory",
        "parameters": [
          {
            "description": "Time range and resolution, and list of sensor ID, field pairs to query.",
            "name": "historyParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "startMs",
                "endMs",
                "stepMs",
                "series"
              ],
              "properties": {
                "endMs": {
                  "description": "End of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462881998034
                },
                "fillMissing": {
                  "type": "string",
                  "default": "withNull",
                  "enum": [
                    "withNull",
                    "withPrevious"
                  ]
                },
                "series": {
                  "type": "array",
                  "items": {
                    "description": "V1Sensor ID and field to query.",
                    "type": "object",
                    "required": [
                      "widgetId",
                      "field"
                    ],
                    "properties": {
                      "field": {
                        "description": "Field to query.",
                        "type": "string",
                        "enum": [
                          "ambientTemperature",
                          "cargoPercent",
                          "currentLoop1Raw",
                          "currentLoop1Mapped",
                          "currentLoop2Raw",
                          "currentLoop2Mapped",
                          "doorClosed",
                          "humidity",
                          "pmPowerTotal",
                          "pmPhase1Power",
                          "pmPhase2Power",
                          "pmPhase3Power",
                          "pmPhase1PowerFactor",
                          "pmPhase2PowerFactor",
                          "pmPhase3PowerFactor",
                          "probeTemperature"
                        ],
                        "example": "ambientTemperature"
                      },
                      "widgetId": {
                        "description": "V1Sensor ID to query.",
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                      }
                    }
                  }
                },
                "startMs": {
                  "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                  "type": "integer",
                  "example": 1462878398034
                },
                "stepMs": {
                  "description": "Time resolution for which data should be returned, in milliseconds. Specifying 3600000 will return data at hour intervals.",
                  "type": "integer",
                  "example": 3600000
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of results objects, each containing a time and a datapoint for each requested sensor/field pair.",
            "schema": {
              "$ref": "#/definitions/V1SensorHistoryResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/humidity": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet humidity for requested sensors. This method returns the current relative humidity for the requested sensors.",
        "tags": [
          "Sensors"
        ],
        "summary": "Get humidity",
        "operationId": "V1getSensorsHumidity",
        "parameters": [
          {
            "description": "List of sensor IDs to query.",
            "name": "V1sensorParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "sensors"
              ],
              "properties": {
                "sensors": {
                  "description": "List of sensor IDs to query.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "example": [
                    122
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of sensor objects containing the current humidity reported by each sensor.",
            "schema": {
              "$ref": "#/definitions/V1HumidityResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/list": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.",
        "tags": [
          "Sensors"
        ],
        "summary": "Get all sensors",
        "operationId": "V1getSensors",
        "responses": {
          "200": {
            "description": "List of sensor objects.",
            "schema": {
              "type": "object",
              "properties": {
                "sensors": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/V1Sensor"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/v1/sensors/temperature": {
      "post": {
        "description": "\u003cn class=\"warning\"\u003e\n\u003cnh\u003e\n\u003ci class=\"fa fa-exclamation-circle\"\u003e\u003c/i\u003e\nThis endpoint is still on our legacy API.\n\u003c/nh\u003e\n\u003c/n\u003e\n\nGet temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.",
        "tags": [
          "Sensors"
        ],
        "summary": "Get temperature",
        "operationId": "V1getSensorsTemperature",
        "parameters": [
          {
            "description": "List of sensor IDs to query.",
            "name": "V1sensorParam",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "sensors"
              ],
              "properties": {
                "sensors": {
                  "description": "List of sensor IDs to query.",
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int64"
                  },
                  "example": [
                    122
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of sensor objects containing the current temperature reported by each sensor.",
            "schema": {
              "$ref": "#/definitions/V1TemperatureResponse"
            }
          },
          "default": {
            "description": "Unexpected error.",
            "schema": {
              "$ref": "#/definitions/V1ErrorResponse"
            }
          }
        }
      }
    },
    "/webhooks": {
      "post": {
        "description": "Create a webhook",
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a webhook",
        "operationId": "createWebhook",
        "parameters": [
          {
            "description": "The webhook to create",
            "name": "createWebhookBody",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/WebhookCreate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The created webhook",
            "schema": {
              "properties": {
                "data": {
                  "$ref": "#/definitions/Webhook"
                }
              }
            }
          },
          "default": {
            "description": "Unexepcted error.",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      }
    },
    "/webhooks/{id}": {
      "post": {
        "description": "Fire off a test event to a webhook.",
        "tags": [
          "Webhooks"
        ],
        "summary": "Fire off a test event to a webhook.",
        "operationId": "createWebhookPing",
        "responses": {
          "204": {
            "description": "Returns an empty success response."
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/standardErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Unique identifier for the webhook.",
          "name": "id",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "Address": {
      "description": "An Address object.",
      "type": "object",
      "required": [
        "formattedAddress",
        "geofence",
        "id",
        "name"
      ],
      "properties": {
        "addressTypes": {
          "$ref": "#/definitions/AddressTypes"
        },
        "contacts": {
          "$ref": "#/definitions/AddressContacts"
        },
        "createdAtTime": {
          "$ref": "#/definitions/AddressCreatedAtTime"
        },
        "externalIds": {
          "$ref": "#/definitions/AddressExternalIds"
        },
        "formattedAddress": {
          "$ref": "#/definitions/AddressFormattedAddress"
        },
        "geofence": {
          "$ref": "#/definitions/AddressGeofence"
        },
        "id": {
          "$ref": "#/definitions/AddressId"
        },
        "latitude": {
          "$ref": "#/definitions/AddressLatitude"
        },
        "longitude": {
          "$ref": "#/definitions/AddressLongitude"
        },
        "name": {
          "$ref": "#/definitions/AddressName"
        },
        "notes": {
          "$ref": "#/definitions/AddressNotes"
        },
        "tags": {
          "$ref": "#/definitions/AddressTags"
        }
      }
    },
    "AddressContactIds": {
      "description": "An array of Contact IDs associated with this Address.",
      "type": "array",
      "items": {
        "type": "string",
        "example": "22408"
      }
    },
    "AddressContacts": {
      "description": "An array Contact mini-objects that are associated the Address.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/contactTinyResponse"
      }
    },
    "AddressCreatedAtTime": {
      "description": "The date and time this address was created in RFC 3339 format.",
      "type": "string",
      "format": "date-time",
      "example": "2019-05-18T20:27:35Z"
    },
    "AddressExternalIds": {
      "$ref": "#/definitions/externalIds"
    },
    "AddressFormattedAddress": {
      "description": "The full street address for this address/geofence, as it might be recognized by Google Maps.",
      "type": "string",
      "maxLength": 1024,
      "example": "350 Rhode Island St, San Francisco, CA"
    },
    "AddressGeofence": {
      "description": "The geofence that defines this address and its bounds. This can either be a circle or a polygon, but not both.",
      "type": "object",
      "properties": {
        "circle": {
          "description": "Information about a circular geofence. This field is only needed if the geofence is a circle.",
          "type": "object",
          "required": [
            "radiusMeters"
          ],
          "properties": {
            "latitude": {
              "$ref": "#/definitions/AddressLatitude"
            },
            "longitude": {
              "$ref": "#/definitions/AddressLongitude"
            },
            "radiusMeters": {
              "description": "The radius of the circular geofence in meters.",
              "type": "integer",
              "format": "int64",
              "example": 25
            }
          }
        },
        "polygon": {
          "description": "Information about a polygon geofence. This field is only needed if the geofence is a polygon.",
          "type": "object",
          "required": [
            "vertices"
          ],
          "properties": {
            "vertices": {
              "description": "The vertices of the polygon geofence. These geofence vertices describe the perimeter of the polygon, and must consist of at least 3 vertices and less than 40.",
              "type": "array",
              "maxItems": 40,
              "minItems": 3,
              "items": {
                "type": "object",
                "required": [
                  "latitude",
                  "longitude"
                ],
                "properties": {
                  "latitude": {
                    "description": "The latitude of a geofence vertex in decimal degrees.",
                    "type": "number",
                    "format": "double"
                  },
                  "longitude": {
                    "description": "The longitude of a geofence vertex in decimal degrees.",
                    "type": "number",
                    "format": "double"
                  }
                }
              },
              "example": [
                {
                  "latitude": 37.765363,
                  "longitude": -122.403098
                },
                {
                  "latitude": 38.765363,
                  "longitude": -122.403098
                },
                {
                  "latitude": 37.765363,
                  "longitude": -123.403098
                }
              ]
            }
          }
        }
      }
    },
    "AddressId": {
      "description": "ID of the Address.",
      "type": "string",
      "example": "22408"
    },
    "AddressLatitude": {
      "description": "Latitude of the address. Will be geocoded from `formattedAddress` if not provided.",
      "type": "number",
      "format": "double",
      "example": 37.765363
    },
    "AddressLongitude": {
      "description": "Longitude of the address. Will be geocoded from `formattedAddress` if not provided.",
      "type": "number",
      "format": "double",
      "example": -122.4029238
    },
    "AddressName": {
      "description": "Name of the address.",
      "type": "string",
      "maxLength": 255,
      "example": "Samsara HQ"
    },
    "AddressNotes": {
      "description": "Notes about the address.",
      "type": "string",
      "maxLength": 280,
      "example": "Hours of operation: 8am - 6pm; Truck entrance on the Rhode Island street side."
    },
    "AddressResponse": {
      "description": "An Address response body.",
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/Address"
        }
      }
    },
    "AddressTagIds": {
      "description": "An array of IDs of tags to associate with this address.",
      "type": "array",
      "items": {
        "type": "string",
        "example": "3914"
      }
    },
    "AddressTags": {
      "description": "An array of all tag mini-objects that are associated with the given address entry.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/tagTinyResponse"
      }
    },
    "AddressTypes": {
      "description": "Reporting location type associated with the address (used for ELD reporting purposes).",
      "type": "array",
      "items": {
        "type": "string",
        "enum": [
          "yard"
        ],
        "example": "yard"
      }
    },
    "CarrierProposedAssignment": {
      "description": "A carrier proposed assignment object",
      "type": "object",
      "properties": {
        "acceptedTime": {
          "allOf": [
            {
              "description": "Time when the driver accepted this assignment in the mobile app. Will be omitted if the driver hasn't accepted this assignment. RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."
            },
            {
              "$ref": "#/definitions/time"
            }
          ]
        },
        "activeTime": {
          "allOf": [
            {
              "description": "Time after which this assignment will be active and visible to the driver on the mobile app; RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."
            },
            {
              "$ref": "#/definitions/time"
            }
          ]
        },
        "driver": {
          "allOf": [
            {
              "description": "The driver that this assignment is for."
            },
            {
              "$ref": "#/definitions/driverTinyResponse"
            }
          ]
        },
        "firstSeenTime": {
          "allOf": [
            {
              "description": "Time when the driver first saw this assignment in the mobile app. Will be omitted if the driver hasn't seen this assignment yet. RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."
            },
            {
              "$ref": "#/definitions/time"
            }
          ]
        },
        "id": {
          "description": "Samsara ID for the assignment.",
          "type": "string",
          "example": "08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d"
        },
        "rejectedTime": {
          "allOf": [
            {
              "description": "Time when the driver rejected this assignment in the mobile app. Will be omitted if the driver hasn't rejected this assignment. RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."
            },
            {
              "$ref": "#/definitions/time"
            }
          ]
        },
        "shippingDocs": {
          "description": "Shipping Documents that this assignment will propose to the driver; maximum of 40 characters",
          "type": "string",
          "maxLength": 40,
          "example": "Delivery 123, chips and soda"
        },
        "trailers": {
          "description": "Trailers that this assignment will propose to the driver.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/trailerNameOnlyResponse"
          }
        },
        "vehicle": {
          "allOf": [
            {
              "description": "Vehicle that this assignment will propose to the driver."
            },
            {
              "$ref": "#/definitions/vehicleTinyResponse"
            }
          ]
        }
      }
    },
    "CarrierProposedAssignmentCreate": {
      "description": "New assignment for a driver.",
      "type": "object",
      "required": [
        "driverId"
      ],
      "properties": {
        "activeTime": {
          "allOf": [
            {
              "description": "Time after which this assignment will be active and visible to the driver on the mobile app. Not setting it makes it active now. RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00)."
            },
            {
              "$ref": "#/definitions/time"
            }
          ]
        },
        "driverId": {
          "description": "Samsara ID for the driver that this assignment is for.",
          "type": "string",
          "example": "42"
        },
        "shippingDocs": {
          "description": "Shipping Documents that this assignment will propose to the driver; maximum of 40 characters",
          "type": "string",
          "maxLength": 40,
          "example": "Delivery 123, chips and soda"
        },
        "trailerNames": {
          "description": "Names of trailers to propose.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": [
            "Trailer123",
            "TrailerABC"
          ]
        },
        "vehicleId": {
          "description": "Samsara ID for the vehicle to propose.",
          "type": "string",
          "example": "123"
        }
      }
    },
    "Contact": {
      "description": "Information about a notification contact for alerts.",
      "type": "object",
      "required": [
        "id",
        "firstName",
        "lastName",
        "email",
        "phone"
      ],
      "properties": {
        "email": {
          "$ref": "#/definitions/ContactEmail"
        },
        "firstName": {
          "$ref": "#/definitions/ContactFirstName"
        },
        "id": {
          "$ref": "#/definitions/ContactId"
        },
        "lastName": {
          "$ref": "#/definitions/ContactLastName"
        },
        "phone": {
          "$ref": "#/definitions/ContactPhone"
        }
      }
    },
    "ContactEmail": {
      "description": "Email address of the contact.",
      "type": "string",
      "maxLength": 255,
      "example": "jane.jones@yahoo.com"
    },
    "ContactFirstName": {
      "description": "First name of the contact.",
      "type": "string",
      "maxLength": 255,
      "example": "Jane"
    },
    "ContactId": {
      "description": "ID of the contact.",
      "type": "string",
      "example": "22408"
    },
    "ContactLastName": {
      "description": "Last name of the contact.",
      "type": "string",
      "maxLength": 255,
      "example": "Jones"
    },
    "ContactPhone": {
      "description": "Phone number of the contact.",
      "type": "string",
      "maxLength": 255,
      "example": "111-222-3344"
    },
    "ContactResponse": {
      "description": "A single contact.",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Contact"
        }
      }
    },
    "CreateAddressRequest": {
      "description": "A request body to create an Address.",
      "type": "object",
      "required": [
        "formattedAddress",
        "geofence",
        "name"
      ],
      "properties": {
        "addressTypes": {
          "$ref": "#/definitions/AddressTypes"
        },
        "contactIds": {
          "$ref": "#/definitions/AddressContactIds"
        },
        "externalIds": {
          "$ref": "#/definitions/AddressExternalIds"
        },
        "formattedAddress": {
          "$ref": "#/definitions/AddressFormattedAddress"
        },
        "geofence": {
          "$ref": "#/definitions/AddressGeofence"
        },
        "latitude": {
          "$ref": "#/definitions/AddressLatitude"
        },
        "longitude": {
          "$ref": "#/definitions/AddressLongitude"
        },
        "name": {
          "$ref": "#/definitions/AddressName"
        },
        "notes": {
          "$ref": "#/definitions/AddressNotes"
        },
        "tagIds": {
          "$ref": "#/definitions/AddressTagIds"
        }
      }
    },
    "CreateContactRequest": {
      "description": "Information for adding a notification contact for alerts.",
      "type": "object",
      "properties": {
        "email": {
          "$ref": "#/definitions/ContactEmail"
        },
        "firstName": {
          "$ref": "#/definitions/ContactFirstName"
        },
        "lastName": {
          "$ref": "#/definitions/ContactLastName"
        },
        "phone": {
          "$ref": "#/definitions/ContactPhone"
        }
      }
    },
    "CreateDriverRequest": {
      "description": "Driver that should be created.",
      "type": "object",
      "required": [
        "name",
        "username",
        "password"
      ],
      "properties": {
        "carrierSettings": {
          "$ref": "#/definitions/DriverCarrierSettings"
        },
        "eldAdverseWeatherExemptionEnabled": {
          "$ref": "#/definitions/DriverEldAdverseWeatherExemptionEnabled"
        },
        "eldBigDayExemptionEnabled": {
          "$ref": "#/definitions/DriverEldBigDayExemptionEnabled"
        },
        "eldDayStartHour": {
          "$ref": "#/definitions/DriverEldDayStartHour"
        },
        "eldExempt": {
          "$ref": "#/definitions/DriverEldExempt"
        },
        "eldExemptReason": {
          "$ref": "#/definitions/DriverEldExemptReason"
        },
        "eldPcEnabled": {
          "$ref": "#/definitions/DriverEldPcEnabled"
        },
        "eldYmEnabled": {
          "$ref": "#/definitions/DriverEldPcEnabled"
        },
        "externalIds": {
          "$ref": "#/definitions/DriverExternalIds"
        },
        "licenseNumber": {
          "$ref": "#/definitions/DriverLicenseNumber"
        },
        "licenseState": {
          "$ref": "#/definitions/DriverLicenseState"
        },
        "locale": {
          "$ref": "#/definitions/DriverLocale"
        },
        "name": {
          "$ref": "#/definitions/DriverName"
        },
        "notes": {
          "$ref": "#/definitions/DriverNotes"
        },
        "password": {
          "$ref": "#/definitions/DriverPassword"
        },
        "phone": {
          "$ref": "#/definitions/DriverPhone"
        },
        "staticAssignedVehicleId": {
          "$ref": "#/definitions/DriverStaticAssignedVehicleId"
        },
        "tachographCardNumber": {
          "$ref": "#/definitions/DriverTachographCardNumber"
        },
        "tagIds": {
          "$ref": "#/definitions/DriverTagIds"
        },
        "timezone": {
          "$ref": "#/definitions/DriverTimezone"
        },
        "username": {
          "$ref": "#/definitions/DriverUsername"
        },
        "vehicleGroupTagId": {
          "$ref": "#/definitions/DriverVehicleGroupTagId"
        }
      }
    },
    "CreateRouteRequest": {
      "description": "Route creation request.",
      "type": "object",
      "properties": {
        "assignedDriverId": {
          "description": "If the route should be assigned to a driver, the ID of that driver.",
          "type": "string",
          "example": "123"
        },
        "assignedVehicleId": {
          "description": "If the route should be assigned to a vehicle, the ID of that vehicle.",
          "type": "string",
          "example": "321"
        },
        "name": {
          "description": "Name of the route.",
          "type": "string",
          "example": "Mail Delivery Route"
        },
        "notes": {
          "description": "Notes about the route.",
          "type": "string",
          "example": "These are some notes about the route."
        },
        "plannedMeters": {
          "description": "The number of meters that are planned to be driven during this route.",
          "type": "number",
          "example": 100000
        },
        "routeStops": {
          "description": "The route stops in the route. Stops will be ordered by `scheduledArrivalTime`. The start location of the route (stop with earliest `scheduledDepartureTime`) should not have `scheduledArrivalTime` populated. All other stops should `scheduledArrivalTime` and may optionally have `scheduledDepartureTime` populated.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CreateRouteStopRequest"
          }
        }
      }
    },
    "CreateRouteStopRequest": {
      "description": "A single route stop for a route.",
      "type": "object",
      "properties": {
        "notes": {
          "description": "Route stop notes.",
          "type": "string",
          "maxLength": 2000,
          "example": "Don't talk about pizza toppings with the pineapples"
        },
        "scheduledArrivalTime": {
          "description": "Scheduled arrival time for the route stop in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05+07:00"
        },
        "scheduledDepartureTime": {
          "description": "Scheduled departure time for the route stop in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05+07:00"
        },
        "stopLocation": {
          "description": "The stop location object.",
          "$ref": "#/definitions/RouteLocation"
        }
      }
    },
    "CreateTagRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "addresses": {
          "description": "The addresses that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "assets": {
          "description": "The trailers, unpowered, and powered assets that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "drivers": {
          "description": "The drivers that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "machines": {
          "description": "The machines that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "name": {
          "$ref": "#/definitions/TagName"
        },
        "parentTagId": {
          "$ref": "#/definitions/ParentTagId"
        },
        "sensors": {
          "description": "The sensors that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "vehicles": {
          "description": "The vehicles that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        }
      }
    },
    "CreateUserRequest": {
      "description": "The user creation arguments",
      "type": "object",
      "required": [
        "name",
        "email",
        "authType",
        "roles"
      ],
      "properties": {
        "authType": {
          "$ref": "#/definitions/UserAuthType"
        },
        "email": {
          "$ref": "#/definitions/UserEmail"
        },
        "name": {
          "$ref": "#/definitions/UserName"
        },
        "roles": {
          "$ref": "#/definitions/UserTagRolesRequest"
        }
      }
    },
    "DataInputListResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "An array of data input data points. Each object in the array represents a data input and will contain its associated data points.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataInputResponse"
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "DataInputResponse": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DataInputTinyResponse"
        },
        {
          "type": "object",
          "properties": {
            "numberPoints": {
              "description": "List of numeric data points from the data input.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/NumberDataPoint"
              }
            }
          }
        }
      ]
    },
    "DataInputSnapshot": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DataInputTinyResponse"
        },
        {
          "type": "object",
          "properties": {
            "numberPoint": {
              "$ref": "#/definitions/NumberDataPoint"
            }
          }
        }
      ]
    },
    "DataInputSnapshotResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "An array of data inputs' latest data points. Each object in the array represents a data input and its most recent data point.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataInputSnapshot"
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "DataInputTinyResponse": {
      "description": "A minified data input object",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique identifier for the data input.",
          "type": "string",
          "format": "uuid",
          "example": "12345"
        },
        "name": {
          "description": "Name of this data input.",
          "type": "string",
          "format": "string",
          "example": "Pump Flow"
        },
        "units": {
          "description": "Units of data for this data input.",
          "type": "string",
          "format": "string",
          "example": "Gallons Per Minute"
        }
      }
    },
    "Defect": {
      "type": "object",
      "required": [
        "id",
        "isResolved"
      ],
      "properties": {
        "comment": {
          "description": "Comment on the defect.",
          "type": "string",
          "example": "Air Compressor not working"
        },
        "createdAtTime": {
          "description": "Time when the defect was created. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.",
          "type": "string",
          "example": "2020-01-27T07:06:25Z"
        },
        "defectType": {
          "description": "The type of DVIR defect.",
          "type": "string",
          "example": "Air Compressor"
        },
        "id": {
          "description": "ID of the defect.",
          "type": "string",
          "example": "18"
        },
        "isResolved": {
          "description": "Signifies if this defect is resolved.",
          "type": "boolean",
          "example": true
        },
        "resolvedAtTime": {
          "description": "Time when this defect was resolved. Will not be returned if the defect is unresolved. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.",
          "type": "string",
          "example": "2020-01-27T07:06:25Z"
        },
        "resolvedBy": {
          "description": "The person who resolved this defect.  Will not be returned if the defect is unresolved.",
          "type": "object",
          "properties": {
            "id": {
              "description": "ID of the entity that resolved this defect. If the defect was resolved by a driver, this will be a Samsara Driver ID. If the defect was resolved by a mechanic, this will be the Samsara Dashboard User ID of the mechanic.",
              "type": "string"
            },
            "name": {
              "description": "Name of the person who resolved this defect.",
              "type": "string"
            },
            "type": {
              "description": "Indicates whether this defect was resolved by a `driver` or a `mechanic`.",
              "type": "string",
              "enum": [
                "driver",
                "mechanic"
              ]
            }
          }
        },
        "trailer": {
          "allOf": [
            {
              "description": "The trailer this defect was submitted for."
            },
            {
              "$ref": "#/definitions/trailerTinyResponse"
            }
          ]
        },
        "vehicle": {
          "allOf": [
            {
              "description": "The vehicle this defect was submitted for."
            },
            {
              "$ref": "#/definitions/vehicleTinyResponse"
            }
          ]
        }
      }
    },
    "DefectPatch": {
      "description": "Information about resolving a defect.",
      "type": "object",
      "required": [
        "resolvedBy",
        "isResolved"
      ],
      "properties": {
        "isResolved": {
          "description": "Resolves the defect. Must be `true`.",
          "type": "boolean"
        },
        "resolvedAtTime": {
          "description": "Time when defect was resolved. Defaults to now if not provided. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.",
          "type": "string",
          "example": "2020-01-27T07:06:25Z"
        },
        "resolvedBy": {
          "$ref": "#/definitions/ResolvedBy"
        }
      }
    },
    "DistanceDrivenMeters": {
      "description": "Distance driven in meters.",
      "type": "number"
    },
    "Document": {
      "description": "Document",
      "type": "object",
      "properties": {
        "createdAtTime": {
          "description": "Time the document was created in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05Z07:00"
        },
        "documentType": {
          "$ref": "#/definitions/documentTypeTinyResponse"
        },
        "driver": {
          "$ref": "#/definitions/driverTinyResponse"
        },
        "fields": {
          "description": "The fields associated with this document.",
          "type": "array",
          "items": {
            "description": "item",
            "type": "object",
            "properties": {
              "fieldType": {
                "description": "The type of the field in the document.",
                "type": "string",
                "enum": [
                  "photo",
                  "number",
                  "string",
                  "multipleChoice",
                  "signature",
                  "dateTime"
                ],
                "example": "string"
              },
              "label": {
                "description": "Descriptive name of this field.",
                "type": "string"
              },
              "value": {
                "description": "The shape of the value property depends on the fieldType selected.\n\n- fieldType `string`: returns a string (e.g. `\"hello\"`).\n\n- fieldType `number`: returns a number (e.g. `100`).\n\n- fieldType `dateTime`: returns a date and time following RFC 3339 standard (e.g. `2019-06-13T19:08:25Z`)\n\n- fieldType `signature`: returns a signature object that contains the `name`, `signedAtTime`, and `signatureUrl` properties for a signature. Example:\n\n```json\n  {\n    \"name\": \"John Smith\",\n    \"signedAtTime\": \"2006-01-02T15:04:05Z07:00\",\n    \"signatureUrl\": \"https://samsara-driver-media-upload.s3.us-west-2.amazonaws.com/123456\"\n  }\n```\n\nThe `name` property returns the name of the signee in string format (e.g. John Smith). The `signedAtTime` property returns the time the signature was created in string format, following RFC 3339 standard (e.g. `\"2006-01-02T15:04:05Z07:00\"`). The `signatureUrl` property returns a s3PresignedURL that refreshes every 24 hours to get the signature data in PNG format (e.g. `\"https://samsara-driver-media-upload.s3.us-west-2.amazonaws.com/123456\"`).\n\n- fieldType `photo`: returns an array of photo objects where each object contains a `url` property for a photo. The `url` property returns a string s3PresignedURL that refreshes every 24 hours for a JPG image. Example:\n\n```json\n [\n  {\n    \"url\": \"https://samsara-driver-media-upload.s3.us-west-2.amazonaws.com/123456\"\n  }\n ]\n```\n\n- fieldType `multipleChoiceField`: returns an array of multiple choice objects where each object contains the `selected` and `label` properties for a multiple choice field item. The `selected` property indicates whether the multiple choice field is selected and returns a boolean value (e.g. `false`). The `label` property describes the multiple choice field and returns a string value (e.g. `\"Answer choice 1\"`). Example:\n\n```json\n [\n  {\n    \"label\": \"Answer choice 1\",\n    \"selected\": \"false\"\n  },\n  {\n   \"label\": \"Answer choice 2\",\n   \"selected\": \"true\"\n  }\n ]\n```\n\n",
                "type": "string"
              }
            }
          }
        },
        "id": {
          "description": "Unique Samsara UUID for the document",
          "type": "string"
        },
        "notes": {
          "description": "Notes on the document.",
          "type": "string",
          "maxLength": 2000
        },
        "routeStop": {
          "$ref": "#/definitions/routeStopTinyResponse"
        },
        "state": {
          "description": "The condition of the document created for the driver. Can be either `required` or `submitted`, if no value is specified, `state` defaults to `required`. `required` documents are pre-populated documents for the Driver to fill out in the Driver App.",
          "type": "string",
          "default": "required",
          "enum": [
            "required",
            "submitted"
          ],
          "example": "submitted"
        },
        "updatedAtTime": {
          "description": "Time the document was updated in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05Z07:00"
        },
        "vehicle": {
          "$ref": "#/definitions/vehicleTinyResponse"
        }
      }
    },
    "DocumentCreate": {
      "description": "The document creation arguments",
      "type": "object",
      "required": [
        "documentTypeId",
        "driverId"
      ],
      "properties": {
        "documentTypeId": {
          "description": "Unique Samsara ID for the document type.",
          "type": "string",
          "example": "52be1982-06c0-497d-9f98-ac10b64eff1d"
        },
        "driverId": {
          "description": "ID of the driver.",
          "type": "string",
          "example": "88668"
        },
        "fields": {
          "description": "The fields associated with the new document. The fields must be listed in the order that that they appear in the specified document type.",
          "type": "array",
          "items": {
            "description": "item",
            "type": "object",
            "properties": {
              "fieldType": {
                "description": "The type of the field in the document.",
                "type": "string",
                "enum": [
                  "number",
                  "string",
                  "multipleChoice",
                  "dateTime"
                ],
                "example": "photo"
              },
              "label": {
                "description": "Descriptive name of this field.",
                "type": "string"
              },
              "value": {
                "description": "The shape of the value property depends on the fieldType selected.\n\n- fieldType `string`: is a string (e.g. `\"hello\"`).\n\n- fieldType `number`: is a number (e.g. `100`).\n\n- fieldType `dateTime`: is a date and time in milliseconds (e.g. `1584981501705`).\n\n- fieldType `multipleChoiceField`: is an array of multiple choice objects where each object contains the `selected` and `label` properties for a multiple choice field item. The `selected` property indicates whether the multiple choice field is selected and returns a boolean value (e.g. `false`). The `label` property describes the multiple choice field and returns a string value (e.g. `\"Answer choice 1\"`). Example:\n\n```json\n [\n  {\n    \"label\": \"Answer choice 1\",\n    \"selected\": \"false\"\n  },\n  {\n   \"label\": \"Answer choice 2\",\n   \"selected\": \"true\"\n  }\n ]\n```\n\n",
                "type": "string"
              }
            }
          }
        },
        "notes": {
          "description": "Notes",
          "type": "string",
          "maxLength": 2000
        },
        "routeStopId": {
          "description": "Unique Samsara ID for the route stop.",
          "type": "string",
          "example": "112"
        },
        "state": {
          "description": "The condition of the document created for the driver. Can be either `required` or `submitted`, if no value is specified, `state` defaults to `required`. `required` documents are pre-populated documents for the Driver to fill out in the Driver App.",
          "type": "string",
          "default": "required",
          "enum": [
            "required",
            "submitted"
          ],
          "example": "submitted"
        }
      },
      "example": {
        "documentTypeId": "52be1982-06c0-497d-9f98-ac10b64eff1d",
        "driverId": "88668",
        "fields": [
          {
            "fieldType": "string",
            "label": "Load #",
            "value": "0100748"
          },
          {
            "fieldType": "number",
            "label": "Load Weight",
            "value": 1234
          },
          {
            "fieldType": "multipleChoice",
            "label": "Did you drop the trailer?",
            "value": [
              {
                "label": "Yes",
                "selected": false
              },
              {
                "label": "No",
                "selected": true
              }
            ]
          },
          {
            "fieldType": "dateTime",
            "label": "Delivery Date and Time",
            "value": 1584930069545
          }
        ],
        "notes": "example document notes",
        "routeStopId": "112",
        "state": "required"
      }
    },
    "DocumentField": {
      "type": "object",
      "required": [
        "label",
        "fieldType"
      ],
      "properties": {
        "fieldType": {
          "description": "The kind of value that can be submitted for this field.",
          "type": "string",
          "enum": [
            "number",
            "string",
            "photo",
            "multipleChoice",
            "signature"
          ],
          "example": "number"
        },
        "label": {
          "description": "Descriptive name of this field.",
          "type": "string",
          "example": "Fuel Cost ($)"
        },
        "multipleChoiceMetadata": {
          "description": "Additional metadata information for a multiple choice field type. Only defined when a field has fieldType: multipleChoice.",
          "type": "object",
          "properties": {
            "options": {
              "description": "The options that can be selected.",
              "type": "array",
              "items": {
                "description": "The option that can be selected.",
                "type": "object",
                "properties": {
                  "label": {
                    "description": "The label of the option.",
                    "type": "string",
                    "example": "Option A"
                  }
                }
              }
            }
          }
        },
        "numberMetadata": {
          "description": "Additional metadata information for a number field type. Only defined when a field has fieldType: number.",
          "type": "object",
          "properties": {
            "numDecimalPlaces": {
              "description": "Number of decimal places that values for this field can have.",
              "type": "number",
              "format": "int64",
              "example": 2
            }
          }
        },
        "signatureMetadata": {
          "description": "Additional metadata information for a signature field type. Only defined when a field has fieldType: signature.",
          "type": "object",
          "properties": {
            "legalText": {
              "description": "Legal text to accompany the signature.",
              "type": "string",
              "example": "I consent on behalf of myself and my employer to using electronic signatures in this transaction. I understand that I can request a copy of the signed documentation from the party requesting my signature."
            }
          }
        }
      }
    },
    "DocumentType": {
      "description": "A document type",
      "type": "object",
      "properties": {
        "fields": {
          "description": "The fields determine the names of fields for this document type. They also determine the types of values a document submitted for this document type can have.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentField"
          }
        },
        "id": {
          "description": "Universally unique identifier for the document type. Can be passed in as a documentTypeId when creating a document for this document type.",
          "type": "string",
          "example": "b6199cf8-3073-441c-9b04-524fb2bb120d"
        },
        "name": {
          "description": "Name of the document type.",
          "type": "string",
          "example": "Fuel Receipt"
        }
      }
    },
    "DriveTimeDurationMs": {
      "description": "Time driven in milliseconds.",
      "type": "number"
    },
    "Driver": {
      "description": "A driver object",
      "type": "object",
      "properties": {
        "carrierSettings": {
          "$ref": "#/definitions/DriverCarrierSettings"
        },
        "createdAtTime": {
          "$ref": "#/definitions/DriverCreatedAtTime"
        },
        "driverActivationStatus": {
          "$ref": "#/definitions/DriverActivationStatus"
        },
        "eldAdverseWeatherExemptionEnabled": {
          "$ref": "#/definitions/DriverEldAdverseWeatherExemptionEnabled"
        },
        "eldBigDayExemptionEnabled": {
          "$ref": "#/definitions/DriverEldBigDayExemptionEnabled"
        },
        "eldDayStartHour": {
          "$ref": "#/definitions/DriverEldDayStartHour"
        },
        "eldExempt": {
          "$ref": "#/definitions/DriverEldExempt"
        },
        "eldExemptReason": {
          "$ref": "#/definitions/DriverEldExemptReason"
        },
        "eldPcEnabled": {
          "$ref": "#/definitions/DriverEldPcEnabled"
        },
        "eldYmEnabled": {
          "$ref": "#/definitions/DriverEldYmEnabled"
        },
        "externalIds": {
          "$ref": "#/definitions/DriverExternalIds"
        },
        "id": {
          "$ref": "#/definitions/DriverId"
        },
        "isDeactivated": {
          "$ref": "#/definitions/DriverIsDeactivated"
        },
        "licenseNumber": {
          "$ref": "#/definitions/DriverLicenseNumber"
        },
        "licenseState": {
          "$ref": "#/definitions/DriverLicenseState"
        },
        "locale": {
          "$ref": "#/definitions/DriverLocale"
        },
        "name": {
          "$ref": "#/definitions/DriverName"
        },
        "notes": {
          "$ref": "#/definitions/DriverNotes"
        },
        "phone": {
          "$ref": "#/definitions/DriverPhone"
        },
        "staticAssignedVehicle": {
          "$ref": "#/definitions/DriverStaticAssignedVehicle"
        },
        "tachographCardNumber": {
          "$ref": "#/definitions/DriverTachographCardNumber"
        },
        "tags": {
          "$ref": "#/definitions/DriverTags"
        },
        "timezone": {
          "$ref": "#/definitions/DriverTimezone"
        },
        "updatedAtTime": {
          "$ref": "#/definitions/DriverUpdatedAtTime"
        },
        "username": {
          "$ref": "#/definitions/DriverUsername"
        },
        "vehicleGroupTag": {
          "$ref": "#/definitions/DriverVehicleGroupTag"
        }
      }
    },
    "DriverActivationStatus": {
      "description": "A value indicating whether the driver is active or deactivated.",
      "type": "string",
      "enum": [
        "active",
        "deactivated"
      ]
    },
    "DriverCarrierName": {
      "description": "Carrier for a given driver.",
      "type": "string",
      "maxLength": 255,
      "example": "Acme Inc."
    },
    "DriverCarrierSettings": {
      "description": "Carrier for a given driver. If the driver's carrier differs from the general organization's carrier settings, the override value is used. Updating this value only updates the override setting for this driver.",
      "type": "object",
      "properties": {
        "carrierName": {
          "$ref": "#/definitions/DriverCarrierName"
        },
        "dotNumber": {
          "$ref": "#/definitions/DriverDotNumber"
        },
        "mainOfficeAddress": {
          "$ref": "#/definitions/DriverMainOfficeAddress"
        }
      }
    },
    "DriverCreatedAtTime": {
      "description": "The date and time this driver was created in RFC 3339 format.",
      "type": "string",
      "format": "date-time",
      "example": "2019-05-18T20:27:35Z"
    },
    "DriverDotNumber": {
      "description": "Carrier US DOT Number. If this differs from the general organization's settings, the override value is used. Updating this value only updates the override setting for this driver.",
      "type": "integer",
      "format": "int64",
      "example": 98231
    },
    "DriverEfficienciesResponse": {
      "description": "Summary of drivers' efficiencies over a time range.",
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "properties": {
            "driverSummaries": {
              "description": "A list of drivers' efficiencies.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DriverEfficiency"
              }
            },
            "summaryEndTime": {
              "description": "End time of the window for which this efficiency report was computed. Will be a UTC timestamp in RFC 3339 format. For example: `2020-03-16T16:00:00Z`",
              "type": "string",
              "format": "date-time",
              "example": "2020-03-16T16:00:00Z"
            },
            "summaryStartTime": {
              "description": "Start time of the window for which this efficiency report was computed. Will be a UTC timestamp in RFC 3339 format. For example: `2020-03-15T16:00:00Z`",
              "type": "string",
              "format": "date-time",
              "example": "2020-03-15T16:00:00Z"
            }
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "DriverEfficiency": {
      "description": "Summary of a driver's efficiency.",
      "type": "object",
      "properties": {
        "driver": {
          "$ref": "#/definitions/ExtendedDriverTinyResponse"
        },
        "totalDistanceDrivenMeters": {
          "$ref": "#/definitions/DistanceDrivenMeters"
        },
        "totalDriveTimeDurationMs": {
          "$ref": "#/definitions/DriveTimeDurationMs"
        },
        "totalFuelConsumedMl": {
          "$ref": "#/definitions/FuelConsumedMl"
        },
        "totalIdleTimeDurationMs": {
          "$ref": "#/definitions/IdleTimeDurationMs"
        },
        "totalPowerTakeOffDurationMs": {
          "$ref": "#/definitions/PowerTakeOffDurationMs"
        },
        "vehicleSummaries": {
          "description": "Summaries of vehicle efficiency for each vehicle the driver was driving during the given time period.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VehicleSummary"
          }
        }
      }
    },
    "DriverEldAdverseWeatherExemptionEnabled": {
      "description": "Flag indicating this driver may use Adverse Weather exemptions in ELD logs.",
      "type": "boolean",
      "default": false
    },
    "DriverEldBigDayExemptionEnabled": {
      "description": "Flag indicating this driver may use Big Day exemption in ELD logs.",
      "type": "boolean",
      "default": false
    },
    "DriverEldDayStartHour": {
      "description": "`0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.",
      "type": "integer",
      "default": 0
    },
    "DriverEldExempt": {
      "description": "Flag indicating this driver is exempt from the Electronic Logging Mandate.",
      "type": "boolean",
      "default": false
    },
    "DriverEldExemptReason": {
      "description": "Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).",
      "type": "string",
      "example": "Bad driver"
    },
    "DriverEldPcEnabled": {
      "description": "Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.",
      "type": "boolean",
      "default": false
    },
    "DriverEldYmEnabled": {
      "description": "Flag indicating this driver may select the Yard Move duty status in ELD logs.",
      "type": "boolean",
      "default": false
    },
    "DriverExternalIds": {
      "$ref": "#/definitions/externalIds"
    },
    "DriverId": {
      "description": "Samsara ID for the driver.",
      "type": "string",
      "example": "123"
    },
    "DriverIsDeactivated": {
      "description": "[DEPRECATED] A boolean indicating whether or not the driver is deactivated. Use `driverActivationStatus` instead.",
      "type": "boolean",
      "example": false
    },
    "DriverLicenseNumber": {
      "description": "Driver's state issued license number. The combination of this number and `licenseState` must be unique.",
      "type": "string",
      "example": "E1234567"
    },
    "DriverLicenseState": {
      "description": "Abbreviation of state that issued driver's license.",
      "type": "string",
      "example": "CA"
    },
    "DriverLocale": {
      "description": "Locale override (uncommon). These are specified by ISO 3166-2 country codes for supported locales.",
      "type": "string",
      "enum": [
        "us",
        "at",
        "be",
        "ca",
        "gb",
        "fr",
        "de",
        "ie",
        "it",
        "lu",
        "mx",
        "nl",
        "es",
        "ch"
      ]
    },
    "DriverMainOfficeAddress": {
      "description": "Main office address for a given driver. If this differs from the general organization's settings, the override value is used. ",
      "type": "string",
      "maxLength": 255,
      "example": "1234 Pear St., Scranton, PA 62814"
    },
    "DriverName": {
      "description": "Driver's name.",
      "type": "string",
      "maxLength": 255,
      "minLength": 1,
      "example": "Susan Jones"
    },
    "DriverNotes": {
      "description": "Notes about the driver.",
      "type": "string",
      "maxLength": 4096,
      "example": "Also goes by the nickname Furious Fred."
    },
    "DriverPassword": {
      "description": "Password that the driver can use to login to the Samsara driver app.",
      "type": "string",
      "example": "aSecurePassword1234"
    },
    "DriverPhone": {
      "description": "Phone number of the driver.",
      "type": "string",
      "maxLength": 255,
      "example": "5558234327"
    },
    "DriverResponse": {
      "description": "A single driver.",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Driver"
        }
      }
    },
    "DriverStaticAssignedVehicle": {
      "allOf": [
        {
          "description": "Vehicle assigned to the driver for static vehicle assignments. (uncommon)."
        },
        {
          "$ref": "#/definitions/vehicleTinyResponse"
        }
      ]
    },
    "DriverStaticAssignedVehicleId": {
      "description": "ID of vehicle that the driver is permanently assigned to. (uncommon).",
      "type": "string",
      "example": "456"
    },
    "DriverTachographActivityData": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/TachographActivityListWrapper"
      }
    },
    "DriverTachographActivityResponse": {
      "description": "List of all driver tachograph activities in a specified time range.",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/DriverTachographActivityData"
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "DriverTachographCardNumber": {
      "description": "Driver's assigned tachograph card number (Europe specific)",
      "type": "string",
      "example": "1000000492436002"
    },
    "DriverTagIds": {
      "description": "IDs of tags the driver is associated with.",
      "type": "array",
      "items": {
        "type": "string",
        "example": "147"
      }
    },
    "DriverTags": {
      "description": "The tags this driver belongs to.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/tagTinyResponse"
      }
    },
    "DriverTimezone": {
      "description": "Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs. Driver timezones use [IANA timezone database](https://www.iana.org/time-zones) keys (e.g. `America/Los_Angeles`, `America/New_York`, `Europe/London`, etc.). You can find a mapping of common timezone formats to IANA timezone keys [here](https://unicode.org/cldr/charts/latest/supplemental/zone_tzid.html).",
      "type": "string",
      "example": "America/Los_Angeles"
    },
    "DriverUpdatedAtTime": {
      "description": "The date and time this driver was last updated in RFC 3339 format.",
      "type": "string",
      "format": "date-time",
      "example": "2019-06-13T19:08:25Z"
    },
    "DriverUsername": {
      "description": "Driver's login username into the driver app. The username may not contain spaces or the '@' symbol. The username must be unique.",
      "type": "string",
      "maxLength": 189,
      "minLength": 1,
      "example": "SusanJones"
    },
    "DriverVehicleGroupTag": {
      "allOf": [
        {
          "description": "Tag which determines which vehicles a driver will see when selecting vehicles."
        },
        {
          "$ref": "#/definitions/tagTinyResponse"
        }
      ]
    },
    "DriverVehicleGroupTagId": {
      "description": "Tag ID which determines which vehicles a driver will see when selecting vehicles.",
      "type": "string",
      "example": "342417"
    },
    "Dvir": {
      "description": "Information about a DVIR.",
      "type": "object",
      "allOf": [
        {
          "required": [
            "id"
          ],
          "properties": {
            "authorSignature": {
              "allOf": [
                {
                  "description": "An author signature object which has a signatory mini object with the signed time. Author Signature."
                },
                {
                  "$ref": "#/definitions/DvirSignature"
                }
              ]
            },
            "endTime": {
              "allOf": [
                {
                  "description": "Time when driver signed and completed this DVIR."
                },
                {
                  "$ref": "#/definitions/time"
                }
              ]
            },
            "id": {
              "description": "Unique Samsara ID for the DVIR.",
              "type": "string",
              "example": "7107471"
            },
            "licensePlate": {
              "description": "The license plate of this vehicle.",
              "type": "string",
              "maxLength": 12,
              "example": "XHK1234"
            },
            "location": {
              "description": "Optional string if your jurisdiction requires a location of the DVIR.",
              "type": "string",
              "example": "350 Rhode Island St Ste. 400S, San Francisco, CA 94103"
            },
            "mechanicNotes": {
              "description": "The mechanics notes on the DVIR.",
              "type": "string",
              "example": "Replaced headlight on passenger side."
            },
            "odometerMeters": {
              "description": "The odometer reading in meters.",
              "type": "integer",
              "example": 14010293
            },
            "safetyStatus": {
              "description": "The condition of vechile on which DVIR was done.",
              "type": "string",
              "default": "unsafe",
              "enum": [
                "safe",
                "unsafe",
                "resolved"
              ],
              "example": "unsafe"
            },
            "secondSignature": {
              "allOf": [
                {
                  "description": "An author signature object which has a signatory mini object with the signed time. Second Signature."
                },
                {
                  "$ref": "#/definitions/DvirSignature"
                }
              ]
            },
            "startTime": {
              "allOf": [
                {
                  "description": "Time when driver began filling out this DVIR."
                },
                {
                  "$ref": "#/definitions/time"
                }
              ]
            },
            "thirdSignature": {
              "allOf": [
                {
                  "description": "An author signature object which has a signatory mini object with the signed time. Third Signature."
                },
                {
                  "$ref": "#/definitions/DvirSignature"
                }
              ]
            },
            "trailer": {
              "allOf": [
                {
                  "description": "The trailer the DVIR was submitted for. Only included for trailer only DVIRs."
                },
                {
                  "$ref": "#/definitions/trailerTinyResponse"
                }
              ]
            },
            "trailerDefects": {
              "description": "Defects registered for the trailer which was part of the DVIR.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dvirAllOf0TrailerDefectsItems"
              }
            },
            "trailerName": {
              "description": "The name of the trailer the DVIR was submitted for.  Only included for tractor+trailer DVIRs.",
              "type": "string",
              "example": "Midwest Trailer #5"
            },
            "type": {
              "description": "Inspection type of the DVIR.",
              "type": "string",
              "default": "unspecified",
              "enum": [
                "preTrip",
                "postTrip",
                "mechanic",
                "unspecified"
              ],
              "example": "preTrip"
            },
            "vehicle": {
              "allOf": [
                {
                  "description": "The vehicle the DVIR was submitted for. Only included for tractor or tractor+trailer DVIRs."
                },
                {
                  "$ref": "#/definitions/vehicleTinyResponse"
                }
              ]
            },
            "vehicleDefects": {
              "description": "Defects registered for the vehicle which was part of the DVIR.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/dvirAllOf0TrailerDefectsItems"
              }
            }
          }
        }
      ]
    },
    "DvirAuthorType": {
      "description": "Whether the DVIR was submitted by a `driver` or `mechanic`.",
      "type": "string",
      "default": "driver",
      "enum": [
        "driver",
        "mechanic"
      ],
      "example": "driver"
    },
    "DvirCreate": {
      "description": "DVIR creation body",
      "type": "object",
      "allOf": [
        {
          "type": "object",
          "required": [
            "safetyStatus",
            "type",
            "authorId"
          ],
          "properties": {
            "authorId": {
              "description": "Samsara user ID of the mechanic creating the DVIR.",
              "type": "string",
              "example": "11"
            },
            "licensePlate": {
              "description": "The license plate of this vehicle.",
              "type": "string",
              "maxLength": 12,
              "example": "XHK1234"
            },
            "location": {
              "description": "Optional string if your jurisdiction requires a location of the DVIR.",
              "type": "string",
              "example": "350 Rhode Island St Ste. 400S, San Francisco, CA 94103"
            },
            "mechanicNotes": {
              "description": "Any notes from the mechanic.",
              "type": "string",
              "example": "Replaced headlight on passenger side."
            },
            "odometerMeters": {
              "description": "The current odometer of the vehicle.",
              "type": "integer",
              "example": 38426
            },
            "resolvedDefectIds": {
              "description": "Array of ids for defects being resolved with this DVIR.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "safetyStatus": {
              "description": "Whether or not this vehicle or trailer is safe to drive.",
              "type": "string",
              "enum": [
                "safe",
                "unsafe"
              ],
              "example": "safe"
            },
            "trailerId": {
              "description": "Id of trailer being inspected. Either vehicleId or trailerId must be provided.",
              "type": "string",
              "example": "11"
            },
            "type": {
              "description": "Only type 'mechanic' is currently accepted.",
              "type": "string",
              "enum": [
                "mechanic"
              ],
              "example": "mechanic"
            },
            "vehicleId": {
              "description": "Id of vehicle being inspected. Either vehicleId or trailerId must be provided.",
              "type": "string",
              "example": "10"
            }
          }
        }
      ]
    },
    "DvirPatch": {
      "description": "Information about resolving a DVIR.",
      "type": "object",
      "required": [
        "authorId",
        "isResolved"
      ],
      "properties": {
        "authorId": {
          "description": "The user who is resolving the dvir.",
          "type": "string",
          "example": "11"
        },
        "isResolved": {
          "description": "Resolves the DVIR. Must be `true`.",
          "type": "boolean"
        },
        "mechanicNotes": {
          "description": "Any notes from the mechanic.",
          "type": "string",
          "example": "Replaced headlight on passenger side."
        },
        "signedAtTime": {
          "allOf": [
            {
              "description": "Time when user signed this DVIR."
            },
            {
              "$ref": "#/definitions/time"
            }
          ]
        }
      }
    },
    "DvirSignature": {
      "description": "DVIR Signure.",
      "type": "object",
      "properties": {
        "signatoryUser": {
          "allOf": [
            {
              "description": "The user who signed the DVIR."
            },
            {
              "$ref": "#/definitions/userTinyResponse"
            }
          ]
        },
        "signedAtTime": {
          "allOf": [
            {
              "description": "The time when the DVIR was signed."
            },
            {
              "$ref": "#/definitions/time"
            }
          ]
        },
        "type": {
          "$ref": "#/definitions/DvirAuthorType"
        }
      }
    },
    "Equipment": {
      "description": "An equipment object.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "assetSerial": {
          "description": "An equipment identification number.",
          "type": "string",
          "example": "1FUJA6BD31LJ09646"
        },
        "id": {
          "$ref": "#/definitions/EquipmentId"
        },
        "name": {
          "$ref": "#/definitions/EquipmentName"
        },
        "notes": {
          "description": "Notes about a piece of equipment. Samsara supports a maximum of 255 chars.",
          "type": "string",
          "maxLength": 255,
          "example": "These are notes about this given equipment."
        },
        "tags": {
          "description": "An array of all tag mini-objects that are associated with the given equipment.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/tagTinyResponse"
          }
        }
      }
    },
    "EquipmentEngineRpm": {
      "description": "Engine RPM reading.",
      "type": "object",
      "required": [
        "time",
        "value"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/EquipmentTime"
        },
        "value": {
          "description": "The revolutions per minute of the engine.",
          "type": "integer",
          "example": 1800
        }
      }
    },
    "EquipmentEngineSeconds": {
      "description": "[DEPRECATED] Please use either `gatewayEngineSeconds` or `obdEngineSeconds`.",
      "type": "object",
      "required": [
        "time",
        "value"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/EquipmentTime"
        },
        "value": {
          "description": "An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power and an offset provided manually through the Samsara cloud dashboard.",
          "type": "integer",
          "example": 22374000
        }
      }
    },
    "EquipmentEngineState": {
      "description": "[DEPRECATED] Please use either `gatewayEngineStates` or `obdEngineStates`.",
      "type": "object",
      "required": [
        "time",
        "value"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/EquipmentTime"
        },
        "value": {
          "description": "An approximation of engine state based on readings the AG24 receives from the aux/digio cable.",
          "type": "string",
          "enum": [
            "Off",
            "On"
          ],
          "example": "On"
        }
      }
    },
    "EquipmentFuelPercent": {
      "description": "Fuel percent reading.",
      "type": "object",
      "required": [
        "time",
        "value"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/EquipmentTime"
        },
        "value": {
          "description": "The percent of fuel in the unit of equipment.",
          "type": "integer",
          "example": 54
        }
      }
    },
    "EquipmentGatewayEngineSeconds": {
      "description": "Engine seconds reading from the aux/digio cable.",
      "type": "object",
      "required": [
        "time",
        "value"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/EquipmentTime"
        },
        "value": {
          "description": "An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power and an offset provided manually through the Samsara cloud dashboard.",
          "type": "integer",
          "example": 22374000
        }
      }
    },
    "EquipmentGatewayEngineState": {
      "description": "Engine state reading from the aux/digio cable.",
      "type": "object",
      "required": [
        "time",
        "value"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/EquipmentTime"
        },
        "value": {
          "description": "An approximation of engine state based on readings the AG24 receives from the aux/digio cable.",
          "type": "string",
          "enum": [
            "Off",
            "On"
          ],
          "example": "On"
        }
      }
    },
    "EquipmentGpsOdometerMeters": {
      "description": "GPS odometer reading.",
      "type": "object",
      "required": [
        "time",
        "value"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/EquipmentTime"
        },
        "value": {
          "description": "An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.",
          "type": "integer",
          "example": 3200
        }
      }
    },
    "EquipmentId": {
      "description": "Unique Samsara ID for the equipment.",
      "type": "string",
      "example": "112"
    },
    "EquipmentListResponse": {
      "description": "List of all equipment objects, and pagination information.",
      "type": "object",
      "required": [
        "data",
        "pagination"
      ],
      "properties": {
        "data": {
          "description": "List of equipment objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Equipment"
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "EquipmentLocation": {
      "description": "Location reading.",
      "type": "object",
      "required": [
        "time",
        "latitude",
        "longitude"
      ],
      "properties": {
        "heading": {
          "description": "Heading of the unit of equipment in degrees.",
          "type": "number",
          "format": "double",
          "example": 120
        },
        "latitude": {
          "description": "GPS latitude represented in degrees",
          "type": "number",
          "format": "double",
          "example": 122.142
        },
        "longitude": {
          "description": "GPS longitude represented in degrees",
          "type": "number",
          "format": "double",
          "example": -93.343
        },
        "speed": {
          "description": "GPS speed of the unit of equipment in miles per hour.",
          "type": "number",
          "format": "double",
          "example": 48.3
        },
        "time": {
          "$ref": "#/definitions/time"
        }
      }
    },
    "EquipmentLocationsListResponse": {
      "description": "A time-series of equipment locations and pagination information",
      "type": "object",
      "required": [
        "data",
        "pagination"
      ],
      "properties": {
        "data": {
          "description": "Time-series of locations for the specified units of equipment.",
          "type": "array",
          "items": {
            "description": "A unit of equipment and its time-series of location events.",
            "type": "object",
            "required": [
              "id",
              "name",
              "locations"
            ],
            "properties": {
              "id": {
                "$ref": "#/definitions/EquipmentId"
              },
              "locations": {
                "description": "A time-series of location events for the given unit of equipment.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EquipmentLocation"
                }
              },
              "name": {
                "$ref": "#/definitions/EquipmentName"
              }
            }
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "EquipmentLocationsResponse": {
      "description": "The most recent equipment locations and pagination information",
      "type": "object",
      "required": [
        "data",
        "pagination"
      ],
      "properties": {
        "data": {
          "description": "List of the most recent locations for the specified units of equipment.",
          "type": "array",
          "items": {
            "description": "A unit of equipment and its most recent location.",
            "type": "object",
            "required": [
              "id",
              "name",
              "location"
            ],
            "properties": {
              "id": {
                "$ref": "#/definitions/EquipmentId"
              },
              "location": {
                "$ref": "#/definitions/EquipmentLocation"
              },
              "name": {
                "$ref": "#/definitions/EquipmentName"
              }
            }
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "EquipmentName": {
      "description": "Name of the equipment.",
      "type": "string",
      "example": "Crane A7"
    },
    "EquipmentObdEngineSeconds": {
      "description": "Engine seconds reading from on-board diagnostics.",
      "type": "object",
      "required": [
        "time",
        "value"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/EquipmentTime"
        },
        "value": {
          "description": "The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics.",
          "type": "integer",
          "example": 22374000
        }
      }
    },
    "EquipmentObdEngineState": {
      "description": "Engine state reading from on-board diagnostics.",
      "type": "object",
      "required": [
        "time",
        "value"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/EquipmentTime"
        },
        "value": {
          "description": "The state of the engine read from on-board diagnostics.",
          "type": "string",
          "enum": [
            "Off",
            "On",
            "Idle"
          ],
          "example": "On"
        }
      }
    },
    "EquipmentResponse": {
      "description": "A response containing an equipment object.",
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/Equipment"
        }
      }
    },
    "EquipmentStatsListResponse": {
      "description": "A time-series of equipment stats and pagination information",
      "type": "object",
      "required": [
        "data",
        "pagination"
      ],
      "properties": {
        "data": {
          "description": "Time-series of stats for the specified units of equipment and stat types.",
          "type": "array",
          "items": {
            "description": "A unit of equipment and its time-series of stats events.",
            "type": "object",
            "required": [
              "id",
              "name"
            ],
            "properties": {
              "engineRpm": {
                "description": "A time-series of engine RPM readings for the given unit of equipment.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EquipmentEngineRpm"
                }
              },
              "engineSeconds": {
                "description": "[DEPRECATED] Please use either `gatewayEngineSeconds` or `obdEngineSeconds`.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EquipmentEngineSeconds"
                }
              },
              "engineStates": {
                "description": "[DEPRECATED] Please use either `gatewayEngineStates` or `obdEngineStates`.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EquipmentEngineState"
                }
              },
              "fuelPercent": {
                "description": "A time-series of fuel percent level changes for the given unit of equipment.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EquipmentFuelPercent"
                }
              },
              "gatewayEngineSeconds": {
                "description": "A time-series of engine seconds readings for the given unit of equipment. (An approximate based on readings from the AG24's aux/digio cable.)",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EquipmentGatewayEngineSeconds"
                }
              },
              "gatewayEngineState": {
                "description": "A time-series of engine state changes (as read from the AG24's aux/digio cable) for the given unit of equipment.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EquipmentGatewayEngineState"
                }
              },
              "gpsOdometerMeters": {
                "description": "A time-series of GPS odometer readings for the given unit of equipment.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EquipmentGpsOdometerMeters"
                }
              },
              "id": {
                "$ref": "#/definitions/EquipmentId"
              },
              "name": {
                "$ref": "#/definitions/EquipmentName"
              },
              "obdEngineSeconds": {
                "description": "A time-series of engine state changes for the given unit of equipment. (As directly from on-board diagnostics.)",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EquipmentObdEngineSeconds"
                }
              },
              "obdEngineState": {
                "description": "A time-series of engine state changes (as read from on-board diagnostics) for the given unit of equipment.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EquipmentObdEngineState"
                }
              }
            }
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "EquipmentStatsResponse": {
      "description": "The most recent equipment stats and pagination information",
      "type": "object",
      "required": [
        "data",
        "pagination"
      ],
      "properties": {
        "data": {
          "description": "List of the most recent stats for the specified units of equipment and stat types.",
          "type": "array",
          "items": {
            "description": "A unit of equipment and its most recent stat.",
            "type": "object",
            "required": [
              "id",
              "name"
            ],
            "properties": {
              "engineRpm": {
                "$ref": "#/definitions/EquipmentEngineRpm"
              },
              "engineSeconds": {
                "$ref": "#/definitions/EquipmentEngineSeconds"
              },
              "engineState": {
                "$ref": "#/definitions/EquipmentEngineState"
              },
              "fuelPercent": {
                "$ref": "#/definitions/EquipmentFuelPercent"
              },
              "gatewayEngineSeconds": {
                "$ref": "#/definitions/EquipmentGatewayEngineSeconds"
              },
              "gatewayEngineState": {
                "$ref": "#/definitions/EquipmentGatewayEngineState"
              },
              "gpsOdometerMeters": {
                "$ref": "#/definitions/EquipmentGpsOdometerMeters"
              },
              "id": {
                "$ref": "#/definitions/EquipmentId"
              },
              "name": {
                "$ref": "#/definitions/EquipmentName"
              },
              "obdEngineSeconds": {
                "$ref": "#/definitions/EquipmentObdEngineSeconds"
              },
              "obdEngineState": {
                "$ref": "#/definitions/EquipmentObdEngineState"
              }
            }
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "EquipmentTime": {
      "description": "UTC timestamp of the time the data point was generated by the equipment, in RFC3339 format.",
      "type": "string",
      "example": "2019-05-03T04:30:31Z"
    },
    "ExtendedDriverTinyResponse": {
      "description": "A minified driver object.",
      "type": "object",
      "properties": {
        "externalIds": {
          "$ref": "#/definitions/externalIds"
        },
        "id": {
          "description": "ID of the driver.",
          "type": "string",
          "example": "88668"
        },
        "name": {
          "description": "Name of the driver.",
          "type": "string",
          "example": "Susan Bob"
        },
        "username": {
          "description": "Username of the driver.",
          "type": "string",
          "example": "susanbob"
        }
      }
    },
    "FuelConsumedMl": {
      "description": "Fuel consumption in milliliters.",
      "type": "number"
    },
    "HarshEvent": {
      "description": "A harsh event.",
      "type": "object",
      "properties": {
        "behaviorLabelType": {
          "$ref": "#/definitions/HarshEventBehaviorLabelTypes"
        },
        "brakeThresholdGs": {
          "$ref": "#/definitions/HarshEventBrakeThresholdGs"
        },
        "crashThresholdGs": {
          "$ref": "#/definitions/HarshEventCrashThresholdGs"
        },
        "downloadForwardVideoUrl": {
          "$ref": "#/definitions/HarshEventDownloadForwardVideoUrl"
        },
        "downloadInwardVideoUrl": {
          "$ref": "#/definitions/HarshEventDownloadInwardVideoUrl"
        },
        "downloadTrackedInwardVideoUrl": {
          "$ref": "#/definitions/HarshEventDownloadTrackedInwardVideoUrl"
        },
        "driver": {
          "$ref": "#/definitions/HarshEventDriver"
        },
        "id": {
          "$ref": "#/definitions/HarshEventId"
        },
        "incidentReportUrl": {
          "$ref": "#/definitions/HarshEventIncidentReportUrl"
        },
        "location": {
          "$ref": "#/definitions/HarshEventLocation"
        },
        "maxAccelerationGs": {
          "$ref": "#/definitions/HarshEventMaxAccelerationGs"
        },
        "time": {
          "$ref": "#/definitions/HarshEventTime"
        },
        "vehicle": {
          "$ref": "#/definitions/HarshEventVehicle"
        }
      }
    },
    "HarshEventBehaviorLabelTypes": {
      "type": "array",
      "items": {
        "description": "The most up-to-date behavior label associated with the harsh event.",
        "type": "string",
        "enum": [
          "acceleration",
          "braking",
          "sharpTurn",
          "crash",
          "rolloverProtectionEngineControlActivated",
          "rolloverProtectionBrakeControlActivated",
          "yawControlEngineControlActivated",
          "yawControlBrakeControlActivated",
          "rolledStopSign",
          "nearCollision",
          "distractedDriving",
          "tailgating"
        ]
      }
    },
    "HarshEventBrakeThresholdGs": {
      "description": "The brake threshold value as a multiplier on the force of gravity (g).",
      "type": "number",
      "example": "0.123"
    },
    "HarshEventCrashThresholdGs": {
      "description": "The crash threshold value as a multiplier on the force of gravity (g).",
      "type": "number",
      "example": "0.123"
    },
    "HarshEventDownloadForwardVideoUrl": {
      "description": "URL to download the forward video.",
      "type": "string",
      "example": "https://s3.console.aws.amazon.com/s3/buckets/samsara-dashcam-videos/21575/212014918400828/1553060687222/huKA7IhpBV-camera-video-segment-1244214895.mp4"
    },
    "HarshEventDownloadInwardVideoUrl": {
      "description": "URL to download the inward video.",
      "type": "string",
      "example": "https://s3.console.aws.amazon.com/s3/buckets/samsara-dashcam-videos/21575/212014918400828/1553060687222/huKA7IhpBV-camera-video-segment-1244214895.mp4"
    },
    "HarshEventDownloadTrackedInwardVideoUrl": {
      "description": "URL to download the tracked inward video.",
      "type": "string",
      "example": "https://s3.console.aws.amazon.com/s3/buckets/samsara-dashcam-videos/21575/212014918400828/1553060687222/huKA7IhpBV-camera-video-segment-1244214895.mp4"
    },
    "HarshEventDriver": {
      "$ref": "#/definitions/driverTinyResponse"
    },
    "HarshEventId": {
      "description": "The unique Samsara ID of the harsh event.",
      "type": "string",
      "example": "212014918174029-1550954461759"
    },
    "HarshEventIncidentReportUrl": {
      "description": "Dashboard page URL link to the incident report.",
      "type": "string",
      "example": "https://cloud.samsara.com/groups/4185/fleet/reports/safety/vehicle/222/incident/1499411220000"
    },
    "HarshEventLocation": {
      "$ref": "#/definitions/location"
    },
    "HarshEventMaxAccelerationGs": {
      "description": "The maximum acceleration value as a multiplier on the force of gravity (g).",
      "type": "number",
      "example": "0.123"
    },
    "HarshEventTime": {
      "description": "The time the harsh event occurred in RFC 3339 milliseconds format.",
      "type": "string",
      "example": "2019-06-13T19:08:25.455Z"
    },
    "HarshEventVehicle": {
      "$ref": "#/definitions/vehicleTinyResponse"
    },
    "HarshEventsListResponse": {
      "description": "List of harsh events.",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HarshEvent"
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "IdleTimeDurationMs": {
      "description": "Time spent idling in milliseconds.",
      "type": "number"
    },
    "ListAddressesResponse": {
      "description": "A list of Addresses and pagination information.",
      "type": "object",
      "required": [
        "data",
        "pagination"
      ],
      "properties": {
        "data": {
          "description": "A list of Addresses.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "ListContactsResponse": {
      "description": "A list of contacts.",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Contact"
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "ListDataInputsResponse": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/DataInputTinyResponse"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "description": "Type of data input, specified by the user at the time of creation of the data input.",
              "type": "string",
              "format": "string",
              "example": "Flow"
            }
          }
        }
      ]
    },
    "ListDriversResponse": {
      "description": "A list of drivers.",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Driver"
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "ListTagsResponse": {
      "description": "A list of tags.",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "ListUserTagRolesResponse": {
      "description": "A list of user roles.",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userRoleTinyResponse"
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "ListUsersResponse": {
      "description": "A list of users.",
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "ListVehiclesResponse": {
      "description": "Response for retrieving a list of vehicles.",
      "type": "object",
      "required": [
        "data",
        "pagination"
      ],
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Vehicle"
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "Message": {
      "type": "object",
      "required": [
        "driverId",
        "text"
      ],
      "properties": {
        "driverId": {
          "description": "ID of the driver for whom the message is sent to or sent by.",
          "type": "integer",
          "format": "int64",
          "example": 555
        },
        "text": {
          "description": "The text sent in the message.",
          "type": "string",
          "maxLength": 65533,
          "minLength": 1,
          "example": "This is a message."
        }
      }
    },
    "Messages": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Message"
      }
    },
    "NumberDataPoint": {
      "description": "A single numeric data point of a data input.",
      "type": "object",
      "properties": {
        "time": {
          "$ref": "#/definitions/time"
        },
        "value": {
          "description": "Numeric value of the data point.",
          "type": "number",
          "format": "double",
          "example": 1992.0506
        }
      }
    },
    "OrgSafetyScoresResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "crashCount": {
                "description": "Crash count",
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "driverId": {
                "description": "Driver Id",
                "type": "integer",
                "format": "int64",
                "example": 319596
              },
              "harshAccelCount": {
                "description": "Harsh accel count",
                "type": "integer",
                "format": "int64",
                "example": 3
              },
              "harshBrakingCount": {
                "description": "Harsh braking count",
                "type": "integer",
                "format": "int64",
                "example": 5
              },
              "harshEventIdentifiers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "eventTime": {
                      "description": "Event time, specified in RFC 3339",
                      "type": "string",
                      "format": "string",
                      "example": "2019-04-17T16:42:55Z"
                    },
                    "vehicleId": {
                      "description": "Vehicle Id",
                      "type": "integer",
                      "format": "int64",
                      "example": 212014918214656
                    }
                  }
                }
              },
              "harshTurningCount": {
                "description": "Harsh turning count",
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "safetyScore": {
                "description": "Vehicle/Driver Safety Score",
                "type": "integer",
                "format": "int64",
                "example": 92
              },
              "safetyScoreRank": {
                "description": "Vehicle/Driver Safety Rank",
                "type": "integer",
                "format": "int64",
                "example": 7
              },
              "timeOverSpeedLimitMs": {
                "description": "Overspeed limit time, specified in milliseconds UNIX time.",
                "type": "integer",
                "format": "int64",
                "example": 123
              },
              "totalDistanceDrivenMeters": {
                "description": "Total distance driven meters",
                "type": "integer",
                "format": "int64",
                "example": 2509
              },
              "totalHarshEventCount": {
                "description": "Total harsh event count",
                "type": "integer",
                "format": "int64",
                "example": 20
              },
              "totalTimeDrivenMs": {
                "description": "Total driver time, specified in milliseconds UNIX time.",
                "type": "integer",
                "format": "int64",
                "example": 12343
              },
              "vehicleId": {
                "description": "Vehicle Id",
                "type": "integer",
                "format": "int64",
                "example": 212014918214656
              }
            }
          }
        }
      }
    },
    "OrganizationInfoResponse": {
      "description": "Information about your organization.",
      "type": "object",
      "properties": {
        "carrierSettings": {
          "description": "Carrier for a given organization.",
          "type": "object",
          "properties": {
            "carrierName": {
              "description": "Carrier for a given organization.",
              "type": "string",
              "maxLength": 255,
              "example": "Acme Inc."
            },
            "dotNumber": {
              "description": "Carrier US DOT Number for the organization.",
              "type": "integer",
              "format": "int64",
              "example": 98231
            },
            "mainOfficeAddress": {
              "description": "Main office address for a given organization.",
              "type": "string",
              "maxLength": 255,
              "example": "1234 Pear St., Scranton, PA 62814"
            }
          }
        },
        "id": {
          "description": "ID of the organization.",
          "type": "string",
          "example": "123"
        },
        "name": {
          "description": "Name of organization.",
          "type": "string",
          "example": "Charlie's Dining Services"
        }
      }
    },
    "ParentTag": {
      "description": "If this tag is part a hierarchical tag tree, this is the parent tag, otherwise this will be omitted.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/TaggedObjectId"
        },
        "name": {
          "$ref": "#/definitions/ParentTagName"
        }
      }
    },
    "ParentTagId": {
      "description": "If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be omitted.",
      "type": "string",
      "example": "4815"
    },
    "ParentTagName": {
      "description": "The tag name.",
      "type": "string",
      "example": "US West Vehicles"
    },
    "PowerTakeOffDurationMs": {
      "description": "Time spent with power take off enabled while idling in milliseconds.",
      "type": "number"
    },
    "RemoteObdTestRecordType": {
      "description": "CTP test data reported from one ECU.",
      "type": "object",
      "properties": {
        "calCvn": {
          "description": "Calibration Verification Number as read from the CAN bus.",
          "type": "string",
          "example": "AaPl1io="
        },
        "calCvnValid": {
          "description": "Indicates CalCvnCount was successfully read from the CAN bus.",
          "type": "boolean"
        },
        "calId": {
          "description": "Calibration ID as read from the CAN bus.",
          "type": "string",
          "example": "AVRCSUUzRDcuSEVYAAAAAAA="
        },
        "calIdValid": {
          "description": "Indicates CalId was successfully read from the CAN bus.",
          "type": "boolean"
        },
        "catalyst": {
          "description": "OBD Monitor Status - Catalyst or NMHC Catalyst as read from the CAN bus.",
          "type": "string",
          "enum": [
            "U",
            "R",
            "N"
          ],
          "example": "U"
        },
        "comprehensive": {
          "description": "OBD Monitor Status - Comprehensive as read from the CAN bus.",
          "type": "string",
          "enum": [
            "U",
            "R",
            "N"
          ],
          "example": "U"
        },
        "compressionIgnitionMonitorSupported": {
          "description": "Compression ignition monitor supported as read from the CAN bus.",
          "type": "string",
          "enum": [
            "Y",
            "N"
          ],
          "example": "Y"
        },
        "compressionIgnitionMonitorSupportedValid": {
          "description": "Indicates CompressionIgnitionMonitorSupported was successfully read from the CAN bus.",
          "type": "boolean"
        },
        "distanceTraveledSinceCodesCleared": {
          "description": "Distance Traveled Since Codes Cleared as read from the CAN bus.",
          "type": "integer",
          "example": "3"
        },
        "distanceTraveledSinceCodesClearedValid": {
          "description": "Indicates DistanceTraveledSinceCodesCleared was successfully read from the CAN bus.",
          "type": "boolean"
        },
        "distanceTraveledWithMilOn": {
          "description": "Distance Traveled With MIL On as read from the CAN bus.",
          "type": "integer",
          "example": "3"
        },
        "distanceTraveledWithMilOnValid": {
          "description": "Indicates DistanceTraveledWithMilOn was successfully read from the CAN bus.",
          "type": "boolean"
        },
        "dtcCount": {
          "description": "Number of emissions related DTCs read from the CAN bus.",
          "type": "integer",
          "example": "3"
        },
        "egr": {
          "description": "OBD Monitor Status - EGR/VVT as read from the CAN bus.",
          "type": "string",
          "enum": [
            "U",
            "R",
            "N"
          ],
          "example": "U"
        },
        "emissionRelatedDtcs": {
          "description": "Emission related DTCs as read from the CAN bus, separated by pipe characters.",
          "type": "string",
          "example": "P0151|P0300|P0301"
        },
        "emissionRelatedDtcsValid": {
          "description": "Indicates EmissionRelatedDtcs was successfully read from the CAN bus.",
          "type": "boolean"
        },
        "evapSystem": {
          "description": "OBD Monitor Status - Evaporative System or ISO/SAE Reserved as read from the CAN bus.",
          "type": "string",
          "enum": [
            "U",
            "R",
            "N"
          ],
          "example": "U"
        },
        "fuel": {
          "description": "OBD Monitor Status - Fuel as read from the CAN bus.",
          "type": "string",
          "enum": [
            "U",
            "R",
            "N"
          ],
          "example": "U"
        },
        "heatedCatalyst": {
          "description": "OBD Monitor Status - Heated Catalyst or NOx/SCR aftertreatment as read from the CAN bus.",
          "type": "string",
          "enum": [
            "U",
            "R",
            "N"
          ],
          "example": "U"
        },
        "heatedO2Sensor": {
          "description": "OBD Monitor Status - Oxygen Sensor Heater or PM Filter as read from the CAN bus.",
          "type": "string",
          "enum": [
            "U",
            "R",
            "N"
          ],
          "example": "U"
        },
        "isoSaeReserved": {
          "description": "OBD Monitor Status - ISO/SAE Reserved as read from the CAN bus.",
          "type": "string",
          "enum": [
            "U",
            "R",
            "N"
          ],
          "example": "U"
        },
        "mil": {
          "description": "Malfunction indicator lamp status as read from the CAN bus.",
          "type": "string",
          "enum": [
            "Y",
            "N"
          ],
          "example": "Y"
        },
        "milValid": {
          "description": "Indicates Mil was successfully read from the CAN bus.",
          "type": "boolean"
        },
        "minutesSinceCodesCleared": {
          "description": "Minutes Since Codes Cleared as read from the CAN bus.",
          "type": "integer",
          "example": "3"
        },
        "minutesSinceCodesClearedValid": {
          "description": "Indicates MinutesSinceCodesCleared was successfully read from the CAN bus.",
          "type": "boolean"
        },
        "minutesSinceMil": {
          "description": "Minutes Since MIL On as read from the CAN bus.",
          "type": "integer",
          "example": "3"
        },
        "minutesSinceMilValid": {
          "description": "Indicates MinutesSinceMil was successfully read from the CAN bus.",
          "type": "boolean"
        },
        "misfire": {
          "description": "OBD Monitor Status - Misfire as read from the CAN bus.",
          "type": "string",
          "enum": [
            "U",
            "R",
            "N"
          ],
          "example": "U"
        },
        "notReadyCount": {
          "description": "Number of OBD Monitor Statuses reporting 'Supported and not ready'.",
          "type": "integer",
          "example": "3"
        },
        "o2Sensor": {
          "description": "OBD Monitor Status - Oxygen Sensor or Exhaust Gas Sensor as read from the CAN bus.",
          "type": "string",
          "enum": [
            "U",
            "R",
            "N"
          ],
          "example": "U"
        },
        "obdMonitorStatusValid": {
          "description": "Indicates Obd Monitor Statuses were successfully read from the CAN bus.",
          "type": "boolean"
        },
        "obdVin": {
          "description": "Vehicle identification number as read from the CAN bus.",
          "type": "string",
          "example": "1HGBH41JXMN109186"
        },
        "obdVinValid": {
          "description": "Indicates ObdVin was successfully read from the CAN bus.",
          "type": "boolean"
        },
        "pcmId": {
          "description": "ECU Address for the ECU that was read from the CAN bus.",
          "type": "string",
          "example": "7E8"
        },
        "pendingDtcCount": {
          "description": "Number of pending DTCs read from the CAN bus.",
          "type": "integer",
          "example": "3"
        },
        "pendingDtcs": {
          "description": "Pending DTCs as read from the CAN bus, separated by pipe characters.",
          "type": "string",
          "example": "P0151|P0300|P0301"
        },
        "pendingDtcsValid": {
          "description": "Indicates PendingDtcs was successfully read from the CAN bus.",
          "type": "boolean"
        },
        "permanentDtcCount": {
          "description": "Number of permanent DTCs read from the CAN bus.",
          "type": "integer",
          "example": "3"
        },
        "permanentDtcs": {
          "description": "Permanent DTCs as read from the CAN bus, separated by pipe characters.",
          "type": "string",
          "example": "P0151|P0300|P0301"
        },
        "permanentDtcsValid": {
          "description": "Indicates PermanentDtcs was successfully read from the CAN bus.",
          "type": "boolean"
        },
        "pidCount": {
          "description": "PidCount is a count of all PIDs supported for this control module as read from the CAN bus",
          "type": "integer",
          "example": "3"
        },
        "pidCountValid": {
          "description": "Indicates PidCount was successfully read from the CAN bus.",
          "type": "boolean"
        },
        "rpm": {
          "description": "Revolutions per minute as read from the CAN bus.",
          "type": "integer",
          "example": "3"
        },
        "rpmValid": {
          "description": "Indicates Rpm was successfully read from the CAN bus.",
          "type": "boolean"
        },
        "secondaryAir": {
          "description": "OBD Monitor Status - Secondary Air System or Boost Pressure System as read from the CAN bus.",
          "type": "string",
          "enum": [
            "U",
            "R",
            "N"
          ],
          "example": "U"
        },
        "warmupsSinceCodesCleared": {
          "description": "Warmups Since Codes Cleared as read from the CAN bus.",
          "type": "integer",
          "example": "3"
        },
        "warmupsSinceCodesClearedValid": {
          "description": "Indicates WarmupsSinceCodesCleared was successfully read from the CAN bus.",
          "type": "boolean"
        }
      }
    },
    "ReplaceTagRequest": {
      "type": "object",
      "properties": {
        "addresses": {
          "description": "The addresses that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "assets": {
          "description": "The trailers, unpowered, and powered assets that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "drivers": {
          "description": "The drivers that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "machines": {
          "description": "The machines that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "name": {
          "$ref": "#/definitions/TagName"
        },
        "parentTagId": {
          "$ref": "#/definitions/ParentTagId"
        },
        "sensors": {
          "description": "The sensors that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        },
        "vehicles": {
          "description": "The vehicles that belong to this tag.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaggedObjectId"
          }
        }
      }
    },
    "ResolvedBy": {
      "description": "Information about the user who is resolving a defect.",
      "type": "object",
      "required": [
        "id",
        "type"
      ],
      "properties": {
        "id": {
          "description": "The Id of user who is resolving the defect.",
          "type": "string",
          "example": "11"
        },
        "type": {
          "description": "The type of user who is resolving the defect. Must be \"mechanic\".",
          "type": "string"
        }
      }
    },
    "Route": {
      "description": "A single route. At most one of assignedDriver and assignedVehicle will be provided based on the initial route assignment, and the returned driver and vehicle objects are associated with either the assignedVehicle or assignedDriver, respectively.",
      "type": "object",
      "properties": {
        "actualEndTime": {
          "description": "Actual end time, if it exists, for the route in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05+07:00"
        },
        "actualStartTime": {
          "description": "Actual start time, if it exists, for the route in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05+07:00"
        },
        "assignedDriver": {
          "$ref": "#/definitions/driverTinyResponse"
        },
        "assignedVehicle": {
          "$ref": "#/definitions/vehicleTinyResponse"
        },
        "driver": {
          "$ref": "#/definitions/driverTinyResponse"
        },
        "id": {
          "description": "Unique identifier for the route.",
          "type": "string",
          "example": "131313"
        },
        "name": {
          "description": "Name of the route.",
          "type": "string",
          "maxLength": 255,
          "example": "Pineapple delivery"
        },
        "notes": {
          "description": "Route notes.",
          "type": "string",
          "maxLength": 2000,
          "example": "Extra ripe and ready for immediate consumption"
        },
        "odometerEndMeters": {
          "description": "The odometer reading of the assignedVehicle or associated vehicle object at the end of the route.",
          "type": "number",
          "format": "integer",
          "example": 234234234
        },
        "odometerStartMeters": {
          "description": "The odometer reading of the assignedVehicle or associated vehicle object at the start of the route.",
          "type": "number",
          "format": "integer",
          "example": 123123123
        },
        "plannedMeters": {
          "description": "Total planned distance in meters for the route.",
          "type": "number",
          "format": "integer",
          "example": 12345
        },
        "routeStops": {
          "description": "The route stops in the route.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RouteStop"
          }
        },
        "scheduledEndTime": {
          "description": "Scheduled end time for the route in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05+07:00"
        },
        "scheduledStartTime": {
          "description": "Scheduled start time for the route in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05+07:00"
        },
        "startLocation": {
          "description": "The route start location object.",
          "$ref": "#/definitions/RouteLocation"
        },
        "state": {
          "description": "The current state of the route.",
          "type": "string",
          "enum": [
            "scheduled",
            "live",
            "completed"
          ],
          "example": "scheduled"
        },
        "vehicle": {
          "$ref": "#/definitions/vehicleTinyResponse"
        }
      }
    },
    "RouteLocation": {
      "description": "Location or address object for the start of a route or a route stop.",
      "type": "object",
      "properties": {
        "formattedAddress": {
          "description": "The location address.",
          "type": "string",
          "example": "350 Rhode Island St, San Francisco, CA"
        },
        "id": {
          "description": "Unique address identifier. If this field is provided, the other fields in this object will be filled from the associated address.",
          "type": "string",
          "example": "123"
        },
        "latitude": {
          "description": "The latitude of the address in decimal degrees.",
          "type": "number",
          "format": "double",
          "example": 37.765363
        },
        "longitude": {
          "description": "The longitude of the address in decimal degrees.",
          "type": "number",
          "format": "double",
          "example": -122.403098
        },
        "name": {
          "description": "The location address name.",
          "type": "string",
          "example": "Samsara"
        }
      }
    },
    "RouteStop": {
      "description": "A single route stop for a route.",
      "type": "object",
      "properties": {
        "actualArrivalTime": {
          "description": "Actual arrival time, if it exists, for the route stop in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05+07:00"
        },
        "actualDepartureTime": {
          "description": "Actual departure time, if it exists, for the route stop in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05+07:00"
        },
        "documents": {
          "description": "The documents associated with the stop.",
          "type": "array",
          "items": {
            "description": "A document object",
            "type": "object",
            "properties": {
              "id": {
                "description": "Unique identifier for the document.",
                "type": "string",
                "example": "b6199cf8-3073-441c-9b04-524fb2bb120d"
              }
            }
          }
        },
        "id": {
          "description": "Unique identifier for the route stop.",
          "type": "string",
          "example": "141414"
        },
        "liveShareUrl": {
          "description": "The live share URL for the stop.",
          "type": "string",
          "example": "https://cloud.samsara.com/fleet/viewer/job/fleet_viewer_token"
        },
        "notes": {
          "description": "Route stop notes.",
          "type": "string",
          "maxLength": 2000,
          "example": "Don't talk about pizza toppings with the pineapples"
        },
        "scheduledArrivalTime": {
          "description": "Scheduled arrival time for the route stop in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05+07:00"
        },
        "scheduledDepartureTime": {
          "description": "Scheduled departure time for the route stop in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05+07:00"
        },
        "skippedTime": {
          "description": "Skipped time, if it exists, for the route stop in RFC 3339 format.",
          "type": "string",
          "example": "2006-01-02T15:04:05+07:00"
        },
        "state": {
          "description": "The current state of the route stop.",
          "type": "string",
          "enum": [
            "scheduled",
            "enRoute",
            "skipped",
            "arrived",
            "departed"
          ],
          "example": "scheduled"
        },
        "stopLocation": {
          "description": "The stop location object.",
          "$ref": "#/definitions/RouteLocation"
        }
      }
    },
    "TachographActivity": {
      "description": "Tachograph activity",
      "type": "object",
      "properties": {
        "endTime": {
          "description": "End time of state in RFC 3339 format.",
          "type": "string",
          "example": "2020-01-03T16:04:05Z07:00"
        },
        "isManualEntry": {
          "description": "A flag indicating whether the activity was manually entered by the driver. If this is `true`, the state cannot be \"UNKNOWN\"",
          "type": "boolean",
          "example": false
        },
        "startTime": {
          "description": "Start time of state in RFC 3339 format.",
          "type": "string",
          "example": "2020-01-02T15:04:05Z07:00"
        },
        "state": {
          "description": "Tachograph activity state",
          "type": "string",
          "enum": [
            "BREAK/REST",
            "WORK",
            "AVAILABILITY",
            "DRIVING",
            "UNKNOWN"
          ]
        }
      }
    },
    "TachographActivityList": {
      "description": "List of all driver tachograph activities in a specified time range.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/TachographActivity"
      }
    },
    "TachographActivityListWrapper": {
      "type": "object",
      "properties": {
        "activity": {
          "$ref": "#/definitions/TachographActivityList"
        },
        "driver": {
          "$ref": "#/definitions/driverTinyResponse"
        }
      }
    },
    "Tag": {
      "allOf": [
        {
          "$ref": "#/definitions/TinyTag"
        },
        {
          "type": "object",
          "properties": {
            "addresses": {
              "description": "The addresses that belong to this tag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            },
            "assets": {
              "description": "The trailers, unpowered, and powered assets that belong to this tag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            },
            "drivers": {
              "description": "The drivers that belong to this tag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            },
            "machines": {
              "description": "The machines that belong to thistag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            },
            "parentTag": {
              "$ref": "#/definitions/ParentTag"
            },
            "sensors": {
              "description": "The sensors that belong to this tag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            },
            "vehicles": {
              "description": "The vehicles that belong to this tag.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/TaggedObject"
              }
            }
          }
        }
      ]
    },
    "TagId": {
      "description": "Unique Samsara ID of this tag.",
      "type": "string",
      "example": "342417"
    },
    "TagName": {
      "description": "Name of this tag.",
      "type": "string",
      "maxLength": 191,
      "minLength": 1,
      "example": "California"
    },
    "TagResponse": {
      "description": "A single tag.",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Tag"
        }
      }
    },
    "TaggedObject": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "$ref": "#/definitions/TaggedObjectId"
        },
        "name": {
          "$ref": "#/definitions/TaggedObjectName"
        }
      }
    },
    "TaggedObjectId": {
      "description": "The object ID.",
      "type": "string",
      "example": "23502866574"
    },
    "TaggedObjectName": {
      "description": "The object name.",
      "type": "string",
      "example": "Driver Don"
    },
    "TinyTag": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/TagId"
        },
        "name": {
          "$ref": "#/definitions/TagName"
        },
        "parentTagId": {
          "$ref": "#/definitions/ParentTagId"
        }
      }
    },
    "UnassignedDrivingSegmentListResponse": {
      "description": "A list of driving segments with no associated driver(s).",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UnassignedDrivingSegmentResponse"
      }
    },
    "UnassignedDrivingSegmentResponse": {
      "description": "A driving segment with no associated driver(s) that may or may not be in a unassigned, pending, rejected, or assigned states.",
      "type": "object",
      "properties": {
        "annotation": {
          "$ref": "#/definitions/annotation"
        },
        "createdAtTime": {
          "description": "The time that the server created the driving segment, specified in RFC 3339 format.",
          "type": "string",
          "format": "date-time",
          "example": "2019-04-17T16:43:00Z"
        },
        "driver": {
          "$ref": "#/definitions/driverTinyResponse"
        },
        "endTime": {
          "$ref": "#/definitions/endTimeBodyParam"
        },
        "id": {
          "description": "Unique identifier for the unassigned driving segment.",
          "type": "string",
          "format": "uuid",
          "example": "08b3aeada5f4ab3010c0b4efa28d2d1890dbf8d48d2d"
        },
        "startTime": {
          "$ref": "#/definitions/startTimeBodyParam"
        },
        "status": {
          "description": "Status of assignment for this segment.",
          "type": "string",
          "format": "string",
          "enum": [
            "pending",
            "accepted",
            "rejected",
            "unassigned",
            "unknown"
          ],
          "example": "pending"
        },
        "vehicle": {
          "$ref": "#/definitions/vehicleTinyResponse"
        }
      }
    },
    "UpdateAddressRequest": {
      "description": "A request body to update an Address.",
      "type": "object",
      "properties": {
        "addressTypes": {
          "$ref": "#/definitions/AddressTypes"
        },
        "contactIds": {
          "$ref": "#/definitions/AddressContactIds"
        },
        "externalIds": {
          "$ref": "#/definitions/AddressExternalIds"
        },
        "formattedAddress": {
          "$ref": "#/definitions/AddressFormattedAddress"
        },
        "geofence": {
          "$ref": "#/definitions/AddressGeofence"
        },
        "latitude": {
          "$ref": "#/definitions/AddressLatitude"
        },
        "longitude": {
          "$ref": "#/definitions/AddressLongitude"
        },
        "name": {
          "$ref": "#/definitions/AddressName"
        },
        "notes": {
          "$ref": "#/definitions/AddressNotes"
        },
        "tagIds": {
          "$ref": "#/definitions/AddressTagIds"
        }
      }
    },
    "UpdateContactRequest": {
      "description": "Information for adding a notification contact for alerts.",
      "type": "object",
      "properties": {
        "email": {
          "$ref": "#/definitions/ContactEmail"
        },
        "firstName": {
          "$ref": "#/definitions/ContactFirstName"
        },
        "lastName": {
          "$ref": "#/definitions/ContactLastName"
        },
        "phone": {
          "$ref": "#/definitions/ContactPhone"
        }
      }
    },
    "UpdateDriverRequest": {
      "description": "Driver that should be updated.",
      "type": "object",
      "properties": {
        "carrierSettings": {
          "$ref": "#/definitions/DriverCarrierSettings"
        },
        "driverActivationStatus": {
          "$ref": "#/definitions/DriverActivationStatus"
        },
        "eldAdverseWeatherExemptionEnabled": {
          "$ref": "#/definitions/DriverEldAdverseWeatherExemptionEnabled"
        },
        "eldBigDayExemptionEnabled": {
          "$ref": "#/definitions/DriverEldBigDayExemptionEnabled"
        },
        "eldDayStartHour": {
          "$ref": "#/definitions/DriverEldDayStartHour"
        },
        "eldExempt": {
          "$ref": "#/definitions/DriverEldExempt"
        },
        "eldExemptReason": {
          "$ref": "#/definitions/DriverEldExemptReason"
        },
        "eldPcEnabled": {
          "$ref": "#/definitions/DriverEldPcEnabled"
        },
        "eldYmEnabled": {
          "$ref": "#/definitions/DriverEldYmEnabled"
        },
        "externalIds": {
          "$ref": "#/definitions/DriverExternalIds"
        },
        "licenseNumber": {
          "$ref": "#/definitions/DriverLicenseNumber"
        },
        "licenseState": {
          "$ref": "#/definitions/DriverLicenseState"
        },
        "locale": {
          "$ref": "#/definitions/DriverLocale"
        },
        "name": {
          "$ref": "#/definitions/DriverName"
        },
        "notes": {
          "$ref": "#/definitions/DriverNotes"
        },
        "password": {
          "$ref": "#/definitions/DriverPassword"
        },
        "phone": {
          "$ref": "#/definitions/DriverPhone"
        },
        "staticAssignedVehicleId": {
          "$ref": "#/definitions/DriverStaticAssignedVehicleId"
        },
        "tachographCardNumber": {
          "$ref": "#/definitions/DriverTachographCardNumber"
        },
        "tagIds": {
          "$ref": "#/definitions/DriverTagIds"
        },
        "timezone": {
          "$ref": "#/definitions/DriverTimezone"
        },
        "username": {
          "$ref": "#/definitions/DriverUsername"
        },
        "vehicleGroupTagId": {
          "$ref": "#/definitions/DriverVehicleGroupTagId"
        }
      }
    },
    "UpdateUserRequest": {
      "description": "The user update arguments",
      "type": "object",
      "properties": {
        "authType": {
          "$ref": "#/definitions/UserAuthType"
        },
        "name": {
          "$ref": "#/definitions/UserName"
        },
        "roles": {
          "$ref": "#/definitions/UserTagRolesRequest"
        }
      }
    },
    "UpdateVehicleRequest": {
      "description": "All the editable portions of the vehicle object.",
      "type": "object",
      "properties": {
        "auxInputType1": {
          "$ref": "#/definitions/VehicleAuxInputType1"
        },
        "auxInputType2": {
          "$ref": "#/definitions/VehicleAuxInputType2"
        },
        "engineHours": {
          "$ref": "#/definitions/VehicleEngineHours"
        },
        "externalIds": {
          "$ref": "#/definitions/VehicleExternalIds"
        },
        "harshAccelerationSettingType": {
          "$ref": "#/definitions/VehicleHarshAccelerationSettingType"
        },
        "licensePlate": {
          "$ref": "#/definitions/VehicleLicensePlate"
        },
        "name": {
          "$ref": "#/definitions/VehicleName"
        },
        "notes": {
          "$ref": "#/definitions/VehicleNotes"
        },
        "odometerMeters": {
          "$ref": "#/definitions/VehicleOdometerMeters"
        },
        "staticAssignedDriverId": {
          "$ref": "#/definitions/VehicleStaticAssignedDriverId"
        },
        "tagIds": {
          "$ref": "#/definitions/VehicleTagIds"
        },
        "vin": {
          "$ref": "#/definitions/VehicleVin"
        }
      }
    },
    "User": {
      "description": "A user object",
      "type": "object",
      "required": [
        "id",
        "authType",
        "name",
        "roles",
        "email"
      ],
      "properties": {
        "authType": {
          "$ref": "#/definitions/UserAuthType"
        },
        "email": {
          "$ref": "#/definitions/UserEmail"
        },
        "id": {
          "$ref": "#/definitions/UserId"
        },
        "name": {
          "$ref": "#/definitions/UserName"
        },
        "roles": {
          "$ref": "#/definitions/UserTagRoles"
        }
      }
    },
    "UserAuthType": {
      "description": "The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.",
      "type": "string",
      "enum": [
        "default",
        "saml"
      ]
    },
    "UserEmail": {
      "description": "The email address of this user.",
      "type": "string",
      "example": "user@company.com"
    },
    "UserId": {
      "description": "ID of the user.",
      "type": "string",
      "example": "123"
    },
    "UserName": {
      "description": "The first and last name of the user.",
      "type": "string",
      "example": "Bob Smith"
    },
    "UserResponse": {
      "description": "A single user.",
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "UserTagRole": {
      "description": "A user role",
      "type": "object",
      "properties": {
        "role": {
          "$ref": "#/definitions/userRoleTinyResponse"
        },
        "tag": {
          "allOf": [
            {
              "description": "The id of the tag used to grant a role. If no tag is specified, this role applies at the organization level."
            },
            {
              "$ref": "#/definitions/tagTinyResponse"
            }
          ]
        }
      }
    },
    "UserTagRoleRequest": {
      "type": "object",
      "required": [
        "roleId"
      ],
      "properties": {
        "roleId": {
          "description": "The id of the role the user has been granted.",
          "type": "string",
          "example": "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
        },
        "tagId": {
          "description": "The id of the tag used to grant a role. If no tag is specified, this role applies at the organization level.",
          "type": "string",
          "example": "3914"
        }
      },
      "example": [
        {
          "roleId": "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
        },
        {
          "roleId": "717fe0f3-f87f-4a57-b3ce-33a5a9f394cd",
          "tagId": "3914"
        }
      ]
    },
    "UserTagRoles": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserTagRole"
      }
    },
    "UserTagRolesRequest": {
      "description": "The roles for this user. Users must have at least a single role to be a part of an organization.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserTagRoleRequest"
      }
    },
    "V1Asset": {
      "description": "Basic information of an asset",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "assetSerialNumber": {
          "description": "Serial number of the host asset",
          "type": "string",
          "example": "SNTEST123"
        },
        "cable": {
          "description": "The cable connected to the asset",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "assetType": {
                "description": "Asset type",
                "type": "string",
                "example": "Reefer (Thermo King)"
              }
            }
          }
        },
        "engineHours": {
          "description": "Engine hours",
          "type": "integer",
          "example": 104
        },
        "id": {
          "description": "Asset ID",
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "name": {
          "description": "Asset name",
          "type": "string",
          "example": "Trailer 123"
        },
        "vehicleId": {
          "description": "The ID of the Vehicle associated to the Asset (if present)",
          "type": "integer",
          "format": "int64",
          "example": 2
        }
      }
    },
    "V1AssetCurrentLocation": {
      "description": "Current location of an asset",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "The latitude of the location in degrees.",
          "type": "number",
          "example": 37
        },
        "location": {
          "description": "The best effort (street,city,state) for the latitude and longitude.",
          "type": "string",
          "example": "525 York, San Francisco, CA"
        },
        "longitude": {
          "description": "The longitude of the location in degrees.",
          "type": "number",
          "example": -122.7
        },
        "speedMilesPerHour": {
          "description": "The speed calculated from GPS that the asset was traveling at in miles per hour.",
          "type": "number",
          "example": 35
        },
        "timeMs": {
          "description": "Time in Unix milliseconds since epoch when the asset was at the location.",
          "type": "number",
          "example": 12314151
        }
      }
    },
    "V1AssetCurrentLocationsResponse": {
      "description": "Basic information of an asset",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "assetSerialNumber": {
          "description": "Asset serial number",
          "type": "string",
          "example": "8dka2810"
        },
        "cable": {
          "description": "The cable connected to the asset",
          "type": "object",
          "properties": {
            "assetType": {
              "description": "Asset type",
              "type": "string",
              "example": "Reefer (Thermo King)"
            }
          }
        },
        "engineHours": {
          "description": "Engine hours",
          "type": "integer",
          "example": 104
        },
        "id": {
          "description": "Asset ID",
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "location": {
          "description": "Current location of an asset",
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1AssetCurrentLocation"
          }
        },
        "name": {
          "description": "Asset name",
          "type": "string",
          "example": "Trailer 123"
        }
      }
    },
    "V1AssetLocationResponse": {
      "description": "A list of historical asset locations.",
      "type": "array",
      "items": {
        "description": "Asset location details.",
        "type": "object",
        "properties": {
          "latitude": {
            "description": "The latitude of the location in degrees.",
            "type": "number",
            "example": 37
          },
          "location": {
            "description": "The best effort (street,city,state) for the latitude and longitude.",
            "type": "string",
            "example": "525 York, San Francisco, CA"
          },
          "longitude": {
            "description": "The longitude of the location in degrees.",
            "type": "number",
            "example": -122.7
          },
          "speedMilesPerHour": {
            "description": "The speed calculated from GPS that the asset was traveling at in miles per hour.",
            "type": "number",
            "example": 35
          },
          "time": {
            "description": "Time in Unix milliseconds since epoch when the asset was at the location.",
            "type": "number",
            "example": 12314151
          }
        }
      }
    },
    "V1AssetReeferResponse": {
      "description": "Reefer-specific asset details",
      "type": "object",
      "properties": {
        "assetType": {
          "description": "Asset type",
          "type": "string",
          "example": "Reefer (Thermo King)"
        },
        "id": {
          "description": "Asset ID",
          "type": "integer",
          "example": 1
        },
        "name": {
          "description": "Asset name",
          "type": "string",
          "example": "Reefer 123"
        },
        "reeferStats": {
          "type": "object",
          "properties": {
            "alarms": {
              "description": "Reefer alarms",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "alarms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "alarmCode": {
                          "description": "ID of the alarm",
                          "type": "integer",
                          "format": "int64",
                          "example": 102
                        },
                        "description": {
                          "description": "Description of the alarm",
                          "type": "string",
                          "example": "Check Return Air Sensor"
                        },
                        "operatorAction": {
                          "description": "Recommended operator action",
                          "type": "string",
                          "example": "Check and repair at end of trip"
                        },
                        "severity": {
                          "description": "Severity of the alarm: 1: OK to run, 2: Check as specified, 3: Take immediate action",
                          "type": "integer",
                          "format": "int64",
                          "example": 1
                        }
                      }
                    }
                  },
                  "changedAtMs": {
                    "description": "Timestamp when the alarms were reported, in Unix milliseconds since epoch",
                    "type": "integer",
                    "format": "int64",
                    "example": 1453449599999
                  }
                }
              }
            },
            "engineHours": {
              "description": "Engine hours of the reefer",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "changedAtMs": {
                    "description": "Timestamp in Unix milliseconds since epoch.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1453449599999
                  },
                  "engineHours": {
                    "description": "Engine hours of the reefer.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1200
                  }
                }
              }
            },
            "fuelPercentage": {
              "description": "Fuel percentage of the reefer",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "changedAtMs": {
                    "description": "Timestamp in Unix milliseconds since epoch.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1453449599999
                  },
                  "fuelPercentage": {
                    "description": "Fuel percentage of the reefer.",
                    "type": "integer",
                    "format": "int64",
                    "example": 99
                  }
                }
              }
            },
            "powerStatus": {
              "description": "Power status of the reefer",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "changedAtMs": {
                    "description": "Timestamp in Unix milliseconds since epoch.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1453449599999
                  },
                  "status": {
                    "description": "Power status of the reefer.",
                    "type": "string",
                    "example": "Active (Continuous)"
                  }
                }
              }
            },
            "returnAirTemp": {
              "description": "Return air temperature of the reefer",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "changedAtMs": {
                    "description": "Timestamp in Unix milliseconds since epoch.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1453449599999
                  },
                  "tempInMilliC": {
                    "description": "Return air temperature in millidegree Celsius.",
                    "type": "integer",
                    "format": "int64",
                    "example": 31110
                  }
                }
              }
            },
            "setPoint": {
              "description": "Set point temperature of the reefer",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "changedAtMs": {
                    "description": "Timestamp in Unix milliseconds since epoch.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1453449599999
                  },
                  "tempInMilliC": {
                    "description": "Set point temperature in millidegree Celsius.",
                    "type": "integer",
                    "format": "int64",
                    "example": 31110
                  }
                }
              }
            }
          }
        }
      }
    },
    "V1AssetsReefer": {
      "description": "Reefer-specific details",
      "type": "object",
      "properties": {
        "assetType": {
          "description": "Asset type",
          "type": "string",
          "example": "Thermo King"
        },
        "id": {
          "description": "Asset ID",
          "type": "integer",
          "example": 1
        },
        "name": {
          "description": "Asset name",
          "type": "string",
          "example": "Reefer 123"
        },
        "reeferStats": {
          "description": "Contains all the state changes of the reefer for the included stat types. Each state change is recorded independently, so the number of records in each array may differ depending on when that stat changed state. Stat types with a continuous value (such as temperature) will be recorded at different rates depending on the reefer, but generally readings have a frequency on the order of seconds.",
          "type": "object",
          "properties": {
            "ambientAirTemperature": {
              "description": "Ambient temperature of the reefer. This is the temperature of the air around the Samsara Asset Gateway.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "changedAtMs": {
                    "description": "Timestamp in Unix milliseconds since epoch.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1453449599999
                  },
                  "tempInMilliC": {
                    "description": "Ambient temperature in millidegree Celsius.",
                    "type": "integer",
                    "format": "int64",
                    "example": 31110
                  }
                }
              }
            },
            "dischargeAirTemperature": {
              "description": "Discharge air temperature of the reefer. This is the temperature of the air as it leaves the cooling unit.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "changedAtMs": {
                    "description": "Timestamp in Unix milliseconds since epoch.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1453449599999
                  },
                  "tempInMilliC": {
                    "description": "Discharge temperature in millidegree Celsius.",
                    "type": "integer",
                    "format": "int64",
                    "example": 31110
                  }
                }
              }
            },
            "engineHours": {
              "description": "Engine hours of the reefer",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "changedAtMs": {
                    "description": "Timestamp in Unix milliseconds since epoch.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1453449599999
                  },
                  "engineHours": {
                    "description": "Engine hours of the reefer.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1200
                  }
                }
              }
            },
            "fuelPercentage": {
              "description": "Fuel percentage of the reefer",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "changedAtMs": {
                    "description": "Timestamp in Unix milliseconds since epoch.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1453449599999
                  },
                  "fuelPercentage": {
                    "description": "Fuel percentage of the reefer.",
                    "type": "integer",
                    "format": "int64",
                    "example": 99
                  }
                }
              }
            },
            "powerStatus": {
              "description": "Power status of the reefer",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "changedAtMs": {
                    "description": "Timestamp in Unix milliseconds since epoch.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1453449599999
                  },
                  "status": {
                    "description": "Power status of the reefer.",
                    "type": "string",
                    "enum": [
                      "Off",
                      "Active",
                      "Active (Start/Stop)",
                      "Active (Continuous)"
                    ],
                    "example": "Active (Continuous)"
                  }
                }
              }
            },
            "reeferAlarms": {
              "description": "Reefer alarms",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "alarms": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "alarmCode": {
                          "description": "ID of the alarm",
                          "type": "integer",
                          "format": "int64",
                          "example": 102
                        },
                        "description": {
                          "description": "Description of the alarm",
                          "type": "string",
                          "example": "Check Return Air Sensor"
                        },
                        "operatorAction": {
                          "description": "Recommended operator action",
                          "type": "string",
                          "example": "Check and repair at end of trip"
                        },
                        "severity": {
                          "description": "Severity of the alarm: 1: OK to run, 2: Check as specified, 3: Take immediate action",
                          "type": "integer",
                          "format": "int64",
                          "example": 1
                        }
                      }
                    }
                  },
                  "changedAtMs": {
                    "description": "Timestamp when the alarms were reported, in Unix milliseconds since epoch",
                    "type": "integer",
                    "format": "int64",
                    "example": 1453449599999
                  }
                }
              }
            },
            "returnAirTemperature": {
              "description": "Return air temperature of the reefer. This is the temperature read by the reefer module (Carrier, Thermo King) that shows the temperature of the air as it enters the system.",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "changedAtMs": {
                    "description": "Timestamp in Unix milliseconds since epoch.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1453449599999
                  },
                  "tempInMilliC": {
                    "description": "Return air temperature in millidegree Celsius.",
                    "type": "integer",
                    "format": "int64",
                    "example": 31110
                  }
                }
              }
            },
            "setPoint": {
              "description": "Set point temperature of the reefer",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "changedAtMs": {
                    "description": "Timestamp in Unix milliseconds since epoch.",
                    "type": "integer",
                    "format": "int64",
                    "example": 1453449599999
                  },
                  "tempInMilliC": {
                    "description": "Set point temperature in millidegree Celsius.",
                    "type": "integer",
                    "format": "int64",
                    "example": 31110
                  }
                }
              }
            }
          }
        }
      }
    },
    "V1CargoResponse": {
      "description": "Contains the current cargo status of a sensor.",
      "type": "object",
      "properties": {
        "groupId": {
          "description": "Deprecated.",
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "sensors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "cargoEmpty": {
                "description": "Flag indicating whether the current cargo is empty or loaded.",
                "type": "boolean",
                "example": true
              },
              "cargoStatusTime": {
                "description": "The timestamp of reported cargo status, specified in RFC 3339 time.",
                "type": "string",
                "example": "2019-04-17T16:42:55Z"
              },
              "id": {
                "description": "ID of the sensor.",
                "type": "integer",
                "format": "int64",
                "example": 122
              },
              "name": {
                "description": "Name of the sensor.",
                "type": "string",
                "example": "Trailer Cargo V1Sensor"
              },
              "trailerId": {
                "description": "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 123
              },
              "vehicleId": {
                "description": "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 124
              }
            }
          }
        }
      }
    },
    "V1DataInputHistoryResponse": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "description": "The ID of this data input",
          "type": "integer",
          "format": "int64",
          "example": 12345
        },
        "name": {
          "description": "Name of this data input",
          "type": "string",
          "example": "Pump Flow"
        },
        "points": {
          "description": "Data points from this data input",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "timeMs": {
                "type": "integer",
                "format": "int64",
                "example": 1453449599999
              },
              "value": {
                "type": "number",
                "format": "double",
                "example": 12.332
              }
            }
          }
        }
      }
    },
    "V1DispatchJob": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "dispatch_route_id",
            "job_state"
          ],
          "properties": {
            "arrived_at_ms": {
              "description": "The time at which the driver arrived at the job destination.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "completed_at_ms": {
              "description": "The time at which the job was marked complete (e.g. started driving to the next destination).",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "dispatch_route_id": {
              "description": "ID of the route that this job belongs to.",
              "type": "integer",
              "format": "int64",
              "example": 55
            },
            "documents": {
              "description": "Document submissions associated with this job.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/V1DispatchJobDocumentInfo"
              }
            },
            "driver_id": {
              "description": "ID of the driver assigned to the dispatch job.",
              "type": "integer",
              "format": "int64",
              "example": 444
            },
            "en_route_at_ms": {
              "description": "The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination).",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "estimated_arrival_ms": {
              "description": "The time at which the assigned driver is estimated to arrive at the job destination. Only valid for en-route jobs.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "fleet_viewer_url": {
              "description": "Fleet viewer url of the dispatch job.",
              "type": "string",
              "example": "https://cloud.samsara.com/fleet/viewer/job/fleet_viewer_token"
            },
            "group_id": {
              "description": "Deprecated.",
              "type": "integer",
              "format": "int64",
              "example": 101
            },
            "id": {
              "description": "ID of the Samsara dispatch job.",
              "type": "integer",
              "format": "int64",
              "example": 773
            },
            "job_state": {
              "$ref": "#/definitions/V1jobStatus"
            },
            "skipped_at_ms": {
              "description": "The time at which the job was marked skipped.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "vehicle_id": {
              "description": "ID of the vehicle used for the dispatch job.",
              "type": "integer",
              "format": "int64",
              "example": 112
            }
          }
        },
        {
          "$ref": "#/definitions/V1DispatchJobCreate"
        }
      ]
    },
    "V1DispatchJobCreate": {
      "type": "object",
      "required": [
        "scheduled_arrival_time_ms"
      ],
      "properties": {
        "destination_address": {
          "description": "The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.",
          "type": "string",
          "example": "123 Main St, Philadelphia, PA 19106"
        },
        "destination_address_id": {
          "description": "ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address and latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.",
          "type": "integer",
          "format": "int64",
          "example": 67890
        },
        "destination_lat": {
          "description": "Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 123.456
        },
        "destination_lng": {
          "description": "Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 37.459
        },
        "destination_name": {
          "description": "The name of the job destination. If provided, it will take precedence over the name of the address book entry.",
          "type": "string",
          "example": "ACME Inc. Philadelphia HQ"
        },
        "notes": {
          "description": "Notes regarding the details of this job, maximum of 2000 characters; newline characters ('\\n')can be used for formatting.",
          "type": "string",
          "example": "Ensure crates are stacked no more than 3 high."
        },
        "scheduled_arrival_time_ms": {
          "description": "The time at which the assigned driver is scheduled to arrive at the job destination.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "scheduled_departure_time_ms": {
          "description": "The time at which the assigned driver is scheduled to depart from the job destination.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        }
      }
    },
    "V1DispatchJobDocumentInfo": {
      "type": "object",
      "required": [
        "driverId",
        "id"
      ],
      "properties": {
        "driverId": {
          "description": "ID of driver that submitted the document.",
          "type": "integer",
          "example": 1234
        },
        "id": {
          "description": "ID of document. This can be used to query for the document's info via the /v1/fleet/drivers/{driver_id}/documents/{document_id} endpoint",
          "type": "string",
          "example": "2018_42424242"
        }
      }
    },
    "V1DispatchJobUpdate": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "dispatch_jobs"
          ],
          "properties": {
            "id": {
              "description": "ID of the Samsara dispatch job to update",
              "type": "integer",
              "format": "int64",
              "example": 42
            }
          }
        },
        {
          "$ref": "#/definitions/V1DispatchJobCreate"
        }
      ]
    },
    "V1DispatchJobWithoutETA": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "id",
            "dispatch_route_id",
            "job_state"
          ],
          "properties": {
            "arrived_at_ms": {
              "description": "The time at which the driver arrived at the job destination.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "completed_at_ms": {
              "description": "The time at which the job was marked complete (e.g. started driving to the next destination).",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "dispatch_route_id": {
              "description": "ID of the route that this job belongs to.",
              "type": "integer",
              "format": "int64",
              "example": 55
            },
            "documents": {
              "description": "Document submissions associated with this job.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/V1DispatchJobDocumentInfo"
              }
            },
            "driver_id": {
              "description": "ID of the driver assigned to the dispatch job.",
              "type": "integer",
              "format": "int64",
              "example": 444
            },
            "en_route_at_ms": {
              "description": "The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination).",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "fleet_viewer_url": {
              "description": "Fleet viewer url of the dispatch job.",
              "type": "string",
              "example": "https://cloud.samsara.com/fleet/viewer/job/fleet_viewer_token"
            },
            "group_id": {
              "description": "Deprecated.",
              "type": "integer",
              "format": "int64",
              "example": 101
            },
            "id": {
              "description": "ID of the Samsara dispatch job.",
              "type": "integer",
              "format": "int64",
              "example": 773
            },
            "job_state": {
              "$ref": "#/definitions/V1jobStatus"
            },
            "skipped_at_ms": {
              "description": "The time at which the job was marked skipped.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "vehicle_id": {
              "description": "ID of the vehicle used for the dispatch job.",
              "type": "integer",
              "format": "int64",
              "example": 112
            }
          }
        },
        {
          "$ref": "#/definitions/V1DispatchJobCreate"
        }
      ]
    },
    "V1DispatchRoute": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "dispatch_jobs": {
              "description": "The dispatch jobs associated with this route.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/V1DispatchJob"
              }
            },
            "id": {
              "description": "ID of the Samsara dispatch route.",
              "type": "integer",
              "format": "int64",
              "example": 556
            }
          }
        },
        {
          "$ref": "#/definitions/V1DispatchRouteBase"
        }
      ]
    },
    "V1DispatchRouteBase": {
      "type": "object",
      "properties": {
        "actual_end_ms": {
          "description": "The time in Unix epoch milliseconds that the route actually ended.",
          "type": "integer",
          "format": "int64",
          "example": 1462882101000
        },
        "actual_start_ms": {
          "description": "The time in Unix epoch milliseconds that the route actually started.",
          "type": "integer",
          "format": "int64",
          "example": 1462882098000
        },
        "driver_id": {
          "description": "ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.",
          "type": "integer",
          "format": "int64",
          "example": 555
        },
        "group_id": {
          "description": "Deprecated.",
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "name": {
          "description": "Descriptive name of this route.",
          "type": "string",
          "example": "Bid #123"
        },
        "notes": {
          "description": "Notes regarding the details of this route; maximum of 2000 characters; newline characters ('\\n')can be used for formatting.",
          "type": "string",
          "example": "Please make sure to confirm crate count at each stop on this route.\nTotal number of crates for route: 23."
        },
        "odometer_end_meters": {
          "description": "Odometer reading at the end of the route. Will not be returned if Route is not completed or if Odometer information is not available for the relevant vehicle.",
          "type": "integer",
          "format": "int64",
          "example": 2000000
        },
        "odometer_start_meters": {
          "description": "Odometer reading at the start of the route. Will not be returned if Route has not started or if Odometer information is not available for the relevant vehicle.",
          "type": "integer",
          "format": "int64",
          "example": 1000000
        },
        "scheduled_end_ms": {
          "description": "The time in Unix epoch milliseconds that the last job in the route is scheduled to end.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "scheduled_meters": {
          "description": "The distance expected to be traveled for this route in meters.",
          "type": "integer",
          "format": "int64",
          "example": 10000
        },
        "scheduled_start_ms": {
          "description": "The time in Unix epoch milliseconds that the route is scheduled to start.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "start_location_address": {
          "description": "The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.",
          "type": "string",
          "example": "123 Main St, Philadelphia, PA 19106"
        },
        "start_location_address_id": {
          "description": "ID of the start location associated with an address book entry. Optional if valid values are provided for start location address and latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.",
          "type": "integer",
          "format": "int64",
          "example": 67890
        },
        "start_location_lat": {
          "description": "Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 123.456
        },
        "start_location_lng": {
          "description": "Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 37.459
        },
        "start_location_name": {
          "description": "The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.",
          "type": "string",
          "example": "ACME Inc. Philadelphia HQ"
        },
        "trailer_id": {
          "description": "ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.",
          "type": "integer",
          "format": "int64",
          "example": 666
        },
        "vehicle_id": {
          "description": "ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.",
          "type": "integer",
          "format": "int64",
          "example": 444
        }
      }
    },
    "V1DispatchRouteCreate": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "dispatch_jobs"
          ],
          "properties": {
            "dispatch_jobs": {
              "description": "The dispatch jobs to create for this route.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/V1DispatchJobCreate"
              }
            }
          }
        },
        {
          "$ref": "#/definitions/V1DispatchRouteCreateBase"
        }
      ]
    },
    "V1DispatchRouteCreateBase": {
      "type": "object",
      "required": [
        "name",
        "scheduled_start_ms"
      ],
      "properties": {
        "driver_id": {
          "description": "ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.",
          "type": "integer",
          "format": "int64",
          "example": 555
        },
        "name": {
          "description": "Descriptive name of this route.",
          "type": "string",
          "example": "Bid #123"
        },
        "notes": {
          "description": "Notes regarding the details of this route; maximum of 2000 characters; newline characters ('\\n')can be used for formatting.",
          "type": "string",
          "example": "Please make sure to confirm crate count at each stop on this route.\nTotal number of crates for route: 23."
        },
        "scheduled_end_ms": {
          "description": "The time in Unix epoch milliseconds that the last job in the route is scheduled to end.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "scheduled_meters": {
          "description": "The distance expected to be traveled for this route in meters.",
          "type": "integer",
          "format": "int64",
          "example": 10000
        },
        "scheduled_start_ms": {
          "description": "The time in Unix epoch milliseconds that the route is scheduled to start.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "start_location_address": {
          "description": "The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.",
          "type": "string",
          "example": "123 Main St, Philadelphia, PA 19106"
        },
        "start_location_address_id": {
          "description": "ID of the start location associated with an address book entry. Optional if valid values are provided for start location address and latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.",
          "type": "integer",
          "format": "int64",
          "example": 67890
        },
        "start_location_lat": {
          "description": "Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 123.456
        },
        "start_location_lng": {
          "description": "Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.",
          "type": "number",
          "format": "double",
          "example": 37.459
        },
        "start_location_name": {
          "description": "The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.",
          "type": "string",
          "example": "ACME Inc. Philadelphia HQ"
        },
        "trailer_id": {
          "description": "ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.",
          "type": "integer",
          "format": "int64",
          "example": 666
        },
        "vehicle_id": {
          "description": "ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.",
          "type": "integer",
          "format": "int64",
          "example": 444
        }
      }
    },
    "V1DispatchRouteHistoricalEntry": {
      "type": "object",
      "properties": {
        "changed_at_ms": {
          "description": "Timestamp that the route was updated, represented as Unix milliseconds since epoch.",
          "type": "integer",
          "format": "int64",
          "example": 1499411220000
        },
        "route": {
          "$ref": "#/definitions/V1DispatchRoute"
        }
      }
    },
    "V1DispatchRouteHistory": {
      "type": "object",
      "properties": {
        "history": {
          "description": "History of the route's state changes.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1DispatchRouteHistoricalEntry"
          }
        }
      }
    },
    "V1DispatchRouteUpdate": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "dispatch_jobs"
          ],
          "properties": {
            "dispatch_jobs": {
              "description": "The dispatch jobs for the route.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/V1DispatchJobUpdate"
              }
            }
          }
        },
        {
          "$ref": "#/definitions/V1DispatchRouteUpdateBase"
        }
      ]
    },
    "V1DispatchRouteUpdateBase": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "description": "ID of route. This must match the route ID passed in URL.",
              "type": "integer",
              "format": "int64",
              "example": "42"
            }
          }
        },
        {
          "$ref": "#/definitions/V1DispatchRouteCreateBase"
        }
      ]
    },
    "V1DispatchRouteWithoutETA": {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "dispatch_jobs": {
              "description": "The dispatch jobs associated with this route.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/V1DispatchJobWithoutETA"
              }
            },
            "id": {
              "description": "ID of the Samsara dispatch route.",
              "type": "integer",
              "format": "int64",
              "example": 556
            }
          }
        },
        {
          "$ref": "#/definitions/V1DispatchRouteBase"
        }
      ]
    },
    "V1DispatchRoutes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/V1DispatchRouteWithoutETA"
      }
    },
    "V1Document": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "orgId",
            "driverId",
            "id",
            "driverCreatedAtMs",
            "serverCreatedAtMs",
            "serverUpdatedAtMs",
            "documentType",
            "vehicleId",
            "fields"
          ],
          "properties": {
            "documentType": {
              "description": "Name of the document type.",
              "type": "string",
              "example": "Fuel Receipt"
            },
            "driverCreatedAtMs": {
              "description": "The time in Unix epoch milliseconds that the document was created in the driver app.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "driverId": {
              "description": "ID of the driver for whom the document is submitted.",
              "type": "integer",
              "format": "int64",
              "example": 555
            },
            "fields": {
              "description": "The fields associated with this document.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/V1DocumentFetchFields"
              }
            },
            "id": {
              "description": "ID of the document.",
              "type": "string",
              "example": "2018_42424242"
            },
            "orgId": {
              "description": "Organization ID that the document belongs to.",
              "type": "integer",
              "format": "int64",
              "example": 555
            },
            "serverCreatedAtMs": {
              "description": "The time in Unix epoch milliseconds that the document was received by the server.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "serverUpdatedAtMs": {
              "description": "The time in Unix epoch milliseconds that the document was updated on the server.",
              "type": "integer",
              "format": "int64",
              "example": 1462881998034
            },
            "vehicleId": {
              "description": "ID of the vehicle the driver was signed into when the document was submitted. Will be `null` if the document `state` is `Required`.",
              "type": "integer",
              "format": "int64",
              "example": 222
            }
          }
        },
        {
          "$ref": "#/definitions/V1DocumentBase"
        }
      ]
    },
    "V1DocumentBase": {
      "type": "object",
      "required": [
        "dispatchJobId",
        "notes"
      ],
      "properties": {
        "dispatchJobId": {
          "description": "ID of the Samsara dispatch job for which the document is submitted.",
          "type": "integer",
          "format": "int64",
          "example": 773
        },
        "notes": {
          "description": "Notes submitted with this document.",
          "type": "string",
          "example": "Fueled up before delivery."
        },
        "state": {
          "description": "The condition of the document created for the driver. Can be either `Required` or `Submitted`. If no value is specified, `state` defaults to `Required`. `Required` documents are pre-populated documents for the Driver to fill out in the Driver App and have not yet been submitted. `Submitted` documents have been submitted by the driver in the Driver App.",
          "type": "string",
          "default": "Required",
          "enum": [
            "Required",
            "Submitted"
          ],
          "example": "Submitted"
        }
      }
    },
    "V1DocumentCreate": {
      "allOf": [
        {
          "description": "Arguments to create a document.",
          "type": "object",
          "required": [
            "documentTypeUuid",
            "fields"
          ],
          "properties": {
            "documentTypeUuid": {
              "description": "Universally unique identifier for the document type that this document is being created for.",
              "type": "string",
              "example": "4aff772c-a7bb-45e6-8e41-6a53e34feb83"
            },
            "fields": {
              "description": "List of fields for the document. The fields must be listed in the order that that they appear in the document type. Only `stringValue`, `numberValue`, `multipleChoiceValue`, and `dateTimeValue` fields are supported for document creation via the API.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/V1DocumentCreateFields"
              }
            }
          }
        },
        {
          "$ref": "#/definitions/V1DocumentCreateBase"
        }
      ]
    },
    "V1DocumentCreateBase": {
      "type": "object",
      "properties": {
        "dispatchJobId": {
          "description": "ID of the Samsara dispatch job for which the document is submitted.",
          "type": "integer",
          "format": "int64",
          "example": 773
        },
        "notes": {
          "description": "Notes submitted with this document.",
          "type": "string",
          "example": "Fueled up before delivery."
        },
        "state": {
          "description": "The condition of the document created for the driver. Can be either `Required` or `Submitted`. If no value is specified, `state` defaults to `Required`. `Required` documents are pre-populated documents for the Driver to fill out in the Driver App and have not yet been submitted. `Submitted` documents will show up as submitted by the driver through the driver app.",
          "type": "string",
          "default": "Required",
          "enum": [
            "Required",
            "Submitted"
          ],
          "example": "Required"
        }
      }
    },
    "V1DocumentCreateField": {
      "type": "object",
      "required": [
        "valueType"
      ],
      "properties": {
        "dateTimeValue": {
          "description": "The value of a `ValueType_DateTime` field.",
          "type": "object",
          "required": [
            "dateTimeMs"
          ],
          "properties": {
            "dateTimeMs": {
              "description": "The Unix epoch on milliseconds of this date time field.",
              "type": "integer",
              "format": "int64",
              "example": 10855639004823
            }
          }
        },
        "multipleChoiceValue": {
          "description": "The value of a `ValueType_MultipleChoice` field.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "selected": {
                "description": "Whether the multiple choice field is selected or not.",
                "type": "boolean"
              },
              "value": {
                "description": "The name of the multiple choice field.",
                "type": "string"
              }
            }
          }
        },
        "numberValue": {
          "description": "The value of a `ValueType_Number` field.",
          "type": "number",
          "format": "double",
          "example": 12.34
        },
        "stringValue": {
          "description": "The value of a `ValueType_String` field.",
          "type": "string",
          "example": "This is a string."
        },
        "valueType": {
          "description": "The type of this field.\nValid values: `ValueType_Number`, `ValueType_String`, `ValueType_MultipleChoice`, `ValueType_DateTime`.\nWhen creating documents via API, only `ValueType_Number`, `ValueType_String`, `ValueType_MultipleChoice`, and `ValueType_DateTime` are accepted.",
          "type": "string",
          "example": "ValueType_Number"
        }
      }
    },
    "V1DocumentCreateFields": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "label"
          ],
          "properties": {
            "label": {
              "description": "The name of the field.",
              "type": "string",
              "example": "Fuel Cost ($)"
            },
            "value": {
              "description": "Please use `stringValue`, `numberValue`, `multipleChoiceValue`, or `dateTimeValue`.",
              "example": "The field type corresponding to your field."
            }
          }
        },
        {
          "$ref": "#/definitions/V1DocumentCreateField"
        }
      ]
    },
    "V1DocumentFetchField": {
      "type": "object",
      "required": [
        "valueType"
      ],
      "properties": {
        "dateTimeValue": {
          "description": "The value of a `ValueType_DateTime` field.",
          "type": "object",
          "required": [
            "dateTimeMs"
          ],
          "properties": {
            "dateTimeMs": {
              "description": "The Unix epoch on milliseconds of this date time field.",
              "type": "integer",
              "format": "int64",
              "example": 10855639004823
            }
          }
        },
        "multipleChoiceValue": {
          "description": "The value of a `ValueType_MultipleChoice` field.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "selected": {
                "description": "Whether the multiple choice field is selected or not.",
                "type": "boolean"
              },
              "value": {
                "description": "The name of the multiple choice field.",
                "type": "string"
              }
            }
          },
          "example": [
            {
              "selected": false,
              "value": "option 1"
            },
            {
              "selected": true,
              "value": "option 2"
            }
          ]
        },
        "numberValue": {
          "description": "The value of a `ValueType_Number` field.",
          "type": "number",
          "format": "double",
          "example": 12.34
        },
        "photoValue": {
          "description": "The value of a `ValueType_Photo` field.",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "url": {
                "description": "A pre-signed URL to the selected photos that refreshes every 24 hours.",
                "type": "string",
                "example": "https://samsara-driver-media-upload.s3.us-west-2.amazonaws.com/123456"
              }
            }
          }
        },
        "signatureValue": {
          "description": "The value of a `ValueType_Signature` field.",
          "type": "object",
          "properties": {
            "name": {
              "description": "The name typed by the user when the signature was captured.",
              "type": "string",
              "example": "Samsara Owl"
            },
            "signedAtMs": {
              "description": "The timestamp when the signature was captured.",
              "type": "integer",
              "format": "int64",
              "example": 1584816363025
            },
            "url": {
              "description": "A pre-signed URL to the captured signature PNG that refreshes every 24 hours.",
              "type": "string",
              "example": "https://samsara-driver-media-upload.s3.us-west-2.amazonaws.com/123456"
            }
          }
        },
        "stringValue": {
          "description": "The value of a `ValueType_String` field.",
          "type": "string",
          "example": "This is a string."
        },
        "valueType": {
          "description": "The type of this field.\nValid values: `ValueType_Number`, `ValueType_String`, `ValueType_Photo`, `ValueType_MultipleChoice`, `ValueType_Signature`, `ValueType_DateTime`.\nWhen creating documents via API, only `ValueType_Number`, `ValueType_String`, `ValueType_MultipleChoice`, and `ValueType_DateTime` are accepted.",
          "type": "string",
          "example": "ValueType_Number"
        }
      }
    },
    "V1DocumentFetchFields": {
      "allOf": [
        {
          "type": "object",
          "required": [
            "label"
          ],
          "properties": {
            "label": {
              "description": "The name of the field.",
              "type": "string",
              "example": "Fuel Cost ($)"
            },
            "value": {
              "description": "Please use `stringValue`, `numberValue`, `photoValue`, `multipleChoiceValue`, `signatureValue`, or `dateTimeValue`.",
              "example": "The field type corresponding to your field."
            }
          }
        },
        {
          "$ref": "#/definitions/V1DocumentFetchField"
        }
      ]
    },
    "V1DocumentFieldType": {
      "type": "object",
      "required": [
        "label",
        "valueType"
      ],
      "properties": {
        "label": {
          "description": "Name of this field type.",
          "type": "string",
          "example": "Fuel Cost ($)"
        },
        "multipleChoiceValueTypeMetadata": {
          "description": "Metadata about the multiple choice value. Only present for value type `ValueType_MultipleChoice`.",
          "type": "object",
          "properties": {
            "multipleChoiceOptionLabels": {
              "description": "The labels for the multiple choice options.",
              "type": "object",
              "properties": {
                "label": {
                  "description": "The lable for the multiple choice option",
                  "type": "string",
                  "example": "Loaded"
                }
              }
            }
          }
        },
        "numberValueTypeMetadata": {
          "description": "Metadata about the numeric value type. Only present for value type `ValueType_Number`.",
          "type": "object",
          "properties": {
            "numDecimalPlaces": {
              "description": "The number of decimal places this value type can have.",
              "type": "number",
              "format": "int64",
              "example": 2
            }
          }
        },
        "signatureValueTypeMetadata": {
          "description": "Metadata about the signature value type. Only present for value type `ValueType_Signature`.",
          "type": "object",
          "properties": {
            "legalText": {
              "description": "The legal text associated with this signature.",
              "type": "string"
            }
          }
        },
        "valueType": {
          "description": "The type of value this field can have.\nValid values: `ValueType_Number`, `ValueType_String`, `ValueType_Photo`, `ValueType_MultipleChoice`, `ValueType_Signature`, `ValueType_DateTime`.",
          "type": "string",
          "example": "ValueType_Number"
        }
      }
    },
    "V1DocumentType": {
      "type": "object",
      "required": [
        "orgId",
        "uuid",
        "fieldTypes"
      ],
      "properties": {
        "fieldTypes": {
          "description": "The fields associated with this document type.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1DocumentFieldType"
          }
        },
        "name": {
          "description": "Name of the document type.",
          "type": "string",
          "example": "Fuel Receipt"
        },
        "orgId": {
          "description": "ID for the organization this document belongs to.",
          "type": "integer",
          "format": "int64",
          "example": 773
        },
        "uuid": {
          "description": "Universally unique identifier for the document type. Can be passed in as the `documentTypeUuid` when creating a document for this document type.",
          "type": "string",
          "example": "4aff772c-a7bb-45e6-8e41-6a53e34feb83"
        }
      }
    },
    "V1DocumentTypes": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/V1DocumentType"
      }
    },
    "V1Documents": {
      "description": "List of documents.",
      "type": "object",
      "properties": {
        "driverDocuments": {
          "description": "List of documents.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1Document"
          }
        }
      }
    },
    "V1DoorResponse": {
      "description": "Contains the current door status of a sensor.",
      "type": "object",
      "properties": {
        "groupId": {
          "description": "Deprecated.",
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "sensors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "doorClosed": {
                "description": "Flag indicating whether the current door is closed or open.",
                "type": "boolean",
                "example": true
              },
              "doorStatusTime": {
                "description": "The timestamp of reported door status, specified in RFC 3339 time.",
                "type": "string",
                "example": "2019-04-17T16:42:55Z"
              },
              "id": {
                "description": "ID of the sensor.",
                "type": "integer",
                "format": "int64",
                "example": 122
              },
              "name": {
                "description": "Name of the sensor.",
                "type": "string",
                "example": "Trailer Door V1Sensor"
              },
              "trailerId": {
                "description": "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 123
              },
              "vehicleId": {
                "description": "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 124
              }
            }
          }
        }
      }
    },
    "V1DriverDailyLogResponse": {
      "type": "object",
      "properties": {
        "days": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "activeHours": {
                "description": "Hours spent on duty or driving, rounded to two decimal places.",
                "type": "number",
                "format": "double",
                "example": 5.4
              },
              "activeMs": {
                "description": "Milliseconds spent on duty or driving.",
                "type": "integer",
                "format": "int64",
                "example": 691200
              },
              "certified": {
                "description": "Whether this HOS day chart was certified by the driver.",
                "type": "boolean"
              },
              "certifiedAtMs": {
                "description": "Unix epoch time (in ms) of time when this chart was certified. If this chart is uncertified, 0.",
                "type": "number",
                "format": "int64"
              },
              "distanceMiles": {
                "description": "Distance driven in miles, rounded to two decimal places.",
                "type": "number",
                "format": "double",
                "example": 123.24
              },
              "endMs": {
                "description": "End of the HOS day, specified in milliseconds UNIX time.",
                "type": "integer",
                "example": 1473836400000
              },
              "shippingDocIds": {
                "description": "List of customer shipping document IDs associated with the driver for the day.",
                "type": "object",
                "format": "int64",
                "example": [
                  14334,
                  104920
                ]
              },
              "startMs": {
                "description": "End of the HOS day, specified in milliseconds UNIX time.",
                "type": "integer",
                "example": 1473750000000
              },
              "trailerIds": {
                "description": "List of trailer ID's associated with the driver for the day.",
                "type": "object",
                "format": "int64",
                "example": [
                  10293,
                  192933
                ]
              },
              "vehicleIds": {
                "description": "List of vehicle ID's associated with the driver for the day.",
                "type": "object",
                "format": "int64",
                "example": [
                  192319,
                  12958
                ]
              }
            }
          }
        }
      }
    },
    "V1DriverSafetyScoreResponse": {
      "description": "Safety score details for a driver",
      "type": "object",
      "properties": {
        "crashCount": {
          "description": "Crash event count",
          "type": "integer",
          "example": 0
        },
        "driverId": {
          "description": "Driver ID",
          "type": "integer",
          "example": 1234
        },
        "harshAccelCount": {
          "description": "Harsh acceleration event count",
          "type": "integer",
          "example": 1
        },
        "harshBrakingCount": {
          "description": "Harsh braking event count",
          "type": "integer",
          "example": 2
        },
        "harshEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1SafetyReportHarshEvent"
          }
        },
        "harshTurningCount": {
          "description": "Harsh turning event count",
          "type": "integer",
          "example": 0
        },
        "safetyScore": {
          "description": "Safety Score",
          "type": "integer",
          "example": 97
        },
        "safetyScoreRank": {
          "description": "Safety Score Rank",
          "type": "string",
          "example": "26"
        },
        "timeOverSpeedLimitMs": {
          "description": "Amount of time driven over the speed limit in milliseconds",
          "type": "integer",
          "example": 3769
        },
        "totalDistanceDrivenMeters": {
          "description": "Total distance driven in meters",
          "type": "integer",
          "example": 291836
        },
        "totalHarshEventCount": {
          "description": "Total harsh event count",
          "type": "integer",
          "example": 3
        },
        "totalTimeDrivenMs": {
          "description": "Amount of time driven in milliseconds",
          "type": "integer",
          "example": 19708293
        }
      }
    },
    "V1DvirBase": {
      "type": "object",
      "properties": {
        "authorSignature": {
          "description": "The authors signature for the DVIR.",
          "type": "object",
          "properties": {
            "driverId": {
              "description": "ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.",
              "type": "integer",
              "format": "int64",
              "example": 2581
            },
            "email": {
              "description": "Email of the  driver|mechanic who signed the DVIR.",
              "type": "string",
              "example": "j.smith@yahoo.com"
            },
            "mechanicUserId": {
              "description": "ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.",
              "type": "integer",
              "format": "int64",
              "example": 14849
            },
            "name": {
              "description": "The name of the driver or mechanic who signed the DVIR.",
              "type": "string",
              "example": "John Smith"
            },
            "signedAt": {
              "description": "The time in millis when the DVIR was signed",
              "type": "integer",
              "format": "int64",
              "example": 12535500000
            },
            "type": {
              "description": "Type corresponds to whether the signature corresponds to driver|mechanic.",
              "type": "string",
              "example": "driver"
            },
            "username": {
              "description": "Username of the  driver|mechanic who signed the DVIR.",
              "type": "string",
              "example": "jsmith"
            }
          }
        },
        "defectsCorrected": {
          "description": "Signifies if the defects on the vehicle corrected after the DVIR is done.",
          "type": "boolean",
          "example": true
        },
        "defectsNeedNotBeCorrected": {
          "description": "Signifies if the defects on this vehicle can be ignored.",
          "type": "boolean",
          "example": false
        },
        "id": {
          "description": "The id of this DVIR record.",
          "type": "integer",
          "format": "int64",
          "example": 19
        },
        "inspectionType": {
          "description": "Inspection type of the DVIR.",
          "type": "string",
          "example": "pre trip"
        },
        "mechanicNotes": {
          "description": "The mechanics notes on the DVIR.",
          "type": "string",
          "example": "The vehicle is now safe."
        },
        "mechanicOrAgentSignature": {
          "description": "The mechanic's or agent's signature for the DVIR.",
          "type": "object",
          "properties": {
            "driverId": {
              "description": "ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.",
              "type": "integer",
              "format": "int64",
              "example": 2581
            },
            "email": {
              "description": "Email of the  agent|mechanic who signed the DVIR.",
              "type": "string",
              "example": "j.smith@yahoo.com"
            },
            "mechanicUserId": {
              "description": "ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.",
              "type": "integer",
              "format": "int64",
              "example": 14849
            },
            "name": {
              "description": "The name of the agent or mechanic who signed the DVIR.",
              "type": "string",
              "example": "John Smith"
            },
            "signedAt": {
              "description": "The time in millis when the DVIR was signed",
              "type": "integer",
              "format": "int64",
              "example": 12535500000
            },
            "type": {
              "description": "Type corresponds to whether the signature corresponds to driver|mechanic.",
              "type": "string",
              "example": "driver"
            },
            "username": {
              "description": "Username of the  agent|mechanic who signed the DVIR.",
              "type": "string",
              "example": "jsmith"
            }
          }
        },
        "nextDriverSignature": {
          "description": "The next driver signature for the DVIR.",
          "type": "object",
          "properties": {
            "driverId": {
              "description": "ID of the driver who signed the DVIR",
              "type": "integer",
              "format": "int64",
              "example": 2581
            },
            "email": {
              "description": "Email of the  driver who signed the next DVIR on this vehicle.",
              "type": "string",
              "example": "j.smith@yahoo.com"
            },
            "name": {
              "description": "The name of the driver who signed the next DVIR on this vehicle.",
              "type": "string",
              "example": "John Smith"
            },
            "signedAt": {
              "description": "The time in millis when the next driver signed the DVIR on this vehicle.",
              "type": "integer",
              "format": "int64",
              "example": 12535500000
            },
            "type": {
              "description": "Type corresponds to driver.",
              "type": "string",
              "example": "driver"
            },
            "username": {
              "description": "Username of the  driver who signed the next DVIR on this vehicle.",
              "type": "string",
              "example": "jsmith"
            }
          }
        },
        "odometerMiles": {
          "description": "The odometer reading in miles for the vehicle when the DVIR was done.",
          "type": "integer",
          "format": "int64",
          "example": 49912
        },
        "startedAtMs": {
          "description": "Timestamp when driver began filling out this DVIR, in UNIX milliseconds.",
          "type": "integer",
          "format": "int64",
          "example": 1453449599999
        },
        "timeMs": {
          "description": "Timestamp of when this DVIR was signed \u0026 completed, in UNIX milliseconds.",
          "type": "integer",
          "format": "int64",
          "example": 1453449599999
        },
        "trailerDefects": {
          "description": "Defects registered for the trailer which was part of the DVIR.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1DvirDefectBase"
          }
        },
        "trailerId": {
          "description": "The id of the trailer which was part of the DVIR.",
          "type": "integer",
          "example": 19
        },
        "trailerName": {
          "description": "The name of the trailer which was part of the DVIR.",
          "type": "string",
          "example": "Storer's Trailer 19"
        },
        "vehicle": {
          "description": "The vehicle on which DVIR was done.",
          "type": "object",
          "properties": {
            "id": {
              "description": "The vehicle id on which DVIR was done.",
              "type": "integer",
              "format": "int64",
              "example": 19
            },
            "name": {
              "description": "The vehicle on which DVIR was done.",
              "type": "string",
              "example": "Storer's vehicle 19"
            }
          }
        },
        "vehicleCondition": {
          "description": "The condition of vechile on which DVIR was done.",
          "type": "string",
          "example": "SATISFACTORY"
        },
        "vehicleDefects": {
          "description": "Defects registered for the vehicle which was part of the DVIR.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1DvirDefectBase"
          }
        }
      }
    },
    "V1DvirDefectBase": {
      "type": "object",
      "properties": {
        "comment": {
          "description": "The comment describing the type of DVIR defect.",
          "type": "string",
          "example": "Air Compressor not working"
        },
        "defectType": {
          "description": "The type of DVIR defect. Possible values: [`AIR_COMPRESSOR`, `AIR_CONDITIONER`, `AIR_LINES`, `BATTERY`, `BELTS_HOSES`, `BRAKE_ACCESSORIES`, `BRAKE_CHECK`, `BRAKE_CONNECTIONS`, `BRAKES`, `CLUTCH`, `COUPLING_DEVICES`, `DEFROSTER_HEATER`, `DOORS`, `DRIVE_LINE`, `EMERGENCY_DOOR_AND_BUZZER`, `ENGINE`, `ENTRANCE_STEPS`, `EXHAUST`, `FIFTH_WHEEL`, `FIRST_AID_KIT`, `FLUID_LEVELS`, `FRAME_ASSEMBLY`, `FRONT_AXLE`, `FUEL_TANKS`, `HORN`, `INTERIOR_AND_FLOOR`, `LANDING_GEAR`, `LIGHTS`, `MIRRORS`, `MUFFLER`, `OIL_PRESSURE`, `OTHER`, `RADIATOR`, `REAR_END`, `REFLECTORS`, `ROOF`, `SAFETY_EQUIPMENT`, `STARTER`, `STEERING`, `STOP_ARM_CONTROL`, `STOP_ARM`, `SUSPENSION`, `TIRE_CHAINS`, `TIRES`, `TRANSMISSION`, `TRIP_RECORDER`, `WHEELS_RIMS`, `WINDOWS`, `WINDSHIELD_WIPERS`, `UNSET`]",
          "type": "string",
          "example": "AIR_COMPRESSOR"
        },
        "id": {
          "description": "The id of this defect.",
          "type": "integer",
          "format": "int64",
          "example": 18
        },
        "resolved": {
          "description": "Signifies if this defect is resolved.",
          "type": "boolean",
          "example": true
        },
        "resolvedAt": {
          "description": "Timestamp when this defect was resolved, in UNIX milliseconds.  Will not be returned if the defect is unresolved.",
          "type": "integer",
          "format": "int64",
          "example": 1453449599999
        },
        "resolvedByDriverId": {
          "description": "ID of the driver who resolved this defect. Will not be returned if the defect is unresolved or resolvedByMechanicId is returned.",
          "type": "integer",
          "format": "int64",
          "example": 2581
        },
        "resolvedByMechanicId": {
          "description": "ID of the mechanic who resolved this defect. Will not be returned if the defect is unresolved or resolvedByDriverId is returned.",
          "type": "integer",
          "format": "int64",
          "example": 14849
        }
      }
    },
    "V1DvirListResponse": {
      "type": "object",
      "properties": {
        "dvirs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1DvirBase"
          }
        }
      }
    },
    "V1ErrorResponse": {
      "description": "Error message describing why the request failed.",
      "type": "string"
    },
    "V1FleetVehicleLocation": {
      "description": "Contains the location and speed of a vehicle at a particular time",
      "type": "object",
      "properties": {
        "latitude": {
          "description": "The latitude of the location in degrees.",
          "type": "number",
          "format": "double",
          "example": 37.2
        },
        "location": {
          "description": "The best effort (street,city,state) for the latitude and longitude.",
          "type": "string",
          "example": "525 York, San Francisco, CA"
        },
        "longitude": {
          "description": "The longitude of the location in degrees.",
          "type": "number",
          "format": "double",
          "example": -122.5
        },
        "speedMilesPerHour": {
          "description": "The speed calculated from GPS that the asset was traveling at in miles per hour.",
          "type": "number",
          "format": "double",
          "example": 35.2
        },
        "timeMs": {
          "description": "Time in Unix milliseconds since epoch when the asset was at the location.",
          "type": "number",
          "format": "int64",
          "example": 1535586471332
        }
      }
    },
    "V1FleetVehicleLocations": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/V1FleetVehicleLocation"
      }
    },
    "V1FleetVehiclesLocations": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "description": "ID of the vehicle.",
            "type": "integer",
            "format": "int64",
            "example": 112
          },
          "locations": {
            "$ref": "#/definitions/V1FleetVehicleLocations"
          },
          "name": {
            "description": "Name of the vehicle.",
            "type": "string",
            "example": "Truck A7"
          }
        }
      }
    },
    "V1HosAuthenticationLogsResponse": {
      "type": "object",
      "properties": {
        "authenticationLogs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "actionType": {
                "description": "The log type - one of 'signin' or 'signout'",
                "type": "string",
                "example": "signin"
              },
              "address": {
                "description": "DEPRECATED: THIS FIELD MAY NOT BE POPULATED",
                "type": "string",
                "example": "THIS FIELD MAY NOT BE POPULATED"
              },
              "addressName": {
                "description": "DEPRECATED: THIS FIELD MAY NOT BE POPULATED",
                "type": "string",
                "example": "THIS FIELD MAY NOT BE POPULATED"
              },
              "city": {
                "description": "DEPRECATED: THIS FIELD MAY NOT BE POPULATED",
                "type": "string",
                "example": "THIS FIELD MAY NOT BE POPULATED"
              },
              "happenedAtMs": {
                "description": "The time at which the event was recorded in UNIX milliseconds.",
                "type": "integer",
                "format": "int64",
                "example": 1462881998034
              },
              "state": {
                "description": "DEPRECATED: THIS FIELD MAY NOT BE POPULATED",
                "type": "string",
                "example": "THIS FIELD MAY NOT BE POPULATED"
              }
            }
          }
        }
      }
    },
    "V1HosLogsResponse": {
      "type": "object",
      "properties": {
        "logs": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "codriverIds": {
                "type": "array",
                "items": {
                  "description": "Ids of codrivers during any of the logged trips",
                  "type": "number",
                  "example": 445
                }
              },
              "driverId": {
                "description": "ID of the driver.",
                "type": "integer",
                "format": "int64",
                "example": 444
              },
              "groupId": {
                "description": "Deprecated.",
                "type": "integer",
                "format": "int64",
                "example": 101
              },
              "hosStatusType": {
                "description": "The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.",
                "type": "string",
                "example": "OFF_DUTY"
              },
              "locCity": {
                "description": "City in which the log was recorded.",
                "type": "string",
                "example": "Ahwatukee"
              },
              "locLat": {
                "description": "Latitude at which the log was recorded.",
                "type": "number",
                "format": "float",
                "example": 23.413702345
              },
              "locLng": {
                "description": "Longitude at which the log was recorded.",
                "type": "number",
                "format": "float",
                "example": -98.502888123
              },
              "locName": {
                "description": "Name of location at which the log was recorded.",
                "type": "string",
                "example": "McLean Site A"
              },
              "locState": {
                "description": "State in which the log was recorded.",
                "type": "string",
                "example": "Arizona"
              },
              "logStartMs": {
                "description": "The time at which the log/HOS status started in UNIX milliseconds.",
                "type": "integer",
                "format": "int64",
                "example": 1462881998034
              },
              "remark": {
                "description": "Remark associated with the log entry.",
                "type": "string",
                "example": "Lunch Break"
              },
              "vehicleId": {
                "description": "ID of the vehicle.",
                "type": "integer",
                "format": "int64",
                "example": 112
              }
            }
          }
        }
      }
    },
    "V1HosLogsSummaryResponse": {
      "type": "object",
      "properties": {
        "drivers": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "currentDutyStatusCode": {
                "description": "The Hours of Service status type.",
                "type": "string",
                "enum": [
                  "AUTO_DUTY",
                  "DRIVING",
                  "OFF_DUTY",
                  "ON_DUTY",
                  "PERSONAL_CONVEYANCE",
                  "SLEEPER_BED",
                  "YARD_MOVE",
                  "WAITING_TIME"
                ],
                "example": "OFF_DUTY"
              },
              "cycleRemaining": {
                "description": "The amount of remaining cycle time (in ms).",
                "type": "integer",
                "format": "int64",
                "example": 252000000
              },
              "cycleTomorrow": {
                "description": "The amount of cycle time (in ms) available tomorrow.",
                "type": "integer",
                "format": "int64",
                "example": 252000000
              },
              "driveMsToday": {
                "description": "The amount of driving time today (in ms).",
                "type": "number",
                "format": "int64",
                "example": 252000000
              },
              "driverId": {
                "description": "ID of the driver.",
                "type": "integer",
                "format": "int64",
                "example": 444
              },
              "driverName": {
                "description": "Name of the driver.",
                "type": "string",
                "example": "Fred Jacobs"
              },
              "drivingInViolationCycle": {
                "description": "The amount of driving time in violation in this cycle (in ms).",
                "type": "integer",
                "format": "int64",
                "example": 50400000
              },
              "drivingInViolationToday": {
                "description": "The amount of driving time in violation today (in ms).",
                "type": "integer",
                "format": "int64",
                "example": 39600000
              },
              "onDutyMsToday": {
                "description": "The amount of on duty time today (in ms).",
                "type": "number",
                "format": "int64",
                "example": 252000000
              },
              "pendingDriveMsToday": {
                "description": "The amount of driving time today for pending logs (in ms).",
                "type": "number",
                "format": "int64",
                "example": 252000000
              },
              "pendingOnDutyMsToday": {
                "description": "The amount of on duty time today for pending logs (in ms).",
                "type": "number",
                "format": "int64",
                "example": 252000000
              },
              "shiftDriveRemaining": {
                "description": "The amount of remaining shift drive time (in ms).",
                "type": "integer",
                "format": "int64",
                "example": 39600000
              },
              "shiftRemaining": {
                "description": "The amount of remaining shift time (in ms).",
                "type": "integer",
                "format": "int64",
                "example": 50400000
              },
              "timeInCurrentStatus": {
                "description": "The amount of time (in ms) that the driver has been in the current `dutyStatus`.",
                "type": "integer",
                "format": "int64",
                "example": 5000
              },
              "timeUntilBreak": {
                "description": "The amount of time (in ms) remaining until the driver cannot drive without a rest break.",
                "type": "integer",
                "format": "int64",
                "example": 28800000
              },
              "vehicleName": {
                "description": "Name of the vehicle.",
                "type": "string",
                "example": "Vehicle 1"
              }
            }
          }
        },
        "pagination": {
          "type": "object",
          "required": [
            "hasNextPage",
            "endCursor"
          ],
          "properties": {
            "endCursor": {
              "description": "Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'after' query parameter.",
              "type": "string",
              "example": "MTA1MDc5MB=="
            },
            "hasNextPage": {
              "description": "True if there are more pages of results after this response.",
              "type": "boolean"
            }
          }
        }
      }
    },
    "V1HumidityResponse": {
      "description": "Contains the current humidity of a sensor.",
      "type": "object",
      "properties": {
        "groupId": {
          "description": "Deprecated.",
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "sensors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "humidity": {
                "description": "Currently reported relative humidity in percent, from 0-100.",
                "type": "integer",
                "example": 53
              },
              "humidityTime": {
                "description": "The timestamp of reported relative humidity, specified in RFC 3339 time.",
                "type": "string",
                "example": "2019-04-17T16:42:55Z"
              },
              "id": {
                "description": "ID of the sensor.",
                "type": "integer",
                "format": "int64",
                "example": 122
              },
              "name": {
                "description": "Name of the sensor.",
                "type": "string",
                "example": "Freezer Humidity V1Sensor"
              },
              "trailerId": {
                "description": "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 123
              },
              "vehicleId": {
                "description": "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 124
              }
            }
          }
        }
      }
    },
    "V1Machine": {
      "description": "Contains information about a machine.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID of the machine.",
          "type": "integer",
          "format": "int64",
          "example": 123
        },
        "name": {
          "description": "Name of the machine.",
          "type": "string",
          "example": "Freezer ABC"
        },
        "notes": {
          "description": "Notes about the machine",
          "type": "string",
          "example": "This is in the left hallway behind the conveyor belt"
        }
      }
    },
    "V1MachineHistoryResponse": {
      "description": "Contains the results for a machine history request",
      "type": "object",
      "properties": {
        "machines": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "id": {
                "description": "Machine ID",
                "type": "integer",
                "example": 1
              },
              "name": {
                "description": "Machine name",
                "type": "string",
                "example": "1/3 HP Motor"
              },
              "vibrations": {
                "description": "List of vibration datapoints, with timestamp and vibration measurement for x/y/z axis in mm/s",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "X": {
                      "type": "number",
                      "format": "double",
                      "example": 0.01
                    },
                    "Y": {
                      "type": "number",
                      "format": "double",
                      "example": 1.23
                    },
                    "Z": {
                      "type": "number",
                      "format": "double",
                      "example": 2.55
                    },
                    "time": {
                      "type": "integer",
                      "format": "int64",
                      "example": 1453449599999
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "V1Message": {
      "type": "object",
      "required": [
        "driverId",
        "text"
      ],
      "properties": {
        "driverId": {
          "description": "ID of the driver for whom the message is sent to or sent by.",
          "type": "integer",
          "format": "int64",
          "example": 555
        },
        "text": {
          "description": "The text sent in the message.",
          "type": "string",
          "example": "This is a message."
        }
      }
    },
    "V1MessageResponse": {
      "type": "object",
      "required": [
        "driverId",
        "text",
        "sentAtMs",
        "sender",
        "isRead"
      ],
      "properties": {
        "driverId": {
          "description": "ID of the driver for whom the message is sent to or sent by.",
          "type": "integer",
          "format": "int64",
          "example": 555
        },
        "isRead": {
          "description": "True if the message was read by the recipient.",
          "type": "boolean",
          "example": true
        },
        "sender": {
          "$ref": "#/definitions/V1MessageSender"
        },
        "sentAtMs": {
          "description": "The time in Unix epoch milliseconds that the message is sent to the recipient.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "text": {
          "description": "The text sent in the message.",
          "type": "string",
          "example": "This is a message."
        }
      }
    },
    "V1MessageSender": {
      "type": "object",
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "name": {
          "description": "Name of user that is sending the message.",
          "type": "string",
          "example": "John Doe"
        },
        "type": {
          "description": "Type of user that is sending the message. It will be either dispatch or driver.",
          "type": "string",
          "example": "dispatch"
        }
      }
    },
    "V1Messages": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/V1Message"
      }
    },
    "V1MessagesResponse": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/V1MessageResponse"
      }
    },
    "V1Pagination": {
      "type": "object",
      "required": [
        "hasNextPage",
        "hasPrevPage",
        "startCursor",
        "endCursor"
      ],
      "properties": {
        "endCursor": {
          "description": "Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'startingAfter' query parameter.",
          "type": "string",
          "example": "MTU5MTEzNjA2OTU0MzQ3"
        },
        "hasNextPage": {
          "description": "True if there are more pages of results after this response.",
          "type": "boolean"
        },
        "hasPrevPage": {
          "description": "True if there are more pages of results before this response.",
          "type": "boolean"
        },
        "startCursor": {
          "description": "Cursor identifier representing the first element in the response. This value should be used in conjunction with a subsequent request's 'ending_before' query parameter.",
          "type": "string",
          "example": "MTU5MTEzNjA2OTU0MzQ3"
        }
      }
    },
    "V1ProgramsForTheCameraResponse": {
      "description": "Contains the list of Programs configured on the given Camera.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "programId": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "programName": {
            "type": "string",
            "example": "Barcode verification program"
          }
        }
      }
    },
    "V1SafetyReportHarshEvent": {
      "description": "List of harsh events",
      "type": "object",
      "properties": {
        "harshEventType": {
          "description": "Type of the harsh event",
          "type": "string",
          "example": "Harsh Braking"
        },
        "timestampMs": {
          "description": "Timestamp that the harsh event occurred in Unix milliseconds since epoch",
          "type": "integer",
          "example": 1535590776000
        },
        "vehicleId": {
          "description": "Vehicle associated with the harsh event",
          "type": "integer",
          "example": 212014918086169
        }
      }
    },
    "V1Sensor": {
      "description": "Contains information about a sensor.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID of the sensor.",
          "type": "integer",
          "format": "int64",
          "example": 123
        },
        "macAddress": {
          "description": "MAC address of the sensor.",
          "type": "string",
          "example": "11:11:11:11:11:11"
        },
        "name": {
          "description": "Name of the sensor.",
          "type": "string",
          "example": "Freezer ABC"
        }
      }
    },
    "V1SensorHistoryResponse": {
      "description": "Contains the results for a sensor history request. Each result contains a timestamp and datapoint for each requested (sensor, field) pair.",
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "series": {
                "description": "List of datapoints, one for each requested (sensor, field) pair.",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                }
              },
              "timeMs": {
                "description": "Timestamp in UNIX milliseconds.",
                "type": "integer",
                "example": 1453449599999
              }
            }
          }
        }
      }
    },
    "V1TemperatureResponse": {
      "description": "Contains the current temperatures of a sensor.",
      "type": "object",
      "properties": {
        "groupId": {
          "description": "Deprecated.",
          "type": "integer",
          "format": "int64",
          "example": 101
        },
        "sensors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "ambientTemperature": {
                "description": "Currently reported ambient temperature in millidegrees celsius.",
                "type": "integer",
                "example": 11057
              },
              "ambientTemperatureTime": {
                "description": "The timestamp of reported ambient temperature, specified in RFC 3339 time.",
                "type": "string",
                "example": "2019-04-17T16:42:55Z"
              },
              "id": {
                "description": "ID of the sensor.",
                "type": "integer",
                "format": "int64",
                "example": 122
              },
              "name": {
                "description": "Name of the sensor.",
                "type": "string",
                "example": "Freezer Temp V1Sensor"
              },
              "probeTemperature": {
                "description": "Currently reported probe temperature in millidegrees celsius. If no probe is connected, this parameter will not be reported.",
                "type": "integer",
                "example": -20145
              },
              "probeTemperatureTime": {
                "description": "The timestamp of reported probe temperature, specified in RFC 3339 time.",
                "type": "string",
                "example": "2019-04-17T16:42:55Z"
              },
              "trailerId": {
                "description": "ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 123
              },
              "vehicleId": {
                "description": "ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.",
                "type": "integer",
                "example": 124
              }
            }
          }
        }
      }
    },
    "V1TrailerAssignmentResponse": {
      "type": "object",
      "properties": {
        "driverId": {
          "description": "The ID of the driver associated with this trailer.",
          "type": "integer",
          "format": "int64",
          "example": 2047
        },
        "endMs": {
          "description": "The time at which the driver ended the assignment. If the assignment is current, this value will be omitted.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "startMs": {
          "description": "The time at which the driver started the assignment",
          "type": "integer",
          "format": "int64",
          "example": 1462878398034
        }
      }
    },
    "V1TrailerAssignmentsResponse": {
      "allOf": [
        {
          "$ref": "#/definitions/V1TrailerBase"
        },
        {
          "type": "object",
          "properties": {
            "trailerAssignments": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/V1TrailerAssignmentResponse"
              }
            }
          }
        }
      ]
    },
    "V1TrailerBase": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "description": "ID of the trailer",
          "type": "integer",
          "format": "int64",
          "example": 2041
        },
        "name": {
          "description": "Assignment trailer name (given when creating trailer via the trailer portal)",
          "type": "string",
          "format": "string",
          "example": "myTrailer"
        }
      }
    },
    "V1TripResponse": {
      "description": "Contains the trips for the vehicle in the requested timeframe. A trip is represented as an object that contains startMs, startLocation, startAddress, startCoordinates, endMs, endLocation, endAddress and endCoordinates. Ongoing trips will be returned with 9223372036854775807 as their endMs.",
      "type": "object",
      "properties": {
        "trips": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "assetIds": {
                "description": "List of associated asset IDs",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                },
                "example": [
                  122
                ]
              },
              "codriverIds": {
                "description": "List of codriver IDs",
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                },
                "example": [
                  122
                ]
              },
              "distanceMeters": {
                "description": "Length of the trip in meters. This value is calculated from the GPS data collected by the Samsara Vehicle Gateway.",
                "type": "integer",
                "example": 2500
              },
              "driverId": {
                "description": "ID of the driver.",
                "type": "integer",
                "example": 719
              },
              "endAddress": {
                "description": "Text representation of nearest identifiable location to the end (latitude, longitude) coordinates.",
                "type": "object",
                "properties": {
                  "address": {
                    "description": "The formatted address",
                    "type": "string",
                    "example": "123 Main St, Sunnyvale, CA 94089"
                  },
                  "id": {
                    "description": "The ID of the address",
                    "type": "number",
                    "format": "int64",
                    "example": 581
                  },
                  "name": {
                    "description": "The name of the address",
                    "type": "string",
                    "example": "Ramen Tatsunoya"
                  }
                }
              },
              "endCoordinates": {
                "description": "End (latitude, longitude) in decimal degrees.",
                "type": "object",
                "properties": {
                  "latitude": {
                    "type": "number",
                    "format": "double",
                    "example": 23.413702345
                  },
                  "longitude": {
                    "type": "number",
                    "format": "double",
                    "example": -91.502888123
                  }
                }
              },
              "endLocation": {
                "description": "Geocoded street address of start (latitude, longitude) coordinates.",
                "type": "string",
                "example": "571 S Lake Ave, Pasadena, CA 91101"
              },
              "endMs": {
                "description": "End of the trip in UNIX milliseconds. Ongoing trips are indicated by an endMs value of 9223372036854775807.",
                "type": "integer",
                "example": 1462881998034
              },
              "endOdometer": {
                "description": "Odometer reading (in meters) at the end of the trip. This is read from the vehicle's on-board diagnostics. If Samsara cannot read the vehicle's odometer values from on-board diagnostics, this value will be 0.",
                "type": "integer",
                "example": 210430500
              },
              "fuelConsumedMl": {
                "description": "Amount in milliliters of fuel consumed on this trip.",
                "type": "integer",
                "example": 75700
              },
              "startAddress": {
                "description": "Text representation of nearest identifiable location to the start (latitude, longitude) coordinates.",
                "type": "object",
                "properties": {
                  "address": {
                    "description": "The formatted address",
                    "type": "string",
                    "example": "123 Main St, Sunnyvale, CA 94089"
                  },
                  "id": {
                    "description": "The ID of the address",
                    "type": "number",
                    "format": "int64",
                    "example": 581
                  },
                  "name": {
                    "description": "The name of the address",
                    "type": "string",
                    "example": "Ramen Tatsunoya"
                  }
                }
              },
              "startCoordinates": {
                "description": "Start (latitude, longitude) in decimal degrees.",
                "type": "object",
                "properties": {
                  "latitude": {
                    "type": "number",
                    "format": "double",
                    "example": 29.443702345
                  },
                  "longitude": {
                    "type": "number",
                    "format": "double",
                    "example": -98.502888123
                  }
                }
              },
              "startLocation": {
                "description": "Geocoded street address of start (latitude, longitude) coordinates.",
                "type": "string",
                "example": "16 N Fair Oaks Ave, Pasadena, CA 91103"
              },
              "startMs": {
                "description": "Beginning of the trip in UNIX milliseconds.",
                "type": "integer",
                "example": 1462878398034
              },
              "startOdometer": {
                "description": "Odometer reading (in meters) at the beginning of the trip. This is read from the vehicle's on-board diagnostics. If Samsara cannot read the vehicle's odometer values from on-board diagnostics, this value will be 0.",
                "type": "integer",
                "example": 210430450
              },
              "tollMeters": {
                "description": "Length in meters trip spent on toll roads.",
                "type": "integer",
                "example": 32000
              }
            }
          }
        }
      }
    },
    "V1VehicleHarshEventResponse": {
      "description": "Harsh event details for a vehicle",
      "type": "object",
      "required": [
        "incidentReportUrl",
        "harshEventType"
      ],
      "properties": {
        "downloadForwardVideoUrl": {
          "description": "URL for downloading the forward facing video",
          "type": "string",
          "example": "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-123456789.mp4?..."
        },
        "downloadInwardVideoUrl": {
          "description": "URL for downloading the inward facing video",
          "type": "string",
          "example": "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.mp4?..."
        },
        "downloadTrackedInwardVideoUrl": {
          "description": "URL for downloading the tracked inward facing video",
          "type": "string",
          "example": "https://samsara-dashcam-videos.s3.us-west-2.amazonaws.com/123/212123456789012/1539201872984/abC123De4-camera-video-segment-driver-123456789.tracked.mp4?..."
        },
        "harshEventType": {
          "description": "Type of the harsh event. One of: [Crash, Harsh Acceleration, Harsh Braking, Harsh Turn, ROP Engine, ROP Brake, YC Engine, YC Brake, Harsh Event]",
          "type": "string",
          "example": "Harsh Braking"
        },
        "incidentReportUrl": {
          "description": "URL of the associated incident report page",
          "type": "string",
          "example": "https://cloud.samsara.com/groups/1234/fleet/reports/safety/vehicle/212123456789012/incident/1539201882984"
        },
        "isDistracted": {
          "description": "Whether the driver was deemed distracted during this harsh event",
          "type": "boolean",
          "example": true
        },
        "location": {
          "type": "object",
          "properties": {
            "address": {
              "description": "Address of location where the harsh event occurred",
              "type": "string",
              "example": "350 Rhode Island St, San Francisco, CA"
            },
            "latitude": {
              "description": "Latitude of location where the harsh event occurred",
              "type": "number",
              "example": 33.07614328
            },
            "longitude": {
              "description": "Longitude of location where the harsh event occurred",
              "type": "number",
              "example": -96.14907287
            }
          }
        }
      }
    },
    "V1VehicleLocation": {
      "description": "Contains the location, in latitude and longitude, of a vehicle.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "driverId": {
          "description": "The ID of the driver currently assigned to this vehicle.",
          "type": "integer",
          "example": 1
        },
        "heading": {
          "description": "Heading in degrees.",
          "type": "number",
          "format": "double",
          "example": 246.42
        },
        "id": {
          "description": "ID of the vehicle.",
          "type": "integer",
          "format": "int64",
          "example": 112
        },
        "latitude": {
          "description": "Latitude in decimal degrees.",
          "type": "number",
          "format": "double",
          "example": 123.456
        },
        "location": {
          "description": "Text representation of nearest identifiable location to (latitude, longitude) coordinates.",
          "type": "string",
          "example": "1 Main St, Dallas, TX"
        },
        "longitude": {
          "description": "Longitude in decimal degrees.",
          "type": "number",
          "format": "double",
          "example": 32.897
        },
        "name": {
          "description": "Name of the vehicle.",
          "type": "string",
          "example": "Truck A7"
        },
        "odometerMeters": {
          "description": "The number of meters reported by the odometer.",
          "type": "integer",
          "format": "int64",
          "example": 71774705
        },
        "odometerType": {
          "description": "The source of data for odometerMeters. Will be either GPS or OBD",
          "type": "string",
          "enum": [
            "GPS",
            "OBD"
          ],
          "example": "GPS"
        },
        "onTrip": {
          "description": "Whether or not a trip is currently in progress for this vehicle. More information available via /fleet/trips endpoint.",
          "type": "boolean",
          "example": true
        },
        "routeIds": {
          "description": "A list of currently active route IDs that the vehicle is in.",
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "example": [
            2244514,
            2311654
          ]
        },
        "speed": {
          "description": "Speed in miles per hour.",
          "type": "number",
          "format": "double",
          "example": 64.37
        },
        "time": {
          "description": "The time the reported location was logged, reported as a UNIX timestamp in milliseconds.",
          "type": "integer",
          "example": 1462881998034
        },
        "vin": {
          "description": "Vehicle Identification Number (VIN) of the vehicle.",
          "type": "string",
          "example": "JTNBB46KX73011966"
        }
      }
    },
    "V1VehicleMaintenance": {
      "description": "Contains any J1939/Passenger engine light warnings and engine faults.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "ID of the vehicle.",
          "type": "integer",
          "format": "int64",
          "example": 112
        },
        "j1939": {
          "description": "J1939 based data. Null if no data is available.",
          "type": "object",
          "properties": {
            "checkEngineLight": {
              "description": "J1939 check engine lights.",
              "type": "object",
              "properties": {
                "emissionsIsOn": {
                  "type": "boolean"
                },
                "protectIsOn": {
                  "type": "boolean"
                },
                "stopIsOn": {
                  "type": "boolean"
                },
                "warningIsOn": {
                  "type": "boolean"
                }
              }
            },
            "diagnosticTroubleCodes": {
              "description": "J1939 DTCs.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "fmiId",
                  "fmiText",
                  "occurrenceCount",
                  "spnDescription",
                  "spnId",
                  "txId"
                ],
                "properties": {
                  "fmiId": {
                    "type": "integer"
                  },
                  "fmiText": {
                    "type": "string"
                  },
                  "occurrenceCount": {
                    "type": "integer"
                  },
                  "spnDescription": {
                    "type": "string"
                  },
                  "spnId": {
                    "type": "integer"
                  },
                  "txId": {
                    "type": "integer"
                  }
                }
              }
            }
          }
        },
        "passenger": {
          "description": "Passenger vehicle data. Null if no data is available.",
          "type": "object",
          "properties": {
            "checkEngineLight": {
              "description": "Passenger vehicle check engine light.",
              "type": "object",
              "properties": {
                "isOn": {
                  "type": "boolean"
                }
              }
            },
            "diagnosticTroubleCodes": {
              "description": "Passenger vehicle DTCs.",
              "type": "array",
              "items": {
                "type": "object",
                "required": [
                  "dtcId",
                  "dtcDescription",
                  "dtcShortCode"
                ],
                "properties": {
                  "dtcDescription": {
                    "type": "string"
                  },
                  "dtcId": {
                    "type": "integer"
                  },
                  "dtcShortCode": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "V1VehicleSafetyScoreResponse": {
      "description": "Safety score details for a vehicle",
      "type": "object",
      "properties": {
        "crashCount": {
          "description": "Crash event count",
          "type": "integer",
          "example": 0
        },
        "harshAccelCount": {
          "description": "Harsh acceleration event count",
          "type": "integer",
          "example": 1
        },
        "harshBrakingCount": {
          "description": "Harsh braking event count",
          "type": "integer",
          "example": 2
        },
        "harshEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1SafetyReportHarshEvent"
          }
        },
        "harshTurningCount": {
          "description": "Harsh turning event count",
          "type": "integer",
          "example": 0
        },
        "safetyScore": {
          "description": "Safety Score",
          "type": "integer",
          "example": 97
        },
        "safetyScoreRank": {
          "description": "Safety Score Rank",
          "type": "string",
          "example": "26"
        },
        "timeOverSpeedLimitMs": {
          "description": "Amount of time driven over the speed limit in milliseconds",
          "type": "integer",
          "example": 3769
        },
        "totalDistanceDrivenMeters": {
          "description": "Total distance driven in meters",
          "type": "integer",
          "example": 291836
        },
        "totalHarshEventCount": {
          "description": "Total harsh event count",
          "type": "integer",
          "example": 3
        },
        "totalTimeDrivenMs": {
          "description": "Amount of time driven in milliseconds",
          "type": "integer",
          "example": 19708293
        },
        "vehicleId": {
          "description": "Vehicle ID",
          "type": "integer",
          "example": 4321
        }
      }
    },
    "V1VisionCamerasResponse": {
      "description": "Contains the list of Cameras installed in the org.",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "cameraId": {
            "type": "integer",
            "format": "int64",
            "example": 1234512345999
          },
          "cameraName": {
            "type": "string",
            "example": "Line 32"
          },
          "ethernetIp": {
            "type": "string",
            "example": "10.1.2.34"
          },
          "wifiIp": {
            "type": "string",
            "example": "10.1.2.35"
          }
        }
      }
    },
    "V1VisionRunByCameraResponse": {
      "type": "object",
      "properties": {
        "cameraId": {
          "type": "integer",
          "format": "int64",
          "example": 1234512345123
        },
        "endedAtMs": {
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "inspectionResults": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "captureAtMs": {
                "type": "number",
                "format": "float64",
                "example": 1553811994730
              },
              "result": {
                "type": "string",
                "example": "PASS"
              },
              "stepResults": {
                "$ref": "#/definitions/V1VisionStepResults"
              }
            }
          }
        },
        "isOngoing": {
          "type": "boolean",
          "example": true
        },
        "program": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "name": {
              "type": "string",
              "example": "Barcode verification program"
            }
          }
        },
        "runSummary": {
          "type": "object",
          "properties": {
            "itemsPerMinute": {
              "type": "number",
              "format": "float64",
              "example": 0.1
            },
            "noReadCount": {
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "rejectCount": {
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "successCount": {
              "type": "integer",
              "format": "int64",
              "example": 181
            }
          }
        },
        "startedAtMs": {
          "type": "integer",
          "format": "int64",
          "example": 1553808606097
        }
      }
    },
    "V1VisionRunsByCameraAndProgramResponse": {
      "type": "object",
      "properties": {
        "deviceId": {
          "type": "integer",
          "format": "int64",
          "example": 1234512345123
        },
        "endedAtMs": {
          "type": "integer",
          "format": "int64",
          "example": 0
        },
        "programId": {
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "reportMetadata": {
          "type": "object",
          "properties": {
            "itemsPerMinute": {
              "type": "number",
              "format": "float64",
              "example": 0.1
            },
            "noReadCount": {
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "rejectCount": {
              "type": "integer",
              "format": "int64",
              "example": 0
            },
            "successCount": {
              "type": "integer",
              "format": "int64",
              "example": 181
            }
          }
        },
        "results": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "captureAtMs": {
                "type": "number",
                "format": "float64",
                "example": 1553811994730
              },
              "result": {
                "type": "string",
                "example": "PASS"
              },
              "stepResults": {
                "$ref": "#/definitions/V1VisionStepResults"
              }
            }
          }
        },
        "startedAtMs": {
          "type": "integer",
          "format": "int64",
          "example": 1553808606097
        }
      }
    },
    "V1VisionRunsByCameraResponse": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "integer",
            "format": "int64",
            "example": 1234512345123
          },
          "endedAtMs": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "program": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "name": {
                "type": "string",
                "example": "Barcode verification program"
              }
            }
          },
          "reportMetadata": {
            "type": "object",
            "properties": {
              "itemsPerMinute": {
                "type": "number",
                "format": "float64",
                "example": 0.1
              },
              "noReadCount": {
                "type": "integer",
                "format": "int64",
                "example": 0
              },
              "rejectCount": {
                "type": "integer",
                "format": "int64",
                "example": 0
              },
              "successCount": {
                "type": "integer",
                "format": "int64",
                "example": 181
              }
            }
          },
          "startedAtMs": {
            "type": "integer",
            "format": "int64",
            "example": 1553808606097
          }
        }
      }
    },
    "V1VisionRunsResponse": {
      "type": "object",
      "properties": {
        "visionRuns": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "deviceId": {
                "type": "integer",
                "format": "int64",
                "example": 1234512345123
              },
              "endedAtMs": {
                "type": "integer",
                "format": "int64",
                "example": 0
              },
              "programId": {
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "reportMetadata": {
                "description": "The response includes 4 additional fields that are now deprecated",
                "type": "object",
                "properties": {
                  "itemsPerMinute": {
                    "description": "Returns average scanned items per minute. Should be used instead of scanRate.",
                    "type": "number",
                    "format": "float64",
                    "example": 0.1
                  },
                  "noReadCount": {
                    "description": "Returns no read count for the run. Should be used instead of noReadScansCount",
                    "type": "integer",
                    "format": "int64",
                    "example": 181
                  },
                  "rejectCount": {
                    "description": "Returns reject count for the run. Should be used instead of failedScansCount",
                    "type": "integer",
                    "format": "int64",
                    "example": 0
                  },
                  "successCount": {
                    "description": "Returns success count for the run. Should be used instead of successfulScansCount",
                    "type": "integer",
                    "format": "int64",
                    "example": 181
                  }
                }
              },
              "startedAtMs": {
                "type": "integer",
                "format": "int64",
                "example": 1553808606097
              }
            }
          }
        }
      }
    },
    "V1VisionStepResults": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "angleCheck": {
            "type": "object",
            "properties": {
              "angleConfigured": {
                "description": "The configured angle allowance range (in degrees)",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 150
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 90
                  }
                }
              },
              "angleFound": {
                "description": "The counter-clockwise angle detected from the first edge to the second edge",
                "type": "integer",
                "format": "int64",
                "example": 60
              },
              "endStepName": {
                "description": "The name of the second reference step used to check the angle",
                "type": "string",
                "example": "Edge 2"
              },
              "startStepName": {
                "description": "The name of the first reference step used to check the angle",
                "type": "string",
                "example": "Edge 1"
              }
            }
          },
          "barcode": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "contents": {
                  "type": "string",
                  "example": "10855639004823"
                },
                "matchString": {
                  "type": "string",
                  "example": "10855639004823"
                },
                "type": {
                  "type": "string",
                  "example": "EAN8"
                }
              }
            }
          },
          "booleanLogic": {
            "type": "object",
            "properties": {
              "operator": {
                "type": "string",
                "example": "AND"
              },
              "steps": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string",
                      "example": "Expiration Date"
                    },
                    "result": {
                      "type": "string",
                      "example": "PASS"
                    }
                  }
                }
              }
            }
          },
          "caliper": {
            "type": "object",
            "properties": {
              "angleRange": {
                "description": "The configured angle allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int32",
                    "example": 360
                  },
                  "low": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0
                  }
                }
              },
              "contrastRange": {
                "description": "The configured contrast allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 50
                  }
                }
              },
              "distanceFound": {
                "description": "The distance found between the found edges",
                "type": "number",
                "format": "float",
                "example": 555.55
              },
              "filterPolarity": {
                "description": "The configured polarity for finding edges",
                "type": "string",
                "default": "LIGHT TO DARK",
                "enum": [
                  "LIGHT TO DARK",
                  "DARK TO LIGHT"
                ],
                "example": "LIGHT TO DARK"
              },
              "maxDistance": {
                "description": "The maximum allowed distance threshold",
                "type": "number",
                "format": "float",
                "example": 1000
              },
              "minDistance": {
                "description": "The minumum allowed distance threshold",
                "type": "number",
                "format": "float",
                "example": 500
              },
              "sharpnessRange": {
                "description": "The configured sharpness allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 80
                  }
                }
              },
              "straightnessRange": {
                "description": "The configured straightness allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int32",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int32",
                    "example": 80
                  }
                }
              },
              "unit": {
                "description": "The measurement unit of the distance found and the min and max distance threshold",
                "type": "string",
                "example": "Millimeters"
              }
            }
          },
          "contour": {
            "type": "object",
            "properties": {
              "angleDegrees": {
                "description": "The rotation angle found",
                "type": "integer",
                "format": "int64",
                "example": 0
              },
              "angleTolerance": {
                "description": "The rotation angle allowance",
                "type": "integer",
                "format": "int64",
                "example": 50
              },
              "matchPercentage": {
                "description": "The contour match percentage with the configured contour",
                "type": "integer",
                "format": "int64",
                "example": 46
              },
              "matchThreshold": {
                "description": "The configured match threshold for contours",
                "type": "integer",
                "format": "int64",
                "example": 18
              }
            }
          },
          "distance": {
            "type": "object",
            "properties": {
              "distanceFound": {
                "description": "The distance found between the start and end references",
                "type": "integer",
                "format": "float64",
                "example": 1000.22
              },
              "endStepName": {
                "description": "The name of the second reference step that we're checking the distances between",
                "type": "string",
                "example": "Bottom Right Square"
              },
              "enforceOffsetAngleRange": {
                "description": "Whether an offset angle range is enforced",
                "type": "boolean",
                "example": true
              },
              "maxDistance": {
                "description": "The maximum allowed distance threshold",
                "type": "integer",
                "format": "float64",
                "example": 900
              },
              "maxOffsetAngle": {
                "description": "The maximum angle allowance (in degrees) if enforceOffsetAngleRange is true",
                "type": "integer",
                "format": "int64",
                "example": 90
              },
              "minDistance": {
                "description": "The minumum allowed distance threshold",
                "type": "integer",
                "format": "float64",
                "example": 1500
              },
              "minOffsetAngle": {
                "description": "The minimum angle allowance (in degrees) if enforceOffsetAngleRange is true",
                "type": "integer",
                "format": "int64",
                "example": 45
              },
              "offsetAngleFound": {
                "description": "The counter-clockwise angle (in degrees) found between the horizontal axis of the start reference step and the last",
                "type": "integer",
                "format": "int64",
                "example": 50
              },
              "startStepName": {
                "description": "The name of the first reference step that we're checking the distances between",
                "type": "string",
                "example": "Top Left Square"
              },
              "unit": {
                "description": "The measurement unit of the distance found and the min and max distance threshold",
                "type": "string",
                "example": "Millimeters"
              }
            }
          },
          "expirationDate": {
            "type": "object",
            "properties": {
              "dateOffset": {
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "foundDate": {
                "type": "string",
                "example": "06/13/2019"
              },
              "matchDate": {
                "type": "string",
                "example": "06/13/2019"
              }
            }
          },
          "findCopies": {
            "type": "object",
            "properties": {
              "angleTolerance": {
                "description": "The orientation angle tolerance (+/- °)",
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "foundCount": {
                "description": "The number of copies found",
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "maxCount": {
                "description": "The maximum number of copies allowed",
                "type": "integer",
                "format": "int64",
                "example": 5
              },
              "minCount": {
                "description": "The minimum number of copies allowed",
                "type": "integer",
                "format": "int64",
                "example": 1
              },
              "threshold": {
                "description": "The minimum required similarity (in %) of a found copy compared to the configured match region",
                "type": "integer",
                "format": "int64",
                "example": 70
              }
            }
          },
          "findEdge": {
            "type": "object",
            "properties": {
              "angleFound": {
                "description": "The detected angle in degrees",
                "type": "integer",
                "format": "float64",
                "example": 90
              },
              "angleRange": {
                "description": "The configured angle allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int32",
                    "example": 360
                  },
                  "low": {
                    "type": "integer",
                    "format": "int32",
                    "example": 0
                  }
                }
              },
              "contrastPercent": {
                "description": "The detected contrast percentage",
                "type": "integer",
                "format": "float64",
                "example": 72.8
              },
              "contrastRange": {
                "description": "The configured contrast allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 50
                  }
                }
              },
              "filterPolarity": {
                "description": "The configured polarity for finding edges",
                "type": "string",
                "example": "ANY"
              },
              "sharpnessPercent": {
                "description": "The detected sharpness percentage",
                "type": "integer",
                "format": "float64",
                "example": 95
              },
              "sharpnessRange": {
                "description": "The configured sharpness allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 80
                  }
                }
              },
              "straightnessFound": {
                "description": "The detected straightness percentage",
                "type": "integer",
                "format": "float64",
                "example": 95
              },
              "straightnessRange": {
                "description": "The configured straightness allowance range",
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int32",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int32",
                    "example": 80
                  }
                }
              }
            }
          },
          "findShapes": {
            "type": "object",
            "properties": {
              "foundCount": {
                "type": "integer",
                "format": "int32",
                "example": 1
              },
              "maxCount": {
                "type": "integer",
                "format": "int32",
                "example": 5
              },
              "minCount": {
                "type": "integer",
                "format": "int32",
                "example": 1
              }
            }
          },
          "fixture": {
            "type": "object",
            "properties": {
              "coordinates": {
                "type": "object",
                "properties": {
                  "x": {
                    "type": "integer",
                    "format": "int32",
                    "example": 10
                  },
                  "y": {
                    "type": "integer",
                    "format": "int32",
                    "example": 10
                  }
                }
              },
              "found": {
                "type": "boolean",
                "example": true
              },
              "rotationDegrees": {
                "type": "integer",
                "format": "int64",
                "example": 90
              }
            }
          },
          "labelMatch": {
            "type": "object",
            "properties": {
              "score": {
                "type": "integer",
                "format": "int64",
                "example": 10
              },
              "threshold": {
                "type": "integer",
                "format": "int64",
                "example": 10
              }
            }
          },
          "name": {
            "type": "string",
            "example": "Chicken Caesar Label"
          },
          "presenceAbsence": {
            "type": "object",
            "properties": {
              "blueRange": {
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 150
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 90
                  }
                }
              },
              "checkForAbsence": {
                "type": "boolean",
                "example": true
              },
              "grayscaleRange": {
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 20
                  }
                }
              },
              "greenRange": {
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 150
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 90
                  }
                }
              },
              "hueRange": {
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 100
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 20
                  }
                }
              },
              "redRange": {
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 150
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 90
                  }
                }
              },
              "saturationRange": {
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 50
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 10
                  }
                }
              },
              "score": {
                "type": "integer",
                "format": "int64",
                "example": 50
              },
              "threshold": {
                "type": "integer",
                "format": "int64",
                "example": 50
              },
              "valueRange": {
                "type": "object",
                "properties": {
                  "high": {
                    "type": "integer",
                    "format": "int64",
                    "example": 50
                  },
                  "low": {
                    "type": "integer",
                    "format": "int64",
                    "example": 10
                  }
                }
              }
            }
          },
          "result": {
            "type": "string",
            "example": "PASS"
          },
          "textMatch": {
            "type": "object",
            "properties": {
              "foundText": {
                "type": "string",
                "example": "ABCD"
              },
              "matchString": {
                "type": "string",
                "example": "ABCD"
              }
            }
          }
        }
      }
    },
    "V1allRouteJobUpdates": {
      "type": "object",
      "properties": {
        "job_updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/V1jobUpdateObject"
          }
        },
        "sequence_id": {
          "description": "Sequence ID of the last update returned in the response",
          "type": "string",
          "example": "eyJpZCI6MywiY3JlYXRlZF9hdCI6MTQ5OTQyOTIyMDAwMn0="
        }
      }
    },
    "V1jobStatus": {
      "description": "The state of the dispatch job.",
      "type": "string",
      "enum": [
        "JobState_Unassigned",
        "JobState_Scheduled",
        "JobState_EnRoute",
        "JobState_Arrived",
        "JobState_Completed",
        "JobState_Skipped"
      ],
      "example": "JobState_Arrived"
    },
    "V1jobUpdateObject": {
      "type": "object",
      "properties": {
        "changed_at_ms": {
          "description": "Timestamp that this event was updated, represented as Unix milliseconds since epoch.",
          "type": "integer",
          "format": "int64",
          "example": 1462881998034
        },
        "job_id": {
          "description": "ID of the Samsara job.",
          "type": "integer",
          "format": "int64",
          "example": 773
        },
        "job_state": {
          "$ref": "#/definitions/V1jobStatus"
        },
        "prev_job_state": {
          "$ref": "#/definitions/V1jobStatus"
        },
        "route": {
          "$ref": "#/definitions/V1DispatchRoute"
        },
        "route_id": {
          "description": "ID of the Samsara dispatch route.",
          "type": "integer",
          "format": "int64",
          "example": 556
        }
      }
    },
    "Vehicle": {
      "description": "The vehicle object.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "auxInputType1": {
          "$ref": "#/definitions/VehicleAuxInputType1"
        },
        "auxInputType2": {
          "$ref": "#/definitions/VehicleAuxInputType2"
        },
        "externalIds": {
          "$ref": "#/definitions/VehicleExternalIds"
        },
        "harshAccelerationSettingType": {
          "$ref": "#/definitions/VehicleHarshAccelerationSettingType"
        },
        "id": {
          "$ref": "#/definitions/VehicleId"
        },
        "licensePlate": {
          "$ref": "#/definitions/VehicleLicensePlate"
        },
        "make": {
          "$ref": "#/definitions/VehicleMake"
        },
        "model": {
          "$ref": "#/definitions/VehicleModel"
        },
        "name": {
          "$ref": "#/definitions/VehicleName"
        },
        "notes": {
          "$ref": "#/definitions/VehicleNotes"
        },
        "staticAssignedDriver": {
          "$ref": "#/definitions/VehicleStaticAssignedDriver"
        },
        "tags": {
          "$ref": "#/definitions/VehicleTags"
        },
        "vin": {
          "$ref": "#/definitions/VehicleVin"
        },
        "year": {
          "$ref": "#/definitions/VehicleYear"
        }
      }
    },
    "VehicleAuxInputType": {
      "description": "The type of [auxiliary input](https://kb.samsara.com/hc/en-us/articles/232232368-Auxiliary-Inputs) configured for this Vehicle. Once configured, these inputs will generate dynamic, time-series data that will be available to view in the Samsara Dashboard. **By default**: empty. This can be set or updated through the Samsara Dashboard or the API at any time.",
      "type": "string",
      "enum": [
        "none",
        "emergencyLights",
        "emergencyAlarm",
        "stopPaddle",
        "powerTakeOff",
        "plow",
        "sweeper",
        "salter",
        "reefer",
        "door",
        "boom",
        "auxiliaryEngine",
        "generator",
        "eightWayLights"
      ],
      "example": "boom"
    },
    "VehicleAuxInputType1": {
      "$ref": "#/definitions/VehicleAuxInputType"
    },
    "VehicleAuxInputType2": {
      "$ref": "#/definitions/VehicleAuxInputType"
    },
    "VehicleEngineHours": {
      "description": "A manual override for the vehicle's engine hours. You may only override a vehicle's engine hours if it cannot be read from on-board diagnostics. When you provide a manual engine hours override, Samsara will begin updating a vehicle's engine hours based on when the Samsara Vehicle Gateway is recieving power or not.",
      "type": "integer",
      "format": "int64",
      "example": 10943
    },
    "VehicleExternalIds": {
      "$ref": "#/definitions/externalIds"
    },
    "VehicleHarshAccelerationSettingType": {
      "description": "The harsh acceleration setting type. This setting influences the acceleration sensitivity from which a [harsh event](https://kb.samsara.com/hc/en-us/articles/360006938891-Harsh-Events) is triggered. **By default**, this setting is inferred by the Samsara Vehicle Gateway from the engine computer, but it may be set or updated through the Samsara Dashboard or the API at any time. If set to `off`, then no acceleration based harsh events are triggered for the vehicle.",
      "type": "string",
      "enum": [
        "passengerCar",
        "lightTruck",
        "heavyDuty",
        "off",
        "automatic"
      ],
      "example": "off"
    },
    "VehicleId": {
      "description": "The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed.",
      "type": "string",
      "example": "112"
    },
    "VehicleLicensePlate": {
      "description": "The license plate of the Vehicle. **By default**: empty. Can be set or updated through the Samsara Dashboard or the API at any time.",
      "type": "string",
      "maxLength": 12,
      "example": "XHK1234"
    },
    "VehicleLocation": {
      "description": "Vehicle location event.",
      "type": "object",
      "required": [
        "time",
        "latitude",
        "longitude"
      ],
      "properties": {
        "heading": {
          "$ref": "#/definitions/VehicleLocationHeading"
        },
        "latitude": {
          "$ref": "#/definitions/VehicleLocationLatitude"
        },
        "longitude": {
          "$ref": "#/definitions/VehicleLocationLongitude"
        },
        "reverseGeo": {
          "$ref": "#/definitions/VehicleLocationReverseGeo"
        },
        "speed": {
          "$ref": "#/definitions/VehicleLocationSpeed"
        },
        "time": {
          "$ref": "#/definitions/VehicleLocationTime"
        }
      }
    },
    "VehicleLocationHeading": {
      "description": "Heading of the vehicle in degrees.",
      "type": "number",
      "format": "double",
      "example": 120
    },
    "VehicleLocationLatitude": {
      "description": "GPS latitude represented in degrees",
      "type": "number",
      "format": "double",
      "example": 122.142
    },
    "VehicleLocationLongitude": {
      "description": "GPS longitude represented in degrees",
      "type": "number",
      "format": "double",
      "example": -93.343
    },
    "VehicleLocationReverseGeo": {
      "description": "Reverse geocoded information.",
      "type": "object",
      "properties": {
        "formattedLocation": {
          "description": "Formatted address of the reverse geocoding data.",
          "type": "string",
          "example": "16 N Fair Oaks Ave, Pasadena, CA 91103"
        }
      }
    },
    "VehicleLocationSpeed": {
      "description": "GPS speed of the vehicle in miles per hour.",
      "type": "number",
      "format": "double",
      "example": 48.3
    },
    "VehicleLocationTime": {
      "$ref": "#/definitions/time"
    },
    "VehicleLocationsListResponse": {
      "description": "List of vehicle location events and pagination info.",
      "type": "object",
      "required": [
        "data",
        "pagination"
      ],
      "properties": {
        "data": {
          "description": "A list of vehicles and an array of location events for each vehicle.",
          "type": "array",
          "items": {
            "description": "A vehicle and its list of location events.",
            "type": "object",
            "required": [
              "id",
              "name",
              "locations"
            ],
            "properties": {
              "id": {
                "$ref": "#/definitions/VehicleId"
              },
              "locations": {
                "description": "A list of location events for the given vehicle.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VehicleLocation"
                }
              },
              "name": {
                "$ref": "#/definitions/VehicleName"
              }
            }
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "VehicleLocationsResponse": {
      "description": "Most recent vehicle locations and pagination info.",
      "type": "object",
      "required": [
        "data",
        "pagination"
      ],
      "properties": {
        "data": {
          "description": "List of the most recent locations for the specified vehicles.",
          "type": "array",
          "items": {
            "description": "A vehicle and its most recent location.",
            "type": "object",
            "required": [
              "id",
              "name",
              "location"
            ],
            "properties": {
              "id": {
                "$ref": "#/definitions/VehicleId"
              },
              "location": {
                "$ref": "#/definitions/VehicleLocation"
              },
              "name": {
                "$ref": "#/definitions/VehicleName"
              }
            }
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "VehicleMake": {
      "description": "The Vehicle’s manufacturing make. Automatically read from the engine computer if available. Empty if not available. Cannot be manually set.",
      "type": "string",
      "maxLength": 255,
      "example": "Ford"
    },
    "VehicleModel": {
      "description": "The Vehicle’s manufacturing model. Automatically read from the engine computer if available. Empty if not available. Cannot be manually set.",
      "type": "string",
      "maxLength": 255,
      "example": "F150"
    },
    "VehicleName": {
      "description": "The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.",
      "type": "string",
      "example": "Truck A7"
    },
    "VehicleNotes": {
      "description": "These are generic notes about the Vehicle. Empty by default. Can be set or updated through the Samsara Dashboard or the API at any time.",
      "type": "string",
      "default": "",
      "maxLength": 255,
      "example": "These are notes about this given vehicle."
    },
    "VehicleOdometerMeters": {
      "description": "A manual override for the vehicle's odometer. You may only override a vehicle's odometer if it cannot be read from on-board diagnostics. When you provide a manual odometer override, Samsara will begin updating a vehicle's odometer using GPS distance traveled since this override was set. See [here](https://kb.samsara.com/hc/en-us/articles/115005273667) for more details.",
      "type": "integer",
      "format": "int64",
      "example": 9182
    },
    "VehicleResponse": {
      "description": "A single vehicle.",
      "type": "object",
      "required": [
        "data"
      ],
      "properties": {
        "data": {
          "$ref": "#/definitions/Vehicle"
        }
      }
    },
    "VehicleStaticAssignedDriver": {
      "$ref": "#/definitions/driverTinyResponse"
    },
    "VehicleStaticAssignedDriverId": {
      "description": "ID for the static assigned driver of the vehicle.",
      "type": "string",
      "example": "123"
    },
    "VehicleStatsAuxInput": {
      "description": "Data for auxiliary digio equipment.",
      "type": "object",
      "properties": {
        "name": {
          "$ref": "#/definitions/VehicleAuxInputType"
        },
        "time": {
          "description": "UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.",
          "type": "string",
          "example": "2020-01-27T07:06:25Z"
        },
        "value": {
          "description": "Boolean indicating the state of the auxiliary equipment.",
          "type": "boolean",
          "example": "true"
        }
      }
    },
    "VehicleStatsCtpSmogTestData": {
      "description": "Required data for one CTP smog test.",
      "type": "object",
      "properties": {
        "commProtocol": {
          "description": "CAN bus communication protocol as detected by the vehicle gateway.",
          "type": "string",
          "enum": [
            "V",
            "P",
            "I",
            "Kf",
            "Ks",
            "C11",
            "C29",
            "C11s",
            "C29s"
          ],
          "example": "V"
        },
        "deviceFirmware": {
          "description": "CTP firmware version as reported by the vehicle gateway.",
          "type": "string",
          "example": "CTPv1"
        },
        "dlcPinVoltageMilliVolts": {
          "description": "Positive battery voltage as detected by the vehicle gateway reported in millivolts.",
          "type": "integer",
          "example": "12000"
        },
        "dlcPinVoltageMilliVoltsValid": {
          "description": "Indicates DlcPinVoltageMilliVolts was successfully read from the CAN bus.",
          "type": "boolean"
        },
        "linkId": {
          "description": "Device serial number.",
          "type": "integer",
          "example": "gjyxsgeexc"
        },
        "remoteObdTestRecords": {
          "description": "Contains all of the specific OBD data collected for a single ECU present on a vehicle. There can can be multiple ECUs on a vehicle.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/RemoteObdTestRecordType"
          }
        },
        "testDateTime": {
          "description": "UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.",
          "type": "string",
          "example": "2020-01-27T07:06:25Z"
        }
      }
    },
    "VehicleStatsEngineState": {
      "description": "Vehicle engine state event.",
      "type": "object",
      "required": [
        "time",
        "value"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/VehicleStatsTime"
        },
        "value": {
          "description": "The state of the engine.",
          "type": "string",
          "enum": [
            "Off",
            "On",
            "Idle"
          ],
          "example": "On"
        }
      }
    },
    "VehicleStatsFuelPercent": {
      "description": "Vehicle fuel percentage reading.",
      "type": "object",
      "required": [
        "time",
        "value"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/VehicleStatsTime"
        },
        "value": {
          "description": "The engine fuel level in percentage points (e.g. `99`, `50`, etc).",
          "type": "integer",
          "format": "int64",
          "example": 54
        }
      }
    },
    "VehicleStatsGpsDistanceMeters": {
      "description": "Vehicle GPS distance event.",
      "type": "object",
      "required": [
        "time",
        "value"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/VehicleStatsTime"
        },
        "value": {
          "description": "Number of meters the vehicle has traveled since the gateway was installed, based on GPS calculations.",
          "type": "number",
          "format": "double",
          "example": 81029.591434899
        }
      }
    },
    "VehicleStatsGpsOdometerMeters": {
      "description": "Vehicle GPS odometer event.",
      "type": "object",
      "required": [
        "time",
        "value"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/VehicleStatsTime"
        },
        "value": {
          "description": "Number of meters the vehicle has traveled according to the GPS calculations and the manually-specified odometer reading.",
          "type": "integer",
          "format": "int64",
          "example": 14010293
        }
      }
    },
    "VehicleStatsListResponse": {
      "description": "List of vehicle stat events and pagination info.",
      "type": "object",
      "required": [
        "data",
        "pagination"
      ],
      "properties": {
        "data": {
          "description": "A list of vehicles and an array of stat events for each vehicle.",
          "type": "array",
          "items": {
            "description": "A vehicle and its list of stat events.",
            "type": "object",
            "required": [
              "id",
              "name"
            ],
            "properties": {
              "auxInput1": {
                "description": "A list of auxiliary equipment states.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VehicleStatsAuxInput"
                }
              },
              "auxInput2": {
                "description": "A list of auxiliary equipment states.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VehicleStatsAuxInput"
                }
              },
              "ctpSmogTestData": {
                "description": "Required data for one CTP smog test.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VehicleStatsCtpSmogTestData"
                }
              },
              "engineStates": {
                "description": "A list of engine state events for the given vehicle.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VehicleStatsEngineState"
                }
              },
              "fuelPercent": {
                "description": "A list of fuel percentage readings for the given vehicle.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VehicleStatsFuelPercent"
                }
              },
              "gpsDistanceMeters": {
                "description": "A list of GPS distance events for the given vehicle.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VehicleStatsGpsDistanceMeters"
                }
              },
              "gpsOdometerMeters": {
                "description": "A list of GPS odometer events for the given vehicle.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VehicleStatsGpsOdometerMeters"
                }
              },
              "id": {
                "$ref": "#/definitions/VehicleId"
              },
              "name": {
                "$ref": "#/definitions/VehicleName"
              },
              "obdEngineSeconds": {
                "description": "A list of OBD engine seconds readings for the given vehicle.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VehicleStatsObdEngineSeconds"
                }
              },
              "obdOdometerMeters": {
                "description": "A list of OBD odometer readings for the given vehicle.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/VehicleStatsObdOdometerMeters"
                }
              }
            }
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "VehicleStatsObdEngineSeconds": {
      "description": "Vehicle OBD engine seconds reading.",
      "type": "object",
      "required": [
        "time",
        "value"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/VehicleStatsTime"
        },
        "value": {
          "description": "Number of seconds the vehicle's engine has been on according to the on-baord diagnostics.",
          "type": "integer",
          "format": "int64",
          "example": 9723103
        }
      }
    },
    "VehicleStatsObdOdometerMeters": {
      "description": "Vehicle OBD odometer reading.",
      "type": "object",
      "required": [
        "time",
        "value"
      ],
      "properties": {
        "time": {
          "$ref": "#/definitions/VehicleStatsTime"
        },
        "value": {
          "description": "Number of meters the vehicle has traveled according to the on-board diagnostics.",
          "type": "integer",
          "format": "int64",
          "example": 14010293
        }
      }
    },
    "VehicleStatsResponse": {
      "description": "Most recent vehicle stats and pagination info.",
      "type": "object",
      "required": [
        "data",
        "pagination"
      ],
      "properties": {
        "data": {
          "description": "List of the most recent stats for the specified vehicles and stat types.",
          "type": "array",
          "items": {
            "description": "A vehicle and its most recent stat.",
            "type": "object",
            "required": [
              "id",
              "name"
            ],
            "properties": {
              "auxInput1": {
                "$ref": "#/definitions/VehicleStatsAuxInput"
              },
              "auxInput2": {
                "$ref": "#/definitions/VehicleStatsAuxInput"
              },
              "engineState": {
                "$ref": "#/definitions/VehicleStatsEngineState"
              },
              "fuelPercent": {
                "$ref": "#/definitions/VehicleStatsFuelPercent"
              },
              "gpsDistanceMeters": {
                "$ref": "#/definitions/VehicleStatsGpsDistanceMeters"
              },
              "gpsOdometerMeters": {
                "$ref": "#/definitions/VehicleStatsGpsOdometerMeters"
              },
              "id": {
                "$ref": "#/definitions/VehicleId"
              },
              "name": {
                "$ref": "#/definitions/VehicleName"
              },
              "obdEngineSeconds": {
                "$ref": "#/definitions/VehicleStatsObdEngineSeconds"
              },
              "obdOdometerMeters": {
                "$ref": "#/definitions/VehicleStatsObdOdometerMeters"
              }
            }
          }
        },
        "pagination": {
          "$ref": "#/definitions/paginationResponse"
        }
      }
    },
    "VehicleStatsTime": {
      "$ref": "#/definitions/time"
    },
    "VehicleSummary": {
      "type": "object",
      "properties": {
        "distanceDrivenMeters": {
          "$ref": "#/definitions/DistanceDrivenMeters"
        },
        "driveTimeDurationMs": {
          "$ref": "#/definitions/DriveTimeDurationMs"
        },
        "fuelConsumedMl": {
          "$ref": "#/definitions/FuelConsumedMl"
        },
        "idleTimeDurationMs": {
          "$ref": "#/definitions/IdleTimeDurationMs"
        },
        "powerTakeOffDurationMs": {
          "$ref": "#/definitions/PowerTakeOffDurationMs"
        },
        "vehicle": {
          "$ref": "#/definitions/vehicleTinyResponse"
        }
      }
    },
    "VehicleTagIds": {
      "description": "An array of IDs of tags to associate with this vehicle.",
      "type": "array",
      "items": {
        "type": "string",
        "example": "321"
      }
    },
    "VehicleTags": {
      "description": "The list of [tags](https://kb.samsara.com/hc/en-us/articles/360026674631-Using-Tags-and-Tag-Nesting) associated with the Vehicle. **By default**: empty. Can be set or updated through the Samsara Dashboard or the API at any time.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/tagTinyResponse"
      }
    },
    "VehicleVin": {
      "description": "The VIN of the Vehicle. Most of the time, this will be automatically read from the engine computer by the Samsara Vehicle Gateway. It will be empty if it cannot be read. It can be set or updated through the Samsara Dashboard or the API at any time.",
      "type": "string",
      "maxLength": 17,
      "minLength": 11,
      "example": "1FUJA6BD31LJ09646"
    },
    "VehicleYear": {
      "description": "The Vehicle’s manufacturing model. Automatically read from the engine computer if available. Empty if not available. Cannot be manually set.",
      "type": "string",
      "example": "2008"
    },
    "Webhook": {
      "description": "A webhook object",
      "type": "object",
      "allOf": [
        {
          "required": [
            "id",
            "name",
            "eventType",
            "url",
            "secret"
          ],
          "properties": {
            "eventType": {
              "description": "The eventType that will trigger this webhook.",
              "type": "string",
              "enum": [
                "ping",
                "alert"
              ],
              "example": "alert"
            },
            "id": {
              "description": "A unique identifier for the webhook.",
              "type": "string",
              "example": "81238238123"
            },
            "name": {
              "description": "The name of the webhook.",
              "type": "string",
              "example": "Test Webhook"
            },
            "secret": {
              "description": "The secret that this webhook is signed with.",
              "type": "string",
              "example": "+iG5T4j+R74d5nHZKiJStRWMS2Y="
            },
            "url": {
              "description": "The URL of the webserver endpoint that the webhook payload should be sent to. Must be a https URL.",
              "type": "string",
              "example": "https://www.mysite.com/webhooks"
            }
          }
        }
      ]
    },
    "WebhookCreate": {
      "description": "A webhook object",
      "type": "object",
      "allOf": [
        {
          "required": [
            "name",
            "eventType",
            "url"
          ],
          "properties": {
            "eventType": {
              "description": "The eventType that will trigger this webhook.",
              "type": "string",
              "enum": [
                "ping",
                "alert"
              ],
              "example": "alert"
            },
            "name": {
              "description": "The name of the webhook.",
              "type": "string",
              "example": "Test Webhook"
            },
            "url": {
              "description": "The URL of the webserver endpoint that the webhook payload should be sent to. Must be a https URL.",
              "type": "string",
              "example": "https://www.mysite.com/webhooks"
            }
          }
        }
      ]
    },
    "annotation": {
      "description": "Annotation for the driving segment.",
      "type": "string",
      "format": "string",
      "example": "Yard move."
    },
    "contactTinyResponse": {
      "description": "A minified contact object",
      "type": "object",
      "properties": {
        "firstName": {
          "description": "First name of the contact.",
          "type": "string",
          "example": "Jane"
        },
        "id": {
          "description": "ID of the contact.",
          "type": "string",
          "example": "22408"
        },
        "lastName": {
          "description": "Last name of the contact.",
          "type": "string",
          "example": "Jones"
        }
      }
    },
    "documentTypeTinyResponse": {
      "description": "A tiny document type response object.",
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "Unique Samsara ID for the document type.",
          "type": "string",
          "example": "112"
        },
        "name": {
          "description": "Name of the document type.",
          "type": "string",
          "example": "112"
        }
      }
    },
    "driverId": {
      "description": "ID of Driver to assign this segment to. The driver assignment is a tentative assignment until the ID is 'ACCEPTED'.",
      "type": "string",
      "example": "1234"
    },
    "driverTinyResponse": {
      "description": "A minified driver object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the driver.",
          "type": "string",
          "example": "88668"
        },
        "name": {
          "description": "Name of the driver.",
          "type": "string",
          "example": "Susan Bob"
        }
      }
    },
    "dvirAllOf0TrailerDefectsItems": {
      "type": "object",
      "required": [
        "id",
        "isResolved"
      ],
      "properties": {
        "comment": {
          "description": "Comment on the defect.",
          "type": "string",
          "example": "Air Compressor not working"
        },
        "createdAtTime": {
          "description": "Time when the defect was created. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.",
          "type": "string",
          "example": "2020-01-27T07:06:25Z"
        },
        "defectType": {
          "description": "The type of DVIR defect.",
          "type": "string",
          "example": "Air Compressor"
        },
        "id": {
          "description": "ID of the defect.",
          "type": "string",
          "example": "18"
        },
        "isResolved": {
          "description": "Signifies if this defect is resolved.",
          "type": "boolean",
          "example": true
        },
        "resolvedAtTime": {
          "description": "Time when this defect was resolved. Will not be returned if the defect is unresolved. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.",
          "type": "string",
          "example": "2020-01-27T07:06:25Z"
        },
        "resolvedBy": {
          "description": "The person who resolved this defect.  Will not be returned if the defect is unresolved.",
          "type": "object",
          "properties": {
            "id": {
              "description": "ID of the entity that resolved this defect. If the defect was resolved by a driver, this will be a Samsara Driver ID. If the defect was resolved by a mechanic, this will be the Samsara Dashboard User ID of the mechanic.",
              "type": "string"
            },
            "name": {
              "description": "Name of the person who resolved this defect.",
              "type": "string"
            },
            "type": {
              "description": "Indicates whether this defect was resolved by a `driver` or a `mechanic`.",
              "type": "string",
              "enum": [
                "driver",
                "mechanic"
              ]
            }
          }
        },
        "trailer": {
          "allOf": [
            {
              "description": "The trailer this defect was submitted for."
            },
            {
              "description": "A minified trailer object.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "ID of the trailer.",
                  "type": "string",
                  "example": "123456789"
                },
                "name": {
                  "description": "Name of the trailer.",
                  "type": "string",
                  "example": "Midwest Trailer #5"
                }
              }
            }
          ]
        },
        "vehicle": {
          "allOf": [
            {
              "description": "The vehicle this defect was submitted for."
            },
            {
              "description": "A minified vehicle object.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "ID of the vehicle.",
                  "type": "string",
                  "example": "123456789"
                },
                "name": {
                  "description": "Name of the vehicle.",
                  "type": "string",
                  "example": "Midwest Truck #4"
                }
              }
            }
          ]
        }
      },
      "x-go-gen-location": "models"
    },
    "endTimeBodyParam": {
      "description": "End time of the driving segment, specified in RFC 3339 format.",
      "type": "string",
      "format": "date-time",
      "example": "2019-04-17T16:42:55Z"
    },
    "externalIds": {
      "description": "The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      },
      "example": {
        "maintenanceId": "250020",
        "payrollId": "ABFS18600"
      }
    },
    "location": {
      "description": "Location object",
      "type": "object",
      "required": [
        "latitude",
        "longitude"
      ],
      "properties": {
        "latitude": {
          "description": "GPS latitude represented in degrees",
          "type": "number",
          "format": "double",
          "example": 122.142
        },
        "longitude": {
          "description": "GPS longitude represented in degrees",
          "type": "number",
          "format": "double",
          "example": -93.343
        }
      }
    },
    "paginationResponse": {
      "description": "Pagination parameters.",
      "type": "object",
      "required": [
        "endCursor",
        "hasNextPage"
      ],
      "properties": {
        "endCursor": {
          "description": "Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request's 'after' query parameter. This may be an empty string if there are no more pages left to view.",
          "type": "string",
          "format": "string",
          "example": "MjkY"
        },
        "hasNextPage": {
          "description": "True if there are more pages of results immediately available after this endCursor.",
          "type": "boolean",
          "example": true
        }
      }
    },
    "routeStopTinyResponse": {
      "description": "A tiny route stop response object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "Unique Samsara ID for the route stop.",
          "type": "string",
          "example": "112"
        },
        "name": {
          "description": "Name of the route stop.",
          "type": "string",
          "example": "Sam Ave"
        }
      }
    },
    "standardErrorResponse": {
      "description": "Error response",
      "type": "object",
      "properties": {
        "message": {
          "description": "The message of the error.",
          "type": "string"
        },
        "requestId": {
          "description": "The ID of the request.",
          "type": "string"
        }
      }
    },
    "startTimeBodyParam": {
      "description": "Start time of the driving segment, specified in RFC 3339 format.",
      "type": "string",
      "format": "date-time",
      "example": "2019-04-17T15:42:55Z"
    },
    "tagTinyResponse": {
      "description": "A minified tag object",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the tag.",
          "type": "string",
          "example": "3914"
        },
        "name": {
          "description": "Name of the tag.",
          "type": "string",
          "example": "East Coast"
        },
        "parentTagId": {
          "description": "If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be omitted.",
          "type": "string",
          "example": "4815"
        }
      }
    },
    "time": {
      "description": "UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.",
      "type": "string",
      "example": "2020-01-27T07:06:25Z"
    },
    "trailerNameOnlyResponse": {
      "description": "A trailer object with only a name.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Name of the trailer.",
          "type": "string",
          "example": "Midwest Trailer #5"
        }
      }
    },
    "trailerTinyResponse": {
      "description": "A minified trailer object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the trailer.",
          "type": "string",
          "example": "123456789"
        },
        "name": {
          "description": "Name of the trailer.",
          "type": "string",
          "example": "Midwest Trailer #5"
        }
      }
    },
    "userRoleTinyResponse": {
      "description": "A minified user role object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "The unique ID for the role.",
          "type": "string",
          "example": "8a9371af-82d1-4158-bf91-4ecc8d3a114c"
        },
        "name": {
          "description": "The name of the role.",
          "type": "string",
          "example": "Full Admin"
        }
      }
    },
    "userTinyResponse": {
      "description": "A minified user object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the user.",
          "type": "string",
          "example": "88668"
        },
        "name": {
          "description": "Name of the user.",
          "type": "string",
          "example": "Susan Bob"
        }
      }
    },
    "vehicleTinyResponse": {
      "description": "A minified vehicle object.",
      "type": "object",
      "properties": {
        "id": {
          "description": "ID of the vehicle.",
          "type": "string",
          "example": "123456789"
        },
        "name": {
          "description": "Name of the vehicle.",
          "type": "string",
          "example": "Midwest Truck #4"
        }
      }
    }
  },
  "parameters": {
    "V1assetHistoryEndTimeParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.",
      "name": "endMs",
      "in": "query",
      "required": true
    },
    "V1assetHistoryStartTimeParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.",
      "name": "startMs",
      "in": "query",
      "required": true
    },
    "V1assetIdParam": {
      "type": "integer",
      "format": "int64",
      "description": "ID of the asset. Must contain only digits 0-9.",
      "name": "asset_id",
      "in": "path",
      "required": true
    },
    "V1createDvirParam": {
      "description": "DVIR creation body",
      "name": "createDvirParam",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "safe",
          "inspectionType",
          "userEmail"
        ],
        "properties": {
          "inspectionType": {
            "description": "Only type 'mechanic' is currently accepted.",
            "type": "string",
            "enum": [
              "mechanic"
            ],
            "example": "mechanic"
          },
          "mechanicNotes": {
            "description": "Any notes from the mechanic.",
            "type": "string",
            "example": "Replaced headlight on passenger side."
          },
          "odometerMiles": {
            "description": "The current odometer of the vehicle.",
            "type": "integer",
            "example": 38426
          },
          "previousDefectsCorrected": {
            "description": "Whether any previous defects were corrected. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.",
            "type": "boolean",
            "example": true
          },
          "previousDefectsIgnored": {
            "description": "Whether any previous defects were ignored. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.",
            "type": "boolean",
            "example": false
          },
          "resolvedDefectIds": {
            "description": "List of defect IDs to resolve.  The defects must be associated with the provided vehicle or trailer.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [
              18,
              19
            ]
          },
          "safe": {
            "description": "Whether or not this vehicle or trailer is safe to drive.",
            "type": "string",
            "enum": [
              "safe",
              "unsafe"
            ],
            "example": "safe"
          },
          "trailerId": {
            "description": "Id of trailer being inspected. Either vehicleId or trailerId must be provided.",
            "type": "integer",
            "example": 11
          },
          "userEmail": {
            "description": "The Samsara login email for the person creating the DVIR. The email must correspond to a Samsara user's email.",
            "type": "string",
            "example": "j.smith@yahoo.com"
          },
          "vehicleId": {
            "description": "Id of vehicle being inspected. Either vehicleId or trailerId must be provided.",
            "type": "integer",
            "example": 10
          }
        }
      }
    },
    "V1createMessagesParam": {
      "description": "Text to send to a list of driverIds.",
      "name": "createMessages",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "driverIds",
          "text"
        ],
        "properties": {
          "driverIds": {
            "description": "IDs of the drivers for whom the messages are sent to.",
            "type": "array",
            "items": {
              "type": "number",
              "format": "int64",
              "example": 555
            },
            "example": [
              111,
              222,
              333
            ]
          },
          "text": {
            "description": "The text sent in the message.",
            "type": "string",
            "example": "This is a message."
          }
        }
      }
    },
    "V1dataInputEndTimeParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp in unix milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Defaults to nowMs.",
      "name": "endMs",
      "in": "query"
    },
    "V1dataInputIdParam": {
      "type": "integer",
      "format": "int64",
      "description": "ID of the data input. Must contain only digits 0-9.",
      "name": "data_input_id",
      "in": "path",
      "required": true
    },
    "V1dataInputStartTimeParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp in unix milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. defaults to nowMs.",
      "name": "startMs",
      "in": "query"
    },
    "V1documentCreateParam": {
      "description": "To create a document for a given document type, provide the `documentTypeUuid` of the type of document you'd like to create. Then, pass in the `fields` of the document in the same order that they show up in the given document type.",
      "name": "createDocumentParams",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/V1DocumentCreate"
      }
    },
    "V1documentQueryByParam": {
      "enum": [
        "created",
        "updated"
      ],
      "type": "string",
      "format": "string",
      "description": "Retrieve most recent documents based on either driverCreatedAtMs or serverUpdatedAtMs. If no value is provided, the default is driverCreatedAtMs.",
      "name": "queryBy",
      "in": "query"
    },
    "V1documentsDurationMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.",
      "name": "durationMs",
      "in": "query"
    },
    "V1documentsEndMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.",
      "name": "endMs",
      "in": "query"
    },
    "V1getMessagesDurationMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.",
      "name": "durationMs",
      "in": "query"
    },
    "V1getMessagesEndMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Time in unix milliseconds that represents the end of time range of messages to return. Used in combination with durationMs. Defaults to now.",
      "name": "endMs",
      "in": "query"
    },
    "V1harshEventMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp in milliseconds representing the timestamp of a harsh event.",
      "name": "timestamp",
      "in": "query",
      "required": true
    },
    "V1jobUpdatesIncludeParam": {
      "type": "string",
      "description": "Optionally set include=route to include route object in response payload.",
      "name": "include",
      "in": "query"
    },
    "V1lastReceivedSequenceIDParam": {
      "type": "string",
      "description": "Sequence ID from the response payload of the last request. Defaults to fetching updates from last 24 hours.",
      "name": "sequence_id",
      "in": "query"
    },
    "V1paginationEndingBeforeParam": {
      "type": "string",
      "description": "Pagination parameter indicating the cursor position to return results before. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'startingAfter' parameter.",
      "name": "endingBefore",
      "in": "query"
    },
    "V1paginationLimitParam": {
      "type": "number",
      "format": "int64",
      "description": "Pagination parameter indicating the number of results to return in this request. Used in conjunction with either 'startingAfter' or 'endingBefore'.",
      "name": "limit",
      "in": "query"
    },
    "V1paginationStartingAfterParam": {
      "type": "string",
      "description": "Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the 'limit' parameter. Mutually exclusive with 'endingBefore' parameter.",
      "name": "startingAfter",
      "in": "query"
    },
    "V1routeCreateParam": {
      "name": "createDispatchRouteParams",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/V1DispatchRouteCreate"
      }
    },
    "V1routeDurationParam": {
      "type": "integer",
      "format": "int64",
      "description": "Time in milliseconds that represents the duration before end_time to query. Defaults to 24 hours.",
      "name": "duration",
      "in": "query"
    },
    "V1routeEndTimeParam": {
      "type": "integer",
      "format": "int64",
      "description": "Time in unix milliseconds that represents the end time of the requested time interval. See above for a description of how routes are returned. Defaults to now.",
      "name": "end_time",
      "in": "query"
    },
    "V1routeHistoryEndTimeParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp representing the end of the period to fetch, inclusive. Used in combination with start_time. Defaults to nowMs.",
      "name": "end_time",
      "in": "query"
    },
    "V1routeHistoryStartTimeParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp representing the start of the period to fetch, inclusive. Used in combination with end_time. Defaults to 0.",
      "name": "start_time",
      "in": "query"
    },
    "V1routeUpdateParam": {
      "name": "updateDispatchRouteParams",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/V1DispatchRouteUpdate"
      }
    },
    "V1safetyScoreEndMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.",
      "name": "endMs",
      "in": "query",
      "required": true
    },
    "V1safetyScoreStartMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.",
      "name": "startMs",
      "in": "query",
      "required": true
    },
    "V1sensorParam": {
      "description": "List of sensor IDs to query.",
      "name": "V1sensorParam",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "sensors"
        ],
        "properties": {
          "sensors": {
            "description": "List of sensor IDs to query.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [
              122
            ]
          }
        }
      }
    },
    "V1visionCameraIdParam": {
      "type": "integer",
      "format": "int64",
      "description": "The camera_id should be valid for the given accessToken.",
      "name": "camera_id",
      "in": "path",
      "required": true
    },
    "V1visionDurationMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "DurationMs is a required param. This works with the EndMs parameter. Indicates the duration in which the visionRuns will be fetched",
      "name": "durationMs",
      "in": "query",
      "required": true
    },
    "V1visionEndMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "EndMs is an optional param. It will default to the current time.",
      "name": "endMs",
      "in": "query"
    },
    "V1visionIncludeParam": {
      "type": "string",
      "description": "Include is a filter parameter. Accepts 'pass', 'reject' or 'no_read'.",
      "name": "include",
      "in": "query"
    },
    "V1visionLimitParam": {
      "type": "integer",
      "format": "int64",
      "description": "Limit is an integer value from 1 to 1,000.",
      "name": "limit",
      "in": "query"
    },
    "V1visionProgramIdParam": {
      "type": "integer",
      "format": "int64",
      "description": "The configured program's ID on the camera.",
      "name": "program_id",
      "in": "query"
    },
    "V1visionProgramIdPathParam": {
      "type": "integer",
      "format": "int64",
      "description": "The configured program's ID on the camera.",
      "name": "program_id",
      "in": "path",
      "required": true
    },
    "V1visionStartAtMsParam": {
      "type": "integer",
      "format": "int64",
      "description": "EndMs is an optional param. It will default to the current time.",
      "name": "startedAtMs",
      "in": "query"
    },
    "V1visionStartAtMsPathParam": {
      "type": "integer",
      "format": "int64",
      "description": "Started_at_ms is a required param. Indicates the start time of the run to be fetched.",
      "name": "started_at_ms",
      "in": "path",
      "required": true
    },
    "createMessagesParam": {
      "description": "Text to send to a list of driverIds.",
      "name": "createMessages",
      "in": "body",
      "required": true,
      "schema": {
        "type": "object",
        "required": [
          "driverIds",
          "text"
        ],
        "properties": {
          "driverIds": {
            "description": "IDs of the drivers for whom the messages are sent to.",
            "type": "array",
            "items": {
              "type": "number",
              "format": "int64",
              "example": 555
            },
            "example": [
              111,
              222,
              333
            ]
          },
          "text": {
            "description": "The text sent in the message.",
            "type": "string",
            "maxLength": 65533,
            "minLength": 1,
            "example": "This is a message."
          }
        }
      }
    },
    "createRouteParam": {
      "description": "Add a route.",
      "name": "route",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/CreateRouteRequest"
      }
    },
    "documentTypeIdParam": {
      "type": "string",
      "description": "A document type ID.",
      "name": "documentTypeId",
      "in": "query"
    },
    "driverActivationStatusParam": {
      "enum": [
        "active",
        "deactivated"
      ],
      "type": "string",
      "description": "If value is `deactivated`, only drivers that are deactivated will appear in the response. This parameter will default to `active` if not provided (fetching only active drivers).",
      "name": "driverActivationStatus",
      "in": "query"
    },
    "endTimeParam": {
      "type": "string",
      "format": "date-time",
      "description": "An end time in RFC 3339 format. Queries documents on createdAtTime. Defaults to startTime + 1 day if not specified. (Example: 2019-06-13T19:08:25Z). Time range cannot exceed 3 days (72 hours).",
      "name": "endTime",
      "in": "query"
    },
    "endTimeQueryParam": {
      "type": "string",
      "format": "date-time",
      "description": "End of the filter time range, specified in RFC 3339 format. (Example: 2019-06-13T19:08:25Z) Filters based on the server timestamp, i.e. createAtTime.",
      "name": "endTime",
      "in": "query"
    },
    "equipmentStatTypes": {
      "type": "array",
      "items": {
        "enum": [
          "gatewayEngineStates",
          "obdEngineStates",
          "fuelPercents",
          "engineRpm",
          "gatewayEngineSeconds",
          "obdEngineSeconds",
          "gpsOdometerMeters"
        ],
        "type": "string",
        "format": "string"
      },
      "collectionFormat": "csv",
      "description": "The type of equipment stat you want to query. Currently, you may only submit one type.\n\n- `engineRpm`: The revolutions per minute of the engine.\n- `fuelPercents`: The percent of fuel in the unit of equipment.\n- `obdEngineSeconds`: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics.\n- `gatewayEngineSeconds`: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power and an offset provided manually through the Samsara cloud dashboard.\n- `obdEngineStates`: The state of the engine read from on-board diagnostics. Can be `Off`, `On`, or `Idle`.\n- `gatewayEngineStates`: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be `Off` or `On`.\n- `gpsOdometerMeters`: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.",
      "name": "types",
      "in": "query",
      "required": true
    },
    "isDeactivatedParam": {
      "type": "boolean",
      "description": "If value is true, only drivers that are deactivated will appear in the response. This parameter will default to false if not provided (fetching only active drivers).",
      "name": "isDeactivated",
      "in": "query"
    },
    "startTimeParam": {
      "type": "string",
      "format": "date-time",
      "description": "A start time in RFC 3339 format. Queries documents on createdAtTime. Is required if an endTime is specified. Defaults to current time - 1 day if startTime and endTime are not provided. (Example: 2019-06-13T19:08:25Z).",
      "name": "startTime",
      "in": "query"
    },
    "startTimeQueryParam": {
      "type": "string",
      "format": "date-time",
      "description": "Beginning of the filter time range, specified in RFC 3339 format. (Example: 2019-06-13T18:08:25Z) Filters based on the server timestamp, i.e. createAtTime.",
      "name": "startTime",
      "in": "query"
    },
    "vehicleStatTypes": {
      "enum": [
        "engineStates",
        "fuelPercents",
        "obdOdometerMeters",
        "gpsOdometerMeters",
        "obdEngineSeconds",
        "gpsDistanceMeters",
        "auxInput1",
        "auxInput2"
      ],
      "type": "string",
      "description": "The stat type you want this endpoint to return information on. Currently only one stat type is accepted per request.\n\n- `engineStates`: The state of the engine (`Off`, `On`, `Idle`).\n- `fuelPercents`: The engine fuel level in percentage points (e.g. `99`, `50`, etc).\n- `obdOdometerMeters`: The odometer reading according to on-board diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. In these cases, we recommend using `gpsOdometerMeters`.\n- `gpsOdometerMeters`: The odometer reading according to GPS calculations. This calculation is based off GPS distance traveled and a manual odometer offset for a given vehicle, specified by the user in Samsara's dashboard UI or through the `odometerMeters` field in the [PATCH /fleet/vehicles/{id}](#operation/updateVehicleById) endpoint. `gpsOdometerMeters` is equal to the manual offset plus the GPS distance traveled since the offset was set. The value for this stat type will be omitted if a manual offset is not provided for a given vehicle. *A manual offset can only be provided when we do not have diagnostic coverage for a particular vehicle.*\n- `obdEngineSeconds`: The cumulative number of seconds the engine has run according to on-board diagnostics.\n- `gpsDistanceMeters`: The distance the vehicle has traveled since the gateway was installed based on GPS calculations.\n- `auxInput1`: Stat events from the [auxiliary input 1](https://kb.samsara.com/hc/en-us/articles/232232368-Auxiliary-Inputs) for the vehicle. For more details see the `data.auxInputType1` field in the response body for [Retrieving a Vehicle](#operation/getVehicle).\n- `auxInput2`: Stat events from the [auxiliary input 2](https://kb.samsara.com/hc/en-us/articles/232232368-Auxiliary-Inputs) for the vehicle. For more details see the `data.auxInputType2` field in the response body for [Retrieving a Vehicle](#operation/getVehicle).",
      "name": "types",
      "in": "query",
      "required": true
    }
  },
  "tags": [
    {
      "description": "Address book entries in Samsara can be used to collect useful data about operations within a particular address's geofence area. Once an address book entry is established, this address can then subsequently be used in order to create routes, set geofence arrival alerts, or detect trips that begin or end within a given geofence area.",
      "name": "Addresses"
    },
    {
      "description": "Assets refer to objects that are tracked with Samsara Asset Gateways. These include: trailers, reefers, equipment (construction, etc.), containers, and anything else you'd like to track with a Samsara Asset Gateway. This is different than Vehicles, which specifically have a Samsara Vehicle Gateway. Depending on the asset, different data is available. For all assets, GPS data is available. For powered assets like trailers, reefers, and equipment, other engine or on-board diagnostic data is available.",
      "name": "Assets"
    },
    {
      "description": "Contacts are an easy way to manage which users receive alerts (via sms or email).",
      "name": "Contacts"
    },
    {
      "description": "The documents feature allows you to manage driver-submitted documents from the Samsara app. Submitted documents are grouped by document types, and back office users can create new types of documents. For more information on the driver workflow around documents, see this [KB article](https://kb.samsara.com/hc/en-us/articles/360006911551-Using-Documents-in-the-Dashboard).",
      "name": "Documents"
    },
    {
      "description": "Driver objects allow you to track your driver-vehicle assignments, manage driver profiles, and update mobile app credential logins. You can retrieve a list of all drivers, or you can fetch each driver object individually.\nDrivers can be either active or inactive. You should inactivate a driver if you wish to keep the driver's driving history and HOS logs. If your driver is inactive, you can still get information about a driver summary.",
      "name": "Drivers"
    },
    {
      "description": "Equipment objects represent powered assets connected to a [Samsara AG24](https://www.samsara.com/products/models/ag24) device via an APWR, CAT, or J1939 cable. They are automatically created with a unique Samsara Equipment ID whenever a Samsara AG24 is activated in your organization.",
      "name": "Equipment"
    },
    {
      "description": "Driver logs containing duty status, certification details, and associated vehicles and trailers are available. You can also retrieve summarized total active time logs. Signin/Signout logs are also available. Drivers can track hours of service via the Samsara Driver mobile app. ",
      "name": "Hours of Service"
    },
    {
      "description": "Access to industrial data.",
      "name": "Industrial"
    },
    {
      "description": "Maintenance refers to both DVIRs and reports on vehicle fault codes.",
      "name": "Maintenance"
    },
    {
      "description": "Fleet Admins can send direct free-form messages to drivers. This will send a message to the driver's Samsara driver app, in which you can track whether or not a message has been read by a given driver. For sending structured messages, see the Documents API.",
      "name": "Messages"
    },
    {
      "description": "Dispatch routes include start and end times and locations and an array of jobs along the route. The jobs also include locations and scheduled arrival and departure times. As routes are completed, job skip, arrival, and completion times are made available in real-time. Routes can be associated with drivers, vehicles, and trailers, and jobs can be associated with documents.",
      "name": "Routes"
    },
    {
      "description": "Samsara provides you with more visibility on whether or not your fleets are being safe. With the collection of safety endpoints, you can get aggregate metrics around the performance of a particular driver or vehicle, as well as detailed logs of all the harsh events that take place in an organization.",
      "name": "Safety"
    },
    {
      "description": "The sensor object describes a sensor's attributes and settings within Samsara. Samsara has many different types of sensors, such as temperature and humidity monitors, door monitors, and more.",
      "name": "Sensors"
    },
    {
      "description": "Tags are a simple way to organize vehicles, drivers, assets, and sensors into easily identifiable groups. You can add unlimited entities to each tag, and entities can have multiple different tags. You can also use tag hierarchies in order to create nested classes, such as parent tag 'Massachusetts' and child tag 'Boston'. They also allow you to restrict access to data through \"tag-level\" permissions. For more information on tags functionality, see [this Knowledge Base article](https://kb.samsara.com/hc/en-us/articles/360026674631-Using-Tags-and-Tag-Nesting).",
      "name": "Tags"
    },
    {
      "description": "List trailer assignments over a given time period for all trailers or a given one. Trailer assignments include which driver the trailer was assigned to and for which time period.",
      "name": "Trailer Assignments"
    },
    {
      "description": "Driving activity is segmented into trips (travel between a start and a stop). Vehicle movement is broken down into trips along the following lines: a trip begins when a previously inactive vehicle achieves a speed of 5mph; the trip ends when the vehicle's speed remains below 5mph for 5 minutes, or when a vehicle crosses a state or national boundary. Trips contain start and stop times, locations, and addresses. Trips also contain distance and odometer information as well as fuel consumption.",
      "name": "Trips"
    },
    {
      "description": "The users API allows you to manage access to the Samsara dashboard. This can be particularly useful if you are looking to set up a connection with your identity provider to manage roles and permissions for certain types of users within your system.",
      "name": "Users"
    },
    {
      "description": "A Vehicle object is created when a [Samsara Vehicle Gateway](https://www.samsara.com/products/models/vg34) is first activated.\n\nWhen the gateway is activated, a Vehicle object is created with a unique Samsara ID.\n\nVehicle objects have static information (`name`, `licensePlate`, etc), and they also generate dynamic time-series data such as locations and diagnostics.\n\nVehicle static information is defined by fleet administrators either through the [Samsara dashboard](http://cloud.samsara.com) or through the API.\n\n- You can get a list of Vehicles and their static information using the [GET /fleet/vehicles](#operation/listVehicles) endpoint.\n\n- You can get a given vehicle and its static information by its Samsara ID or an [external ID](https://developers.samsara.com/docs/common-structures#section-external-ids) using the [GET /fleet/vehicles/{id}](#operation/getVehicle) endpoint.\n\n- You can set or update static Vehicle information using the [PATCH /fleet/vehicles/{id}](#operation/updateVehicle) endpoint.\n\nYou can get dynamic Vehicle time-series data in three ways:\n\n- Get a snapshot of the most recent readings for the time-series.\n\n    - [GET /fleet/vehicles/locations](#operation/getVehicleLocations)\n\n    - [GET /fleet/vehicles/stats](#operation/getVehicleStats)\n\n- Get a real-time feed of time-series data.\n\n    - [GET /fleet/vehicles/locations/feed](#operation/getVehicleLocationsFeed)\n\n    - [GET /fleet/vehicles/stats/feed](#operation/getVehicleStatsFeed)\n\n- Get a historical time-range of the time-series data.\n\n    - [GET /fleet/vehicles/locations/history](#operation/getVehicleLocationsHistory)\n\n    - [GET /fleet/vehicles/stats/history](#operation/getVehicleStatsHistory)",
      "name": "Vehicles"
    }
  ]
}