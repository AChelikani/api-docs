{
    "swagger": "2.0",
    "info": {
        "title": "Samsara API",
        "version": "1.0.0",
        "description": "# Introduction\nThe Samsara REST API lets you interact with the Samsara Cloud from anything that can send an HTTP request. With the Samsara API you can build powerful applications and custom solutions with sensor data.\n\nSamsara has endpoints available to track and analyze sensors, vehicles, and entire fleets. If you’re familiar with what you can build with a REST API, the following API reference guide will be your go-to resource.\n\nAPI access to the Samsara cloud is available to all Samsara administrators. If you’d like to try the API, [contact us](https://www.samsara.com/free-trial). The API is currently in beta and may be subject to frequent changes.\n\n# Connecting to the API\nThere are two ways to connect to the API. If you prefer to use the API in Javascript or Python, we supply SDKs which you can download here: [Javascript SDK](https://github.com/samsarahq/samsara-js), [Python SDK](https://github.com/samsarahq/samsara-python).\n\nIf you’d rather use another language to interact with the Samsara API, the endpoints and examples are in the reference guide below. \n"
    },
    "host": "api.samsara.com",
    "schemes": [
        "https"
    ],
    "basePath": "/v1",
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "externalDocs": {
        "description": "Documentation for the Samsara API",
        "url": "https://www.samsara.com/api"
    },
    "tags": [
        {
            "name": "Fleet",
            "description": "Access to fleet data"
        },
        {
            "name": "Sensors",
            "description": "Access to sensor data"
        }
    ],
    "paths": {
        "/fleet/list": {
            "post": {
                "tags": [
                    "Fleet"
                ],
                "summary": "/fleet/list:\nGet list of the vehicles.",
                "description": "This method returns a list of the vehicles in the Samsara Cloud and information about them.",
                "operationId": "get_fleet",
                "parameters": [
                    {
                        "$ref": "#/parameters/accessTokenParam"
                    },
                    {
                        "$ref": "#/parameters/groupParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of vehicles and information about each.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "groupId": {
                                    "type": "integer",
                                    "format": "int",
                                    "example": 101
                                },
                                "vehicles": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Vehicle"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fleet/locations": {
            "post": {
                "tags": [
                    "Fleet"
                ],
                "summary": "/fleet/locations: Get current location of vehicles in a group.",
                "description": "This method returns the current location in latitude and longitude of all vehicles in a requested group.",
                "operationId": "get_fleet_locations",
                "parameters": [
                    {
                        "$ref": "#/parameters/accessTokenParam"
                    },
                    {
                        "$ref": "#/parameters/groupParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of vehicle objects containing their location and the time at which that location was logged.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "groupId": {
                                    "type": "integer",
                                    "format": "int",
                                    "example": 101
                                },
                                "vehicles": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/VehicleLocation"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fleet/trips": {
            "post": {
                "tags": [
                    "Fleet"
                ],
                "summary": "Get historical trips data for specified vehicle.",
                "description": "This method returns a set of historical trips data for the specified vehicle in the specified time range.",
                "operationId": "get_fleet_trips",
                "parameters": [
                    {
                        "$ref": "#/parameters/accessTokenParam"
                    },
                    {
                        "name": "tripsParam",
                        "description": "Group ID, vehicle ID and time range to query.",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "required": [
                                "groupId",
                                "vehicleId",
                                "startMs",
                                "endMs"
                            ],
                            "properties": {
                                "groupId": {
                                    "type": "integer",
                                    "description": "Group ID to query.",
                                    "format": "int",
                                    "example": 101
                                },
                                "vehicleId": {
                                    "type": "integer",
                                    "description": "Vehicle ID to query.",
                                    "format": "int",
                                    "example": 112
                                },
                                "startMs": {
                                    "type": "integer",
                                    "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                                    "example": 1462878398034
                                },
                                "endMs": {
                                    "type": "integer",
                                    "description": "End of the time range, specified in milliseconds UNIX time.",
                                    "example": 1462881998034
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of trips taken by the requested vehicle within the specified timeframe.",
                        "schema": {
                            "$ref": "#/definitions/TripResponse"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fleet/drivers": {
            "post": {
                "tags": [
                    "Fleet"
                ],
                "summary": "Get all the drivers for the specified group.",
                "operationId": "get_fleet_drivers",
                "parameters": [
                    {
                        "$ref": "#/parameters/accessTokenParam"
                    },
                    {
                        "name": "groupDriversParam",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "required": [
                                "groupId"
                            ],
                            "properties": {
                                "groupId": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "Group ID to query.",
                                    "example": 101
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "All drivers in the group.",
                        "schema": {
                            "$ref": "#/definitions/DriversRespose"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fleet/hos_logs": {
            "post": {
                "tags": [
                    "Fleet"
                ],
                "summary": "Get the HOS (hours of service) logs for the specified driver.",
                "operationId": "get_fleet_hos_logs",
                "parameters": [
                    {
                        "$ref": "#/parameters/accessTokenParam"
                    },
                    {
                        "name": "hosLogsParam",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "required": [
                                "groupId",
                                "driverId",
                                "startMs",
                                "endMs"
                            ],
                            "properties": {
                                "groupId": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "Group ID to query.",
                                    "example": 101
                                },
                                "driverId": {
                                    "type": "integer",
                                    "format": "int64",
                                    "description": "Driver ID to query.",
                                    "example": 444
                                },
                                "startMs": {
                                    "type": "integer",
                                    "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                                    "example": 1462878398034
                                },
                                "endMs": {
                                    "type": "integer",
                                    "description": "End of the time range, specified in milliseconds UNIX time.",
                                    "example": 1462881998034
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "HOS logs for the specified driver.",
                        "schema": {
                            "$ref": "#/definitions/HosLogsResponse"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fleet/add_address": {
            "post": {
                "tags": [
                    "Fleet"
                ],
                "summary": "Add an address book entry to a specified group.",
                "description": "This method adds an address book entry to the specified group.",
                "operationId": "add_fleet_address",
                "parameters": [
                    {
                        "$ref": "#/parameters/accessTokenParam"
                    },
                    {
                        "name": "addressParam",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "required": [
                                "groupId",
                                "name",
                                "address",
                                "radius"
                            ],
                            "properties": {
                                "groupId": {
                                    "type": "integer",
                                    "description": "Group ID to query.",
                                    "format": "int",
                                    "example": 101
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of the location to add to the address book.",
                                    "example": "HQ"
                                },
                                "address": {
                                    "type": "string",
                                    "description": "The address of the entry to add, as it would be recognized if provided to maps.google.com",
                                    "example": "501 York St"
                                },
                                "radius": {
                                    "type": "integer",
                                    "description": "Radius in meters of the address (used for matching vehicle trip stops to this location).",
                                    "example": 10
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Address was successfully added. No response body is returned."
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/fleet/set_data": {
            "post": {
                "tags": [
                    "Fleet"
                ],
                "summary": "Enables mutation of metadata for vehicles.",
                "description": "This method enables the mutation of metadata for vehicles in the Samsara Cloud.",
                "operationId": "update_vehicles",
                "parameters": [
                    {
                        "$ref": "#/parameters/accessTokenParam"
                    },
                    {
                        "name": "vehicleUpdateParam",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "required": [
                                "groupId",
                                "vehicles"
                            ],
                            "properties": {
                                "groupId": {
                                    "type": "integer",
                                    "description": "Group ID to query.",
                                    "format": "int",
                                    "example": 101
                                },
                                "vehicles": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Vehicle"
                                    }
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Vehicles were successfully updated. No response body is returned."
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sensors/list": {
            "post": {
                "tags": [
                    "Sensors"
                ],
                "summary": "Get sensor objects",
                "description": "This method returns a list of the sensor objects in the Samsara Cloud and information about them.",
                "operationId": "get_sensors",
                "parameters": [
                    {
                        "$ref": "#/parameters/accessTokenParam"
                    },
                    {
                        "$ref": "#/parameters/groupParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of sensor objects.",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "sensors": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/Sensor"
                                    }
                                }
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sensors/temperature": {
            "post": {
                "tags": [
                    "Sensors"
                ],
                "summary": "Get temperature for requested sensors.",
                "description": "This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.",
                "operationId": "get_sensors_temperature",
                "parameters": [
                    {
                        "$ref": "#/parameters/accessTokenParam"
                    },
                    {
                        "$ref": "#/parameters/sensorParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of sensor objects containing the current temperature reported by each sensor.",
                        "schema": {
                            "$ref": "#/definitions/TemperatureResponse"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sensors/humidity": {
            "post": {
                "tags": [
                    "Sensors"
                ],
                "summary": "Get humidity for requested sensors.",
                "description": "This method returns the current relative humidity for the requested sensors.",
                "operationId": "get_sensors_humidity",
                "parameters": [
                    {
                        "$ref": "#/parameters/accessTokenParam"
                    },
                    {
                        "$ref": "#/parameters/sensorParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of sensor objects containing the current humidity reported by each sensor.",
                        "schema": {
                            "$ref": "#/definitions/HumidityResponse"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/sensors/history": {
            "post": {
                "tags": [
                    "Sensors"
                ],
                "summary": "Get historical data for specified sensors.",
                "description": "This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.",
                "operationId": "get_sensors_history",
                "parameters": [
                    {
                        "$ref": "#/parameters/accessTokenParam"
                    },
                    {
                        "name": "historyParam",
                        "description": "Group ID, time range and resolution, and list of sensor ID, field pairs to query.",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "type": "object",
                            "required": [
                                "groupId",
                                "startMs",
                                "endMs",
                                "stepMs",
                                "series"
                            ],
                            "properties": {
                                "groupId": {
                                    "type": "integer",
                                    "description": "Group ID to query.",
                                    "format": "int",
                                    "example": 101
                                },
                                "startMs": {
                                    "type": "integer",
                                    "description": "Beginning of the time range, specified in milliseconds UNIX time.",
                                    "example": 1462878398034
                                },
                                "endMs": {
                                    "type": "integer",
                                    "description": "End of the time range, specified in milliseconds UNIX time.",
                                    "example": 1462881998034
                                },
                                "stepMs": {
                                    "type": "integer",
                                    "description": "Time resolution for which data should be returned, in milliseconds. Specifying 3600000 will return data at hour intervals.",
                                    "example": 3600000
                                },
                                "series": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "description": "Sensor ID and field to query.",
                                        "required": [
                                            "widgetId",
                                            "field"
                                        ],
                                        "properties": {
                                            "widgetId": {
                                                "type": "integer",
                                                "description": "Sensor ID to query.",
                                                "format": "int",
                                                "example": 1
                                            },
                                            "field": {
                                                "type": "string",
                                                "description": "Field to query.",
                                                "enum": [
                                                    "ambientTemperature",
                                                    "probeTemperature",
                                                    "currentLoop1Raw",
                                                    "currentLoop1Mapped",
                                                    "currentLoop2Raw",
                                                    "currentLoop2Mapped",
                                                    "pmPowerTotal",
                                                    "pmPhase1Power",
                                                    "pmPhase2Power",
                                                    "pmPhase3Power",
                                                    "pmPhase1PowerFactor",
                                                    "pmPhase2PowerFactor",
                                                    "pmPhase3PowerFactor"
                                                ],
                                                "example": "ambientTemperature"
                                            }
                                        }
                                    }
                                },
                                "fillMissing": {
                                    "type": "string",
                                    "enum": [
                                        "withNull",
                                        "withPrevious"
                                    ],
                                    "default": "withNull"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of results objects, each containing a time and a datapoint for each requested sensor/field pair.",
                        "schema": {
                            "$ref": "#/definitions/SensorHistoryResponse"
                        }
                    },
                    "default": {
                        "description": "Unexpected error.",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Sensor": {
            "type": "object",
            "description": "Contains information about a sensor.",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "ID of the sensor.",
                    "format": "int",
                    "example": 123
                },
                "name": {
                    "type": "string",
                    "description": "Name of the sensor.",
                    "example": "Freezer ABC"
                },
                "macAddress": {
                    "type": "string",
                    "description": "MAC address of the sensor.",
                    "example": "11:11:11:11:11:11"
                }
            }
        },
        "Vehicle": {
            "type": "object",
            "description": "A vehicle object.",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "ID of the vehicle.",
                    "format": "int",
                    "example": 112
                },
                "name": {
                    "type": "string",
                    "description": "Name of the vehicle.",
                    "example": "Truck A7"
                },
                "note": {
                    "type": "string",
                    "example": "Red truck 2015 M16"
                }
            }
        },
        "VehicleLocation": {
            "type": "object",
            "description": "Contains the location, in latitude and longitude, of a vehicle.",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "ID of the vehicle.",
                    "format": "int",
                    "example": 112
                },
                "name": {
                    "type": "string",
                    "description": "Name of the vehicle.",
                    "example": "Truck A7"
                },
                "latitude": {
                    "type": "integer",
                    "description": "Latitude in decimal degrees.",
                    "example": 123.456
                },
                "longitude": {
                    "type": "integer",
                    "description": "Longitude in decimal degrees.",
                    "example": 567.89
                },
                "location": {
                    "type": "string",
                    "description": "Text representation of nearest identifiable location to (latitude, longitude) coordinates.",
                    "example": "1 Main St, Dallas, TX"
                },
                "time": {
                    "type": "integer",
                    "description": "The time the reported location was logged, reported as a UNIX timestamp in milliseconds.",
                    "example": 6789
                }
            }
        },
        "TemperatureResponse": {
            "type": "object",
            "description": "Contains the current temperatures of a sensor.",
            "properties": {
                "groupId": {
                    "type": "integer",
                    "format": "int",
                    "example": 101
                },
                "sensors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int",
                                "description": "ID of the sensor.",
                                "example": 122
                            },
                            "ambientTemperature": {
                                "type": "integer",
                                "description": "Currently reported ambient temperature in millidegrees celsius.",
                                "example": 11057
                            },
                            "probeTemperature": {
                                "type": "integer",
                                "description": "Currently reported probe temperature in millidegrees celsius. If no probe is connected, this parameter will not be reported.",
                                "example": -20145
                            }
                        }
                    }
                }
            }
        },
        "HumidityResponse": {
            "type": "object",
            "description": "Contains the current humidity of a sensor.",
            "properties": {
                "groupId": {
                    "type": "integer",
                    "format": "int",
                    "example": 101
                },
                "sensors": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "description": "ID of the sensor.",
                                "format": "int",
                                "example": 122
                            },
                            "humidity": {
                                "type": "integer",
                                "description": "Currently reported relative humidity in percent, from 0-100.",
                                "example": 53
                            }
                        }
                    }
                }
            }
        },
        "TripResponse": {
            "type": "object",
            "description": "Contains the trips for the vehicle in the requested timeframe. A trip is represented as an object that contains startMs, startLocation, startCoordinates, endMs, endLocation, and endCoordinates.",
            "properties": {
                "trips": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "startMs": {
                                "type": "integer",
                                "description": "Beginning of the trip in UNIX milliseconds.",
                                "example": 1462878398034
                            },
                            "startCoordinates": {
                                "type": "object",
                                "description": "Start (latitude, longitude) in decimal degrees.",
                                "properties": {
                                    "latitude": {
                                        "type": "integer",
                                        "example": 29.443702345
                                    },
                                    "longitude": {
                                        "type": "integer",
                                        "example": -98.502888123
                                    }
                                }
                            },
                            "startLocation": {
                                "type": "string",
                                "description": "Text representation of nearest identifiable location to the start (latitude, longitude) coordinates.",
                                "example": "Woodland Lane, Dallas, TX"
                            },
                            "endMs": {
                                "type": "integer",
                                "description": "End of the trip in UNIX milliseconds.",
                                "example": 1462881998034
                            },
                            "endCoordinates": {
                                "type": "object",
                                "description": "End (latitude, longitude) in decimal degrees.",
                                "properties": {
                                    "latitude": {
                                        "type": "integer",
                                        "example": 23.413702345
                                    },
                                    "longitude": {
                                        "type": "integer",
                                        "example": -91.502888123
                                    }
                                }
                            },
                            "endLocation": {
                                "type": "string",
                                "description": "Text representation of nearest identifiable location to the end (latitude, longitude) coordinates.",
                                "example": "FC Elementary School"
                            }
                        }
                    }
                }
            }
        },
        "DriversRespose": {
            "type": "object",
            "properties": {
                "drivers": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "integer",
                                "format": "int64"
                            },
                            "name": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "HosLogsResponse": {
            "type": "object",
            "properties": {
                "logs": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "groupId": {
                                "type": "integer",
                                "format": "int64",
                                "description": "ID of the group.",
                                "example": 101
                            },
                            "vehicleId": {
                                "type": "integer",
                                "format": "int64",
                                "description": "ID of the vehicle.",
                                "example": 112
                            },
                            "driverId": {
                                "type": "integer",
                                "format": "int64",
                                "description": "ID of the driver.",
                                "example": 444
                            },
                            "logStartMs": {
                                "type": "integer",
                                "format": "int64",
                                "description": "The time at which the log/HOS status started in UNIX milliseconds.",
                                "example": 1462881998034
                            },
                            "statusType": {
                                "type": "string",
                                "description": "The Hours of Service status type. One of 'OFF_DUTY', 'SLEEPER_BED', 'DRIVING', 'ON_DUTY'.",
                                "example": "OFF_DUTY"
                            },
                            "locCity": {
                                "type": "string",
                                "description": "City in which the log was recorded.",
                                "example": "Ahwatukee"
                            },
                            "locState": {
                                "type": "string",
                                "description": "State in which the log was recorded.",
                                "example": "Arizona"
                            },
                            "locLat": {
                                "type": "number",
                                "format": "float",
                                "description": "Latitude at which the log was recorded.",
                                "example": 23.413702345
                            },
                            "locLng": {
                                "type": "number",
                                "format": "float",
                                "description": "Longitude at which the log was recorded.",
                                "example": -98.502888123
                            }
                        }
                    }
                }
            }
        },
        "ErrorResponse": {
            "type": "object",
            "description": "Contains the error response when a request fails.",
            "properties": {
                "status_code": {
                    "type": "integer",
                    "description": "HTTP status code returned.",
                    "format": "int"
                },
                "message": {
                    "type": "string",
                    "description": "Error message returned."
                }
            }
        },
        "SensorHistoryResponse": {
            "type": "object",
            "description": "Contains the results for a sensor history request. Each result contains a timestamp and datapoint for each requested (sensor, field) pair.",
            "properties": {
                "results": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "timeMs": {
                                "type": "integer",
                                "description": "Timestamp in UNIX milliseconds.",
                                "example": 1453449599999
                            },
                            "series": {
                                "type": "array",
                                "description": "List of datapoints, one for each requested (sensor, field) pair.",
                                "items": {
                                    "type": "integer",
                                    "format": "int",
                                    "example": 1
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "parameters": {
        "accessTokenParam": {
            "name": "access_token",
            "description": "Samsara API access token.",
            "required": true,
            "in": "query",
            "type": "string"
        },
        "groupParam": {
            "name": "groupParam",
            "description": "Group ID to query.",
            "required": true,
            "in": "body",
            "schema": {
                "type": "object",
                "required": [
                    "groupId"
                ],
                "properties": {
                    "groupId": {
                        "type": "integer",
                        "description": "Group ID to query.",
                        "format": "int",
                        "example": 101
                    }
                }
            }
        },
        "sensorParam": {
            "name": "sensorParam",
            "description": "Group ID and list of sensor IDs to query.",
            "required": true,
            "in": "body",
            "schema": {
                "type": "object",
                "required": [
                    "groupId",
                    "sensors"
                ],
                "properties": {
                    "groupId": {
                        "type": "integer",
                        "description": "Group ID to query.",
                        "format": "int",
                        "example": 101
                    },
                    "sensors": {
                        "type": "array",
                        "description": "List of sensor IDs to query.",
                        "items": {
                            "type": "integer",
                            "format": "int"
                        },
                        "example": [
                            122
                        ]
                    }
                }
            }
        }
    }
}